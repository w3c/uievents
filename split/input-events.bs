<h1>Input Events</h1>

<pre class="metadata">
Shortname: input-events
Level:
Group: webapps
Status: ED
TR: https://www.w3.org/TR/uievents/
ED: https://w3c.github.io/uievents/
Repository: w3c/uievents
Editor: Gary Kacmarcik 59482, Google, garykac@google.com
Editor: Travis Leithead 40117, Microsoft, travil@microsoft.com
Former Editor: Doug Schepers, Mar 2008 - May 2011
!Tests: <a href=https://github.com/web-platform-tests/wpt/tree/master/uievents>web-platform-tests uievents/</a> (<a href=https://github.com/web-platform-tests/wpt/labels/uievents>ongoing work</a>)
Abstract:
	*** Input Events ***

	Note: This is an experimental split of the UI Events spec into smaller, event-specific
	specs. The split was made from an out-of-date snapshot, so the information here is not
	current, so please focus on the overall structure rather than the specifics of the
	content. If this experiment goes well, then we will split the current spec after all
	outstanding pull requests have been handled.
</pre>

<pre class="anchors">
urlPrefix: https://www.w3.org/TR/WebIDL/#idl-; type: type;
	text: long
urlPrefix: https://w3c.github.io/selection-api/#widl-Window-getSelection-Selection; type: dfn; for: Document
	text: getSelection()
url: https://www.w3.org/TR/2004/REC-xml-20040204/#NT-S; type: dfn;
	text: white space
url: https://www.w3.org/TR/uievents-key/#key-attribute-value; type: dfn; spec: uievents-key;
	text: key attribute value
url: https://www.w3.org/TR/uievents-key/#keys-modifier; type: dfn; spec: uievents-key;
	text: modifier keys table
url: https://html.spec.whatwg.org/multipage/forms.html#context-menus; type: dfn;
	text: contextmenu
url: https://www.w3.org/TR/pointerevents3/#pointerevent-interface; type: interface; spec: pointerevents3
	text: PointerEvent
url: https://dom.spec.whatwg.org/#concept-tree-ancestor; type: dfn;
	text: ancestor
url: https://www.w3.org/TR/CSS21/visuren.html#x43; type: dfn;
	text: stacking context
url: https://drafts.csswg.org/css-position-3/#positioned-box; type: dfn;
	text: positioned
url: https://drafts.csswg.org/css-position-4/#paint-a-stacking-context; type: dfn;
	text: painting a stacking context
</pre>

<pre class="link-defaults">
spec:dom; type:interface; text:Document
spec:dom; type:dfn; for:Event; text:target
spec:infra; type:dfn; text:code point
</pre>

<h2 id="spec-intro">Introduction</h2>

	<h3 id="spec-overview">Overview</h3>

		TODO.

	<h3 id="spec-conformance">Conformance</h3>

		Boilerplate?

<h2 id="style-conventions">Stylistic Conventions</h2>

This specification follows the
<a href="http://www.w3.org/People/Schepers/spec-conventions.html">Proposed W3C Specification Conventions</a>,
with the following supplemental additions:

<p class="note">This is a note.</p>

<!-- TODO : Example (but ensure that it doesn't get auto-numbered -->

<p class="&#x0058;&#x0058;&#x0058;">This is an open issue.</p>

<p class="warning">This is a warning.</p>

<pre class="idl-ignore" data-no-idl data-highlight="webidl">
	  interface <b>Example</b> {
	      // This is an IDL definition.
	  };
</pre>

<h2 id="events-inputevents">Input Events</h2>

	Input events are sent as notifications whenever the DOM is being updated (or about
	to be updated) as a direct result of a user action (e.g., keyboard input in an editable
	region, deleting or formatting text, ...).

	<h3 id="interface-inputevent">Interface InputEvent</h3>

		<p class="intro-dom">Introduced in DOM Level 3</p>

		<h4 id="idl-inputevent">InputEvent</h4>

			<pre class="idl" data-highlight="webidl">
			[Exposed=Window]
			interface InputEvent : UIEvent {
				constructor(DOMString type, optional InputEventInit eventInitDict = {});
				readonly attribute USVString? data;
				readonly attribute boolean isComposing;
				readonly attribute DOMString inputType;
			};
			</pre>

			<dl dfn-for="InputEvent">
				<dt><dfn attribute>data</dfn></dt>
				<dd>
					<code>data</code> holds the value of the characters generated by
					an input method. This MAY be a single Unicode character or a
					non-empty sequence of Unicode characters [[Unicode]]. Characters
					SHOULD be normalized as defined by the Unicode normalization
					form <em>NFC</em>, defined in [[UAX15]].
					This attribute MAY contain the <a>empty string</a>.

					The <a>un-initialized value</a> of this attribute MUST be
					<code>null</code>.
				</dd>

				<dt><dfn attribute>isComposing</dfn></dt>
				<dd>
					<code>true</code> if the input event occurs as part of a
					composition session, i.e., after a <a><code>compositionstart</code></a> event
					and before the corresponding <a><code>compositionend</code></a> event.

					The <a>un-initialized value</a> of this attribute MUST be
					<code>false</code>.
				</dd>

				<dt><dfn attribute>inputType</dfn></dt>
				<dd>
					<code>inputType</code> contains a string that identifies the type
					of input associated with the event.

					For a list of valid values for this attribute, refer to the
					[[Input-Events]] specification.

					The <a>un-initialized value</a> of this attribute MUST be
					the empty string <code>""</code>.
				</dd>
			</dl>

		<h4 id="idl-inputeventinit">InputEventInit</h4>

			<pre class="idl">
			dictionary InputEventInit : UIEventInit {
				DOMString? data = null;
				boolean isComposing = false;
				DOMString inputType = "";
			};
			</pre>

			<dl dfn-for="InputEventInit">
				<dt><dfn dict-member>data</dfn></dt>
				<dd>
					Initializes the <code>data</code> attribute of the InputEvent object.
				</dd>

				<dt><dfn dict-member>isComposing</dfn></dt>
				<dd>
					Initializes the <code>isComposing</code> attribute of the InputEvent object.
				</dd>

				<dt><dfn dict-member>inputType</dfn></dt>
				<dd>
					Initializes the <code>inputType</code> attribute of the InputEvent object.
				</dd>
			</dl>

	<h3 id="events-inputevent-event-order">Input Event Order</h3>

		The input events defined in this specification MUST occur in a set order
		relative to one another.

<table class="event-sequence-table">
<thead><tr><td class="cell-number"></th><th>Event Type</th><th>Notes</th></tr></thead>
<tr><td class="cell-number">1</td><td><a><code>beforeinput</code></a></td><td></td></tr>
<tr><td class="cell-number"></td><td></td><td><em>DOM element is updated</em></td></tr>
<tr><td class="cell-number">2</td><td><a><code>input</code></a></td><td></td></tr>
</table>

	<h3 id="events-input-types">Input Event Types</h3>

		<h4 id="event-type-beforeinput"><dfn>beforeinput</dfn></h4>

<table class="event-definition">
<tr><th>Type</th><td><strong><code>beforeinput</code></strong></td></tr>
<tr><th>Interface</th><td>{{InputEvent}}</td></tr>
<tr><th>Sync / Async</th><td>Sync</td></tr>
<tr><th>Bubbles</th><td>Yes</td></tr>
<tr><th>Trusted Targets</th><td><code>Element</code> (specifically: control types such as <code>HTMLInputElement</code>, etc.) or any <code>Element</code> with <code>contenteditable</code> attribute enabled</td></tr>
<tr><th>Cancelable</th><td>Yes</td></tr>
<tr><th>Composed</th><td>Yes</td></tr>
<tr><th>Default action</th><td>Update the DOM element</td></tr>
<tr><th>Context<br/> (trusted events)</th><td><ul> <li>{{Event}}.{{Event/target}} : <a>event target</a> that is about to be updated</li> <li>{{UIEvent}}.{{UIEvent/view}} : <a><code>Window</code></a></li> <li>{{UIEvent}}.{{UIEvent/detail}} : <code>0</code></li> <li>{{InputEvent}}.{{InputEvent/data}} : the string containing the data that will be added to the element, which MAY be <code>null</code> if the content will be deleted</li> <li>{{InputEvent}}.{{InputEvent/isComposing}} : <code>true</code> if this event is dispatched during a <a href="#keys-dead">dead key</a> sequence or while an <a>input method editor</a> is active (such that <a href="#events-compositionevents">composition events</a> are being dispatched); <code>false</code> otherwise.</li> </ul></td></tr>
</table>

			A <a>user agent</a> MUST dispatch this event when the DOM is about
			to be updated.

		<h4 id="event-type-input"><dfn>input</dfn></h4>

<table class="event-definition">
<tr><th>Type</th><td><strong><code>input</code></strong></td></tr>
<tr><th>Interface</th><td>{{InputEvent}}</td></tr>
<tr><th>Sync / Async</th><td>Sync</td></tr>
<tr><th>Bubbles</th><td>Yes</td></tr>
<tr><th>Trusted Targets</th><td><code>Element</code> (specifically: control types such as <code>HTMLInputElement</code>, etc.) or any <code>Element</code> with <code>contenteditable</code> attribute enabled</td></tr>
<tr><th>Cancelable</th><td>No</td></tr>
<tr><th>Composed</th><td>Yes</td></tr>
<tr><th>Default action</th><td>None</td></tr>
<tr><th>Context<br/> (trusted events)</th><td><ul> <li>{{Event}}.{{Event/target}} : <a>event target</a> that was just updated</li> <li>{{UIEvent}}.{{UIEvent/view}} : <a><code>Window</code></a></li> <li>{{UIEvent}}.{{UIEvent/detail}} : <code>0</code></li> <li>{{InputEvent}}.{{InputEvent/data}} : the string containing the data that has been added to the element, which MAY be the <a>empty string</a> if the content has been deleted</li> <li>{{InputEvent}}.{{InputEvent/isComposing}} : <code>true</code> if this event is dispatched during a <a href="#keys-dead">dead key</a> sequence or while an <a>input method editor</a> is active (such that <a href="#events-compositionevents">composition events</a> are being dispatched); <code>false</code> otherwise.</li> </ul></td></tr>
</table>

			A <a>user agent</a> MUST dispatch this event immediately after the
			DOM has been updated.

<h2 id="security-considerations">Security Considerations</h2>

	TODO - Add specific concerns for this spec

<h2 id="acknowledgements-contributors">Acknowledgements</h2>

	TODO

	Note: Include people from Editing/Input who have contributed.

<h2 id="other-uievents">Refs to other UIEvent specs \[DELETE]</h2>

	This section will be deleted.

	Temporary place to "define" other referenced UI Events (to make the bikeshed linker happy).
	This will be deleted once we have proper cross-references.

	<dfn>compositionend</dfn>
	<dfn>compositionstart</dfn>

	<h3 id="things">Things defined in other sections</h3>

		<h4 id="event-flow-activation">Activation triggers and behavior</h4>
		<h4 id="events-compositionevents">Composition Events</h4>
		<h4 id="event-flow-default-cancel">Default actions and cancelable events</h4>
		<h4 id="event-flow">Event dispatch and DOM event flow</h4>
		<h4 id="conf-interactive-ua">Web browsers and other dynamic or interactive <a>user agents</a></h4>
		<h4 id="conf-author-tools">Authoring tools</h4>

	<h3 id="keyboardevent-things">Things defined in KeyboardEvents</h3>
		<h4 id="keys-dead">Dead keys</h4>
		<h4 id="keys-IME">Input Method Editors</h4>

<h2 id="glossary">Glossary \[DELETE]</h2>

This section will be deleted.

Temporary glossary terms (for bikeshed linker).
Many of these are properly defined elsewhere and should be linked to directly.
Terms which should be defined in this spec should be defined inline.

: <dfn>empty string</dfn>
::	The empty string is a value of type <code>DOMString</code> of length
	<code>0</code>, i.e., a string which contains no characters (neither
	printing nor control characters).

: <dfn>event</dfn>
::	An event is the representation of some occurrence (such as a mouse click on
	the presentation of an element, the removal of child node from an element,
	or any number of other possibilities) which is associated with its <a>event
	target</a>. Each event is an instantiation of one specific <a>event
	type</a>.

: <dfn>event target</dfn>
::	The object to which an <a>event</a> is targeted using the [[#event-flow]].
	The event target is the value of the {{Event/target}} attribute.

: <dfn>IME</dfn>
: <dfn>input method editor</dfn>
:: 	An <em>input method editor</em> (IME), also known as a <em>front end
	processor</em>, is an application that performs the conversion between
	keystrokes and ideographs or other characters, usually by user-guided
	dictionary lookup, often used in East Asian languages (e.g., Chinese,
	Japanese, Korean).  An <a>IME</a> MAY also be used for dictionary-based word
	completion, such as on mobile devices.  See [[#keys-IME]] for treatment of
	IMEs in this specification.  See also <a>text composition system</a>.

: <dfn>text composition system</dfn>
::	A software component that interprets some form of alternate input (such as a
	<a>input method editor</a>, a speech processor, or a handwriting recognition
	system) and converts it to text.

: <dfn>un-initialized value</dfn>
::	The value of any event attribute (such as {{Event/bubbles}} or
	{{Event/currentTarget}}) before the event has been initialized with
	{{Event/initEvent()}}. The un-initialized values of an event apply
	immediately after a new event has been created using the method
	{{Document/createEvent()}}.

: <dfn>user agent</dfn>
::	A program, such as a browser or content authoring tool, normally running on
	a client machine, which acts on a user's behalf in retrieving, interpreting,
	executing, presenting, or creating content.  Users MAY act on the content
	using different user agents at different times, for different purposes.  See
	the [[#conf-interactive-ua]] and [[#conf-author-tools]] for details on the
	requirements for a <em>conforming</em> user agent.

: <dfn>Window</dfn>
::	The <code>Window</code> is the object referred to by the current <a>document</a>'s
	browsing context's Window Proxy object as defined in
	<a href="http://dev.w3.org/html5/spec/single-page.html#windowproxy" title="HTML5 WindowProxy description">HTML5</a>
	[[HTML5]].

