<h1>Keyboard Events</h1>

<pre class="metadata">
Shortname: keyboard-events
Level:
Group: webapps
Status: ED
TR: https://www.w3.org/TR/uievents/
ED: https://w3c.github.io/uievents/
Repository: w3c/uievents
Editor: Gary Kacmarcik 59482, Google, garykac@google.com
Editor: Travis Leithead 40117, Microsoft, travil@microsoft.com
Former Editor: Doug Schepers, Mar 2008 - May 2011
!Tests: <a href=https://github.com/web-platform-tests/wpt/tree/master/uievents>web-platform-tests uievents/</a> (<a href=https://github.com/web-platform-tests/wpt/labels/uievents>ongoing work</a>)
Abstract:
	*** Keyboard Events ***
	
	Note: This is an experimental split of the UI Events spec into smaller, event-specific
	specs. The split was made from an out-of-date snapshot, so the information here is not
	current, so please focus on the overall structure rather than the specifics of the
	content. If this experiment goes well, then we will split the current spec after all
	outstanding pull requests have been handled.
</pre>

<pre class="anchors">
urlPrefix: https://www.w3.org/TR/WebIDL/#idl-; type: type;
	text: long
urlPrefix: https://w3c.github.io/selection-api/#widl-Window-getSelection-Selection; type: dfn; for: Document
	text: getSelection()
url: https://www.w3.org/TR/2004/REC-xml-20040204/#NT-S; type: dfn;
	text: white space
url: https://www.w3.org/TR/uievents-key/#key-attribute-value; type: dfn; spec: uievents-key;
	text: key attribute value
url: https://www.w3.org/TR/uievents-key/#keys-modifier; type: dfn; spec: uievents-key;
	text: modifier keys table
url: https://html.spec.whatwg.org/multipage/forms.html#context-menus; type: dfn;
	text: contextmenu
url: https://www.w3.org/TR/pointerevents3/#pointerevent-interface; type: interface; spec: pointerevents3
	text: PointerEvent
url: https://dom.spec.whatwg.org/#concept-tree-ancestor; type: dfn;
	text: ancestor
url: https://www.w3.org/TR/CSS21/visuren.html#x43; type: dfn;
	text: stacking context
url: https://drafts.csswg.org/css-position-3/#positioned-box; type: dfn;
	text: positioned
url: https://drafts.csswg.org/css-position-4/#paint-a-stacking-context; type: dfn;
	text: painting a stacking context
</pre>

<pre class="link-defaults">
spec:dom; type:interface; text:Document
spec:dom; type:dfn; for:Event; text:target
spec:infra; type:dfn; text:code point
</pre>

<pre class="biblio">
{
	"DWW95": {
		"title": "Developing International Software for Windows 95 and Windows NT: A Handbook for International Software Design",
		"authors": [ "N. Kano" ],
		"publisher": "Microsoft Press",
		"date": "1995",
		"isbn": "1-55615-840-8"
	},
	"US-ASCII": {
		"title": "Coded Character Set - 7-Bit American Standard Code for Information Interchange",
		"publisher": "Standard ANSI X3.4-1986",
		"date": "1986"
	},
	"WIN1252": {
		"title": "Windows 1252 a Coded Character Set - 8-Bit",
		"href": "https://www.microsoft.com/globaldev/reference/sbcs/1252.htm",
		"publisher": "Microsoft Corporation"
	}
}
</pre>

<h2 id="spec-intro">Introduction</h2>

	<h3 id="spec-overview">Overview</h3>

		TODO.

	<h3 id="spec-conformance">Conformance</h3>
	
		Boilerplate?
		
<h2 id="style-conventions">Stylistic Conventions</h2>

This specification follows the
<a href="http://www.w3.org/People/Schepers/spec-conventions.html">Proposed W3C Specification Conventions</a>,
with the following supplemental additions:

*   The <a href="#key-legends"><em>key cap</em></a> printed on a key is shown as
	KEYCAP{&darr;}, KEYCAP{=} or KEYCAP{Q}. This is used to refer to a
	key from the user's perspective without regard for the
	{{KeyboardEvent/key}} and {{KeyboardEvent/code}} values in the
	generated {{KeyboardEvent}}.

*   Glyphs representing character are shown as: GLYPH{&#x239C2;}.

*   Unicode character encodings are shown as: UNI{U+003d}.

*   Names of key values generated by a key press (i.e., the value of
	{{KeyboardEvent}}.{{KeyboardEvent/key}}) are shown as:
	KEY{ArrowDown}, KEY_NOLINK{=}, KEY_NOLINK{q} or KEY_NOLINK{Q}.

*   Names of key codes associated with the physical keys (i.e., the
	value of {{KeyboardEvent}}.{{KeyboardEvent/code}}) are shown as:
	CODE{ArrowDown}, CODE{Equal} or CODE{KeyQ}.


In addition, certain terms are used in this specification with particular
meanings.  The term <q>implementation</q> applies to a browser, content
authoring tool, or other <a>user agent</a> that implements this specification,
while a content author is a person who writes script or code that takes
advantage of the interfaces, methods, attributes, events, and other features
described in this specification in order to make Web applications, and a user is
the person who uses those Web applications in an implementation.

And finally:

<p class="note">This is a note.</p>

<!-- TODO : Example (but ensure that it doesn't get auto-numbered -->

<p class="&#x0058;&#x0058;&#x0058;">This is an open issue.</p>

<p class="warning">This is a warning.</p>

<pre class="idl-ignore" data-no-idl data-highlight="webidl">
	  interface <b>Example</b> {
	      // This is an IDL definition.
	  };
</pre>

<h2 id="events-keyboardevents">Keyboard Events</h2>

	Keyboard events are device dependent, i.e., they rely on the capabilities of
	the input devices and how they are mapped in the operating systems. Refer to
	<a href="#keys">Keyboard events and key values</a> for more details,
	including examples on how Keyboard Events are used in combination with
	Composition Events. Depending on the character generation device, keyboard
	events might not be generated.

	<p class="note">
	Keyboard events are only one modality of providing textual input. For
	editing scenarios, consider also using the {{InputEvent}} as an alternate to
	(or in addition to) keyboard events.
	</p>

	<h3 id="interface-keyboardevent">Interface KeyboardEvent</h3>

		<p class="intro-dom">Introduced in this specification</p>

		The {{KeyboardEvent}} interface provides specific contextual information
		associated with keyboard devices. Each keyboard event references a key
		using a value. Keyboard events are commonly directed at the element that
		has the focus.

		The {{KeyboardEvent}} interface provides convenient attributes for some
		common modifiers keys: {{KeyboardEvent/ctrlKey}},
		{{KeyboardEvent/shiftKey}}, {{KeyboardEvent/altKey}},
		{{KeyboardEvent/metaKey}}. These attributes are equivalent to using the
		method {{KeyboardEvent/getModifierState()}} with KEYCAP{Control},
		KEYCAP{Shift}, KEYCAP{Alt}, or KEYCAP{Meta} respectively.

		To create an instance of the {{KeyboardEvent}} interface, use the
		{{KeyboardEvent}} constructor, passing an optional
		{{KeyboardEventInit}} dictionary.

		<h4 id="idl-keyboardevent">KeyboardEvent</h4>

			<pre class="idl" data-highlight="webidl">
			[Exposed=Window]
			interface KeyboardEvent : UIEvent {
				constructor(DOMString type, optional KeyboardEventInit eventInitDict = {});
				// KeyLocationCode
				const unsigned long DOM_KEY_LOCATION_STANDARD = 0x00;
				const unsigned long DOM_KEY_LOCATION_LEFT = 0x01;
				const unsigned long DOM_KEY_LOCATION_RIGHT = 0x02;
				const unsigned long DOM_KEY_LOCATION_NUMPAD = 0x03;

				readonly attribute DOMString key;
				readonly attribute DOMString code;
				readonly attribute unsigned long location;

				readonly attribute boolean ctrlKey;
				readonly attribute boolean shiftKey;
				readonly attribute boolean altKey;
				readonly attribute boolean metaKey;

				readonly attribute boolean repeat;
				readonly attribute boolean isComposing;

				boolean getModifierState(DOMString keyArg);
			};
			</pre>

			<dl dfn-for="KeyboardEvent">
				<dt><dfn const>DOM_KEY_LOCATION_STANDARD</dfn></dt>
				<dd>
					The key activation MUST NOT be distinguished as the left or
					right version of the key, and (other than the KEYCAP{NumLock}
					key) did not originate from the numeric keypad (or did not
					originate with a virtual key corresponding to the numeric
					keypad).

					<p class="example">
					The KEYCAP{Q} key on a PC 101 Key US keyboard.<br/>
					The KEYCAP{NumLock} key on a PC 101 Key US keyboard.<br/>
					The KEYCAP{1} key on a PC 101 Key US keyboard located in the
					main section of the keyboard.
					</p>
				</dd>

				<dt><dfn const>DOM_KEY_LOCATION_LEFT</dfn></dt>
				<dd>
					The key activated originated from the left key location (when
					there is more than one possible location for this key).

					<p class="example">
					The left KEYCAP{Control} key on a PC 101 Key US keyboard.
					</p>
				</dd>

				<dt><dfn const>DOM_KEY_LOCATION_RIGHT</dfn></dt>
				<dd>
					The key activation originated from the right key location (when
					there is more than one possible location for this key).

					<p class="example">
					The right KEYCAP{Shift} key on a PC 101 Key US keyboard.
					</p>
				</dd>

				<dt><dfn const>DOM_KEY_LOCATION_NUMPAD</dfn></dt>
				<dd>
					The key activation originated on the numeric keypad or with a
					virtual key corresponding to the numeric keypad (when there is
					more than one possible location for this key). Note that the
					KEYCAP{NumLock} key should always be encoded with a
					{{KeyboardEvent/location}} of
					{{KeyboardEvent/DOM_KEY_LOCATION_STANDARD}}.

					<p class="example">
					The KEYCAP{1} key on a PC 101 Key US keyboard located on the
					numeric pad.
					</p>
				</dd>

				<dt><dfn attribute>key</dfn></dt>
				<dd>
					<code>key</code> holds a [=key attribute value=] corresponding to
					the key pressed.

					<p class="note">
					The <code>key</code> attribute is not related to the legacy
					<code>keyCode</code> attribute and does not have the same set of
					values.
					</p>

					The <a>un-initialized value</a> of this attribute MUST be
					<code>""</code> (the empty string).
				</dd>

				<dt><dfn attribute>code</dfn></dt>
				<dd>
					<code>code</code> holds a string that identifies the physical
					key being pressed. The value is not affected by the current
					keyboard layout or modifier state, so a particular key will
					always return the same value.

					The <a>un-initialized value</a> of this attribute MUST be
					<code>""</code> (the empty string).
				</dd>

				<dt><dfn attribute>location</dfn></dt>
				<dd>
					The {{KeyboardEvent/location}} attribute contains an indication
					of the logical location of the key on the device.

					This attribute MUST be set to one of the DOM_KEY_LOCATION
					constants to indicate the location of a key on the device.

					If a <a>user agent</a> allows keys to be remapped, then the
					{{KeyboardEvent/location}} value for a remapped key MUST be set
					to a value which is appropriate for the new key. For example, if
					the CODE{ControlLeft} key is mapped to the CODE{KeyQ} key, then
					the {{KeyboardEvent/location}} attribute MUST be set to
					{{KeyboardEvent/DOM_KEY_LOCATION_STANDARD}}. Conversely, if the
					CODE{KeyQ} key is remapped to one of the KEYCAP{Control} keys,
					then the {{KeyboardEvent/location}} attribute MUST be set to
					either {{KeyboardEvent/DOM_KEY_LOCATION_LEFT}} or
					{{KeyboardEvent/DOM_KEY_LOCATION_RIGHT}}.

					The <a>un-initialized value</a> of this attribute MUST be
					<code>0</code>.
				</dd>

				<dt><dfn attribute>ctrlKey</dfn></dt>
				<dd>
					<code>true</code> if the KEYCAP{Control} (control) key modifier
					was active.

					The <a>un-initialized value</a> of this attribute MUST be
					<code>false</code>.
				</dd>

				<dt><dfn attribute>shiftKey</dfn></dt>
				<dd>
					<code>true</code> if the shift (KEYCAP{Shift}) key modifier was
					active.

					The <a>un-initialized value</a> of this attribute MUST be
					<code>false</code>.
				</dd>

				<dt><dfn attribute>altKey</dfn></dt>
				<dd>
					<code>true</code> if the KEYCAP{Alt} (alternative) (or
					GLYPH{Option}) key modifier was active.

					The <a>un-initialized value</a> of this attribute MUST be
					<code>false</code>.
				</dd>

				<dt><dfn attribute>metaKey</dfn></dt>
				<dd>
					<code>true</code> if the meta (KEYCAP{Meta}) key modifier was
					active.

					<p class="note">
					The GLYPH{Command} (GLYPH{&#x2318;}) key modifier on Macintosh
					systems is represented using this key modifier.
					</p>

					The <a>un-initialized value</a> of this attribute MUST be
					<code>false</code>.
				</dd>

				<dt><dfn attribute>repeat</dfn></dt>
				<dd>
					<code>true</code> if the key has been pressed in a sustained
					manner.  Holding down a key MUST result in the repeating the
					events EVENT{keydown}, EVENT{beforeinput}, EVENT{input} in this
					order, at a rate determined by the system configuration. For
					mobile devices which have <em>long-key-press</em> behavior, the
					first key event with a {{KeyboardEvent/repeat}} attribute value
					of <code>true</code> MUST serve as an indication of a
					<em>long-key-press</em>. The length of time that the key MUST be
					pressed in order to begin repeating is configuration-dependent.

					The <a>un-initialized value</a> of this attribute MUST be
					<code>false</code>.
				</dd>

				<dt><dfn attribute>isComposing</dfn></dt>
				<dd>
					<code>true</code> if the key event occurs as part of a
					composition session, i.e., after a EVENT{compositionstart} event
					and before the corresponding EVENT{compositionend} event.

					The <a>un-initialized value</a> of this attribute MUST be
					<code>false</code>.
				</dd>

				<dt><dfn method>getModifierState(keyArg)</dfn></dt>
				<dd>
					Queries the state of a modifier using a key value.

					Returns <code>true</code> if it is a modifier key and
					the modifier is activated, <code>false</code> otherwise.

					<dl class="parameters">
						<dt>DOMString keyArg</dt>
						<dd>
							A modifier key value.  Valid [=modifier keys=] are defined
							in the [=Modifier Keys table=] in [[UIEvents-Key]].

							<p class="note">
							If an application wishes to distinguish between right
							and left modifiers, this information could be deduced
							using keyboard events and {{KeyboardEvent/location}}.
							</p>
						</dd>
					</dl>
				</dd>
			</dl>

		<h4 id="idl-keyboardeventinit">KeyboardEventInit</h4>

			<pre class="idl">
			dictionary KeyboardEventInit : EventModifierInit {
				DOMString key = "";
				DOMString code = "";
				unsigned long location = 0;
				boolean repeat = false;
				boolean isComposing = false;
			};
			</pre>

			<dl dfn-for="KeyboardEventInit">
				<dt><dfn dict-member>key</dfn></dt>
				<dd>
					Initializes the <code>key</code> attribute of the KeyboardEvent
					object to the unicode character string representing the meaning
					of a key after taking into account all keyboard modifiers
					(such as shift-state). This value is the final effective value
					of the key. If the key is not a printable character, then it
					should be one of the key values defined in [[UIEvents-Key]].
				</dd>

				<dt><dfn dict-member>code</dfn></dt>
				<dd>
					Initializes the <code>code</code> attribute of the KeyboardEvent
					object to the unicode character string representing the key that
					was pressed, ignoring any keyboard modifications such as
					keyboard layout. This value should be one of the code values
					defined in [[UIEvents-Code]].
				</dd>

				<dt><dfn dict-member>location</dfn></dt>
				<dd>
					Initializes the {{KeyboardEvent/location}} attribute of the
					KeyboardEvent object to one of the following location numerical
					constants:

					*	{{KeyboardEvent/DOM_KEY_LOCATION_STANDARD}} (numerical value 0)</li>
					*	{{KeyboardEvent/DOM_KEY_LOCATION_LEFT}} (numerical value 1)</li>
					*	{{KeyboardEvent/DOM_KEY_LOCATION_RIGHT}} (numerical value 2)</li>
					*	{{KeyboardEvent/DOM_KEY_LOCATION_NUMPAD}} (numerical value 3)</li>
				</dd>

				<dt><dfn dict-member>repeat</dfn></dt>
				<dd>
					Initializes the <code>repeat</code> attribute of the
					KeyboardEvent object. This attribute should be set to
					<code>true</code> if the the current KeyboardEvent is considered
					part of a repeating sequence of similar events caused by the
					long depression of any single key, <code>false</code> otherwise.
				</dd>

				<dt><dfn dict-member>isComposing</dfn></dt>
				<dd>
					Initializes the <code>isComposing</code> attribute of the
					KeyboardEvent object. This attribute should be set to
					<code>true</code> if the event being constructed occurs as part
					of a composition sequence, <code>false</code> otherwise.
				</dd>
			</dl>

	<div class="warning">
	Legacy keyboard event implementations include three additional attributes,
	<code>keyCode</code>, <code>charCode</code>, and <code>which</code>. The
	<code>keyCode</code> attribute indicates a numeric value associated with a
	particular key on a computer keyboard, while the <code>charCode</code>
	attribute indicates the <abbr title="American Standard Code for
	Information Interchange">ASCII</abbr> value of the character associated
	with that key (which might be the same as the <code>keyCode</code> value)
	and is applicable only to keys that produce a <a>character value</a>.

	In practice, <code>keyCode</code> and <code>charCode</code> are inconsistent
	across platforms and even the same implementation on different operating
	systems or using different localizations. This specification does not define
	values for either <code>keyCode</code> or <code>charCode</code>, or behavior
	for <code>charCode</code>. In conforming UI Events implementations, content
	authors can instead use {{KeyboardEvent/key}} and {{KeyboardEvent/code}}.

	<em>For more information, see the informative appendix on
	<a href="#legacy-key-attributes">Legacy key attributes</a>.</em>
	</div>

	<p class="note">
	For compatibility with existing content, virtual keyboards, such as software
	keyboards on screen-based input devices, are expected to produce the normal
	range of keyboard events, even though they do not possess physical keys.
	</p>

	<p class="note">
	In some implementations or system configurations, some key events, or their
	values, might be suppressed by the <a>IME</a> in use.
	</p>

	<h3 id="events-keyboard-key-location">Keyboard Event Key Location</h3>

		The {{KeyboardEvent/location}} attribute can be used to disambiguate
		between {{KeyboardEvent/key}} values that can be generated by different
		physical keys on the keyboard, for example, the left and right
		KEYCAP{Shift} key or the physical arrow keys vs. the numpad arrow keys
		(when KEYCAP{NumLock} is off).

		The following table defines the valid {{KeyboardEvent/location}} values
		for the special keys that have more than one location on the keyboard:

		++---------------------------------+----------------------------------------------+
		=| {{KeyboardEvent}} .             | Valid {{KeyboardEvent/location}} values      |
		 | {{KeyboardEvent/key}}           |                                              |
		 +---------------------------------+----------------------------------------------+
		+| KEY{Shift}, KEY{Control},       | {{KeyboardEvent/DOM_KEY_LOCATION_LEFT}},     |
		 | KEY{Alt}, KEY{Meta}             | {{KeyboardEvent/DOM_KEY_LOCATION_RIGHT}}     |
		 +---------------------------------+----------------------------------------------+
		+| KEY{ArrowDown}, KEY{ArrowLeft}, | {{KeyboardEvent/DOM_KEY_LOCATION_STANDARD}}, |
		 | KEY{ArrowRight}, KEY{ArrowUp}   | {{KeyboardEvent/DOM_KEY_LOCATION_NUMPAD}}    |
		 +---------------------------------+----------------------------------------------+
		+| KEY{End}, KEY{Home},            | {{KeyboardEvent/DOM_KEY_LOCATION_STANDARD}}, |
		 | KEY{PageDown}, KEY{PageUp}      | {{KeyboardEvent/DOM_KEY_LOCATION_NUMPAD}}    |
		 +---------------------------------+----------------------------------------------+
		+| KEY_NOLINK{0}, KEY_NOLINK{1},   | {{KeyboardEvent/DOM_KEY_LOCATION_STANDARD}}, |
		 | KEY_NOLINK{2}, KEY_NOLINK{2},   | {{KeyboardEvent/DOM_KEY_LOCATION_NUMPAD}}    |
		 | KEY_NOLINK{4}, KEY_NOLINK{5},   |                                              |
		 | KEY_NOLINK{6}, KEY_NOLINK{7},   |                                              |
		 | KEY_NOLINK{8}, KEY_NOLINK{9},   |                                              |
		 | KEY_NOLINK{.}, KEY{Enter},      |                                              |
		 | KEY_NOLINK{+}, KEY_NOLINK{-},   |                                              |
		 | KEY_NOLINK{*}, KEY_NOLINK{/}    |                                              |
		++---------------------------------+----------------------------------------------+

		For all other keys not listed in this table, the
		{{KeyboardEvent/location}} attribute MUST always be set to
		{{KeyboardEvent/DOM_KEY_LOCATION_STANDARD}}.

	<h3 id="events-keyboard-event-order">Keyboard Event Order</h3>

		The keyboard events defined in this specification occur in a set order
		relative to one another, for any given key:

		++---+-------------+--------------------------------------------------------+
		=| # | Event Type  | Notes                                                  |
		 +---+-------------+--------------------------------------------------------+
		+| 1 | keydown     |                                                        |
		+| 2 | beforeinput | <em>(only for keys which produce a <a>character        |
		 |   |             | value</a>)</em>                                        |
		+|   |             | <em>Any <a>default actions</a> related to this         |
		 |   |             | key, such as inserting a character in to the DOM.</em> |
		+| 3 | input       | <em>(only for keys which have updated the DOM)</em>    |
		+|   |             | <em>Any events as a result of the key being held for a |
		 |   |             | sustained period (see below).</em>                     |
		+| 4 | keyup       |                                                        |
		++---+-------------+--------------------------------------------------------+

		If the key is depressed for a sustained period, the following events MAY
		repeat at an environment-dependent rate: <!-- and the key should seek
		counseling -->

		++---+-------------+---------------------------------------------------+
		=| # | Event Type  | Notes                                             |
		 +---+-------------+---------------------------------------------------+
		+| 1 | keydown     | <em>(with {{KeyboardEvent/repeat}} attribute set  |
		 |   |             | to <code>true</code>)</em>                        |
		+| 2 | beforeinput | <em>(only for keys which produce a <a>character   |
		 |   |             | value</a>)</em>                                   |
		+|   |             | <em>Any <a>default actions</a> related to this    |
		 |   |             | key, such as inserting a character in to the      |
		 |   |             | DOM.</em>                                         |
		+| 3 | input       | <em>(only for keys which have updated the         |
		 |   |             | DOM)</em>                                         |
		++---+-------------+---------------------------------------------------+

		<p class="note">
		Typically, any <a>default actions</a> associated with any particular key
		are completed before the EVENT{keyup} event is dispatched. This might
		delay the EVENT{keyup} event slightly (though this is not likely to be a
		perceptible delay).
		</p>

		The <a>event target</a> of a key event is the currently focused element
		which is processing the keyboard activity. This is often an HTML
		<code>input</code> element or a textual element which is editable, but
		MAY be an element defined by the <a>host language</a> to accept keyboard
		input for non-text purposes, such as the activation of an accelerator
		key or trigger of some other behavior. If no suitable element is in
		focus, the event target will be the HTML <a>body element</a> if
		available, otherwise the <a>root element</a>.

		<p class="note">
		The <a>event target</a> might change between different key events. For
		example, a EVENT{keydown} event for the KEYCAP{Tab} key will likely have
		a different <a>event target</a> than the  EVENT{keyup} event on the same
		keystroke.

	<h3 id="events-keyboard-types">Keyboard Event Types</h3>

		<h4 id="event-type-keydown"><dfn>keydown</dfn></h4>

			++------------------+--------------------------------------------------------------------------------------+ event-definition
			=| %                |                                                                                      |
			 +------------------+--------------------------------------------------------------------------------------+
			+| Type             | <strong><code>keydown</code></strong>                                                |
			+| Interface        | {{KeyboardEvent}}                                                                    |
			+| Sync / Async     | Sync                                                                                 |
			+| Bubbles          | Yes                                                                                  |
			+| Trusted Targets  | <code>Element</code>                                                                 |
			+| Cancelable       | Yes                                                                                  |
			+| Composed         | Yes                                                                                  |
			+| Default action   | Varies: EVENT{beforeinput} and EVENT{input} events; launch                           |
			 |                  | <a>text composition system</a>; EVENT{blur} and EVENT{focus} events; EVENT{keypress} |
			 |                  | event (if supported); <a>activation behavior</a>; other event                        |
			+| Context<br/>     | <ul>                                                                                 |
			 | (trusted events) | <li>{{Event}}.{{Event/target}} : focused element processing the key event or if no   |
			 |                  |     element focused, then the <a>body element</a> if available, otherwise the        |
			 |                  |     <a>root element</a></li>                                                         |
			 |                  | <li>{{UIEvent}}.{{UIEvent/view}} : <a><code>Window</code></a></li>                   |
			 |                  | <li>{{UIEvent}}.{{UIEvent/detail}} : <code>0</code></li>                             |
			 |                  | <li>{{KeyboardEvent}}.{{KeyboardEvent/key}} : the key value of the key pressed.</li> |
			 |                  | <li>{{KeyboardEvent}}.{{KeyboardEvent/code}} : the code value associated with the    |
			 |                  |     key's physical placement on the keyboard.</li>                                   |
			 |                  | <li>{{KeyboardEvent}}.{{KeyboardEvent/location}} : the location of the key on the    |
			 |                  |     device.</li>                                                                     |
			 |                  | <li>{{KeyboardEvent}}.{{KeyboardEvent/altKey}} : <code>true</code> if KEYCAP{Alt}    |
			 |                  |     modifier was active, otherwise <code>false</code></li>                           |
			 |                  | <li>{{KeyboardEvent}}.{{KeyboardEvent/shiftKey}} : <code>true</code> if KEYCAP{Shift}|
			 |                  |     modifier was active, otherwise <code>false</code></li>                           |
			 |                  | <li>{{KeyboardEvent}}.{{KeyboardEvent/ctrlKey}} : <code>true</code> if KEYCAP{Control}|
			 |                  |     modifier was active, otherwise <code>false</code></li>                           |
			 |                  | <li>{{KeyboardEvent}}.{{KeyboardEvent/metaKey}} : <code>true</code> if KEYCAP{Meta}  |
			 |                  |     modifier was active, otherwise <code>false</code></li>                           |
			 |                  | <li>{{KeyboardEvent}}.{{KeyboardEvent/repeat}} : <code>true</code> if a key has been |
			 |                  |     depressed long enough to trigger key repetition, otherwise <code>false</code></li>|
			 |                  | <li>{{KeyboardEvent}}.{{KeyboardEvent/isComposing}} : <code>true</code> if the key   |
			 |                  |     event occurs as part of a composition session, otherwise <code>false</code></li> |
			 |                  | </ul>                                                                                |
			++------------------+--------------------------------------------------------------------------------------+

			A <a>user agent</a> MUST dispatch this event when a key is pressed
			down. The EVENT{keydown} event type is device dependent and relies
			on the capabilities of the input devices and how they are mapped in
			the operating system. This event type MUST be generated after the
			<a>key mapping</a>. This event type MUST be dispatched before the
			EVENT{beforeinput}, EVENT{input}, and EVENT{keyup} events associated
			with the same key.

			The default action of the EVENT{keydown} event depends upon the key:

			*	If the key is associated with a character, the default action
				MUST be to dispatch a EVENT{beforeinput} event followed by an
				EVENT{input} event. In the case where the key which is
				associated with multiple characters (such as with a macro or
				certain sequences of dead keys), the default action MUST be to
				dispatch one set of EVENT{beforeinput} / EVENT{input} events for
				each character

			*	If the key is associated with a <a>text composition system</a>,
				the default action MUST be to launch that system

			*	If the key is the KEYCAP{Tab} key, the default action MUST be
				to shift the document focus from the currently focused element
				(if any) to the new focused element, as described in
				<a href="#events-focusevent">Focus Event Types</a>

			*	If the key is the KEYCAP{Enter} or KEYCAP{&nbsp;} (Space) key and the
				current focus is on a state-changing element, the default action
				MUST be to dispatch a EVENT{click} event, and a
				EVENT{DOMActivate} event if that event type is supported by the
				<a>user agent</a> (refer to [[#event-flow-activation]] for more
				details)

			If this event is canceled, the associated event types MUST NOT be
			dispatched, and the associated actions MUST NOT be performed.

			<p class="note">
			The EVENT{keydown} and EVENT{keyup} events are traditionally
			associated with detecting any key, not just those which produce a
			<a>character value</a>.
			</p>

		<h4 id="event-type-keyup"><dfn>keyup</dfn></h4>

			++------------------+--------------------------------------------------------------------------------------+ event-definition
			=| %                |                                                                                      |
			 +------------------+--------------------------------------------------------------------------------------+
			+| Type             | <strong><code>keyup</code></strong>                                                  |
			+| Interface        | {{KeyboardEvent}}                                                                    |
			+| Sync / Async     | Sync                                                                                 |
			+| Bubbles          | Yes                                                                                  |
			+| Trusted Targets  | <code>Element</code>                                                                 |
			+| Cancelable       | Yes                                                                                  |
			+| Composed         | Yes                                                                                  |
			+| Default action   | None                                                                                 |
			+| Context<br/>     | <ul>                                                                                 |
			 | (trusted events) | <li>{{Event}}.{{Event/target}} : focused element processing the key event or if no   |
			 |                  |     element focused, then the <a>body element</a> if available, otherwise the        |
			 |                  |     <a>root element</a></li>                                                         |
			 |                  | <li>{{UIEvent}}.{{UIEvent/view}} : <a><code>Window</code></a></li>                   |
			 |                  | <li>{{UIEvent}}.{{UIEvent/detail}} : <code>0</code></li>                             |
			 |                  | <li>{{KeyboardEvent}}.{{KeyboardEvent/key}} : the key value of the key pressed.</li> |
			 |                  | <li>{{KeyboardEvent}}.{{KeyboardEvent/code}} : the code value associated with the    |
			 |                  |     key's physical placement on the keyboard.</li>                                   |
			 |                  | <li>{{KeyboardEvent}}.{{KeyboardEvent/location}} : the location of the key on the    |
			 |                  |     device.</li>                                                                     |
			 |                  | <li>{{KeyboardEvent}}.{{KeyboardEvent/altKey}} : <code>true</code> if KEYCAP{Alt}    |
			 |                  |     modifier was active, otherwise <code>false</code></li>                           |
			 |                  | <li>{{KeyboardEvent}}.{{KeyboardEvent/shiftKey}} : <code>true</code> if KEYCAP{Shift}|
			 |                  |     modifier was active, otherwise <code>false</code></li>                           |
			 |                  | <li>{{KeyboardEvent}}.{{KeyboardEvent/ctrlKey}} : <code>true</code> if KEYCAP{Control}|
			 |                  |     modifier was active, otherwise <code>false</code></li>                           |
			 |                  | <li>{{KeyboardEvent}}.{{KeyboardEvent/metaKey}} : <code>true</code> if KEYCAP{Meta}  |
			 |                  |     modifier was active, otherwise <code>false</code></li>                           |
			 |                  | <li>{{KeyboardEvent}}.{{KeyboardEvent/repeat}} : <code>true</code> if a key has been |
			 |                  |     depressed long enough to trigger key repetition, otherwise <code>false</code></li>|
			 |                  | <li>{{KeyboardEvent}}.{{KeyboardEvent/isComposing}} : <code>true</code> if the key   |
			 |                  |     event occurs as part of a composition session, otherwise <code>false</code></li> |
			 |                  | </ul>                                                                                |
			++------------------+--------------------------------------------------------------------------------------+

			A <a>user agent</a> MUST dispatch this event when a key is released.
			The EVENT{keyup} event type is device dependent and relies on the
			capabilities of the input devices and how they are mapped in the
			operating system. This event type MUST be generated after the <a>key
			mapping</a>. This event type MUST be dispatched after the
			EVENT{keydown}, EVENT{beforeinput}, and EVENT{input} events
			associated with the same key.

			<p class="note">
			The EVENT{keydown} and EVENT{keyup} events are traditionally
			associated with detecting any key, not just those which produce a
			<a>character value</a>.
			</p>


<h2 id="keys">Keyboard events and key values</h2>

	This section contains necessary information regarding keyboard events:

	*	Explanation of keyboard layout, mapping, and key values.
	*	Relations between keys, such as <a>dead keys</a> or modifiers keys.
	*	Relations between keyboard events and their default actions.
	*	The set of <code>key</code> values, and guidelines on how to extend this set.

	<p class="note">
	This section uses Serbian and Kanji characters which could be misrepresented or
	unavailable in the PDF version or printed version of this specification.
	</p>

	<h3 id="keyboard-input">Keyboard Input</h3>

		<em>This section is non-normative</em>

		The relationship of each key to the complete keyboard has three separate
		aspects, each of which vary among different models and configurations of
		keyboards, particularly for locale-specific reasons:

		*	<strong>Mechanical layout:</strong> the dimensions, size, and placement
			of the physical keys on the keyboard
		*	<strong>Visual markings:</strong> the labels (or <em>legends</em>) that
			mark each key
		*	<strong>Functional mapping:</strong> the abstract key-value association
			of each key.

		This specification only defines the functional mapping, in terms of
		<a href="#keys-keyvalues"><code>key</code></a> values and
		<a href="#keys-codevalues"><code>code</code></a> values,
		but briefly describes <a href="#key-legends">key legends</a>
		for background.

		<h4 id="key-legends">Key Legends</h4>

			<em>This section is informative</em>

			The key legend is the visual marking that is printed or embossed on the
			<em>key cap</em> (the rectangular "cap" that covers the mechanical
			switch for the key). These markings normally consist of one or more
			characters that a keystroke on that key will produce (such as GLYPH{G},
			GLYPH{8}, or GLYPH{ш}), or names or symbols which indicate that key's
			function (such as an upward-pointing arrow GLYPH{&#x21E7;} indicating
			KEYCAP{Shift}, or the string <code>"Enter"</code>). Keys are often
			referred to by this marking (e.g., <q>Press the <code>"Shift"</code> and
			<code>"G"</code> keys.</q>). Note, however, that the visual appearance
			of the key has no bearing on its digital representation, and in many
			configurations may be completely inaccurate. Even the control and
			function keys, such as KEYCAP{Enter}, may be mapped to different
			functionality, or even mapped as character keys.

			<p class="note">
			Many keyboards contain keys that do not normally produce any characters,
			even though the symbol might have a Unicode equivalent. For example, the
			KEYCAP{Shift} key might bear the symbol GLYPH{&#x21E7;}, which has the
			Unicode code point UNI{U+21E7}, but
			pressing the KEYCAP{Shift} key will not produce this character value,
			and there is no Unicode code point for KEYCAP{Shift}.
			</p>

	<h3 id="keys-codevalues">Key codes</h3>

		A key {{KeyboardEvent/code}} is an attribute of a keyboard event that can be
		used to identify the physical key associated with the keyboard event. It is
		similar to USB Usage IDs in that it provides a low-level value (similar to a
		scancode) that is vendor-neutral.

		The primary purpose of the {{KeyboardEvent/code}} attribute is to provide a
		consistent and coherent way to identify keys based on their physical
		location. In addition, it also provides a stable name (unaffected by the
		current keyboard state) that uniquely identifies each key on the keyboard.

		The list of valid {{KeyboardEvent/code}} values is defined in the
		[[!UIEvents-Code]].

		<h4 id="code-motivation">Motivation for the {{KeyboardEvent/code}} Attribute</h4>

			The standard PC keyboard has a set of keys (which we refer to as
			<em>writing system keys</em>) that generate different
			{{KeyboardEvent/key}} values based on the current keyboard layout
			selected by the user. This situation makes it difficult to write code
			that detects keys based on their physical location since the code would
			need to know which layout is in effect in order to know which
			{{KeyboardEvent/key}} values to check for. A real-world example of this
			is a game that wants to use the GLYPH{W}, GLYPH{A}, GLYPH{S} and
			GLYPH{D} keys to control player movement. The {{KeyboardEvent/code}}
			attribute solves this problem by providing a stable value to check that
			is <em>not affected by the current keyboard layout</em>.

			In addition, the values in the {{KeyboardEvent/key}} attribute depend as
			well on the current keyboard state. Because of this, the order in which
			keys are pressed and released in relation to modifier keys can affect
			the values stored in the {{KeyboardEvent/key}} attribute. The
			{{KeyboardEvent/code}} attribute solves this problem by providing a
			stable value that is <em>not affected by the current keyboard state</em>.

		<h4 id="relationship-between-key-code">The Relationship Between {{KeyboardEvent/key}} and {{KeyboardEvent/code}}</h4>

			<dl>
				<dt>{{KeyboardEvent/key}}</dt>
				<dd>The {{KeyboardEvent/key}} attribute is intended for users who
					are interested in the meaning of the key being pressed, taking
					into account the current keyboard layout (and IME;
					<a href="#keys-dead">dead keys</a> are given a unique
					{{KeyboardEvent/key}} value). Example use case: Detecting
					modified keys or bare modifier keys (e.g., to perform an action
					in response to a keyboard shortcut).
				</dd>

				<dt>{{KeyboardEvent/code}}</dt>
				<dd>The {{KeyboardEvent/code}} attribute is intended for users who
					are interested in the key that was pressed by the user, without
					any layout modifications applied. Example use case: Detecting
					WASD keys (e.g., for movement controls in a game) or trapping
					all keys (e.g., in a remote desktop client to send all keys to
					the remote host).
				</dd>
			</dl>

		<h4 id="code-examples"><code>code</code> Examples</h4>

			<div class="example">
				Handling the Left and Right Alt Keys

				++----------+----------------------+----------------------+------------------------------------------+
				=| Keyboard |{{KeyboardEvent}}<br/>|{{KeyboardEvent}}<br/>| Notes                                    |
				 |  Layout  |{{KeyboardEvent/key}} |{{KeyboardEvent/code}}|                                          |
				 +----------+----------o-----------+----------o-----------+------------------------------------------+
				+| US       | KEY{Alt}             | CODE{AltLeft}        | {{KeyboardEvent/DOM_KEY_LOCATION_LEFT}}  |
				+| French   | KEY{Alt}             | CODE{AltLeft}        | {{KeyboardEvent/DOM_KEY_LOCATION_LEFT}}  |
				+| US       | KEY{Alt}             | CODE{AltRight}       | {{KeyboardEvent/DOM_KEY_LOCATION_RIGHT}} |
				+| French   | KEY{AltGraph}        | CODE{AltRight}       | {{KeyboardEvent/DOM_KEY_LOCATION_RIGHT}} |
				++----------+----------------------+----------------------+------------------------------------------+

				In this example, checking the {{KeyboardEvent/key}} attribute permits
				matching KEYCAP{Alt} without worrying about which Alt key (left or
				right) was pressed. Checking the {{KeyboardEvent/code}} attribute
				permits matching the right Alt key (CODE{AltRight}) without worrying
				about which layout is currently in effect.

				Note that, in the French example, the KEYCAP{Alt} and KEYCAP{AltGraph} keys
				retain their left and right location, even though there is only one of
				each key.
			</div>  <!-- Handling Left and Right Alt Keys -->

			<div class="example">
				Handling the Single Quote Key

				++----------+----------------------+----------------------+--------+
				=| Keyboard |{{KeyboardEvent}}<br/>|{{KeyboardEvent}}<br/>| Notes  |
				 |  Layout  |{{KeyboardEvent/key}} |{{KeyboardEvent/code}}|        |
				 +----------+----------o-----------+-----------o----------+--------+
				+| US       | KEY_NOLINK{'}        | CODE{Quote}          |        |
				+| Japanese | KEY_NOLINK{:}        | CODE{Quote}          |        |
				+| US Intl  | KEY{Dead}            | CODE{Quote}          |        |
				++----------+----------------------+----------------------+--------+

				This example shows how dead key values are encoded in the
				attributes. The {{KeyboardEvent/key}} values vary based on the
				current locale, whereas the {{KeyboardEvent/code}} attribute returns
				a consistent value.
			</div><!-- Handling the Single Quote Key -->

			<div class="example" id="example-key-2">
				Handling the GLYPH{2} Key (with and without Shift pressed) on
				various keyboard layouts.

				++----------+----------------------+----------------------+----------------------------+
				=| Keyboard |{{KeyboardEvent}}<br/>|{{KeyboardEvent}}<br/>| Notes                      |
				 |  Layout  |{{KeyboardEvent/key}} |{{KeyboardEvent/code}}|                            |
				 +----------+----------o-----------+----------o-----------+----------------------------+
				+| US       | KEY_NOLINK{2}        | CODE{Digit2}         |                            |
				+| US       | KEY_NOLINK{@}        | CODE{Digit2}         | {{KeyboardEvent/shiftKey}} |
				+| UK       | KEY_NOLINK{2}        | CODE{Digit2}         |                            |
				+| UK       | KEY_NOLINK{"}        | CODE{Digit2}         | {{KeyboardEvent/shiftKey}} |
				+| French   | KEY_NOLINK{é}        | CODE{Digit2}         |                            |
				+| French   | KEY_NOLINK{2}        | CODE{Digit2}         | {{KeyboardEvent/shiftKey}} |
				++----------+----------------------+----------------------+----------------------------+

				Regardless of the current locale or the modifier key state, pressing
				the key labelled GLYPH{2} on a US keyboard always results in
				CODE{Digit2} in the {{KeyboardEvent/code}} attribute.

			</div><!-- Handling the 2 Key -->

			<div class="example" id="example-key-shift-2">
				Sequence of Keyboard Events : KEYCAP{Shift} and KEYCAP{2}


				Compare the attribute values in the following two key event
				sequences. They both produce the GLYPH{@} character on a US
				keyboard, but differ in the order in which the keys are released. In
				the first sequence, the order is: KEYCAP{Shift} (down), KEYCAP{2}
				(down), KEYCAP{2} (up), KEYCAP{Shift} (up).

				++---+----------+----------------------+----------------------+-----------------------------------------+
				=| # | Event    |{{KeyboardEvent}}<br/>|{{KeyboardEvent}}<br/>| Notes                                   |
				 |   | Type     |{{KeyboardEvent/key}} |{{KeyboardEvent/code}}|                                         |
				 +---+----------+----------o-----------+----------o-----------+-----------------------------------------+
				+| 1 | keydown  | KEY{Shift}           | CODE{ShiftLeft}      | {{KeyboardEvent/DOM_KEY_LOCATION_LEFT}} |
				+| 2 | keydown  | KEY_NOLINK{@}        | CODE{Digit2}         | {{KeyboardEvent/shiftKey}}              |
				+| 3 | keypress | KEY_NOLINK{@}        | CODE{Digit2}         | (if supported)                          |
				+| 4 | keyup    | KEY_NOLINK{@}        | CODE{Digit2}         | {{KeyboardEvent/shiftKey}}              |
				+| 5 | keyup    | KEY{Shift}           | CODE{ShiftLeft}      | {{KeyboardEvent/DOM_KEY_LOCATION_LEFT}} |
				++---+----------+----------------------+----------------------+-----------------------------------------+

				In the second sequence, the Shift is released before the 2,
				resulting in the following event order: KEYCAP{Shift} (down),
				KEYCAP{2} (down), KEYCAP{Shift} (up), KEYCAP{2} (up).

				++---+----------+----------------------+----------------------+-----------------------------------------+
				=| # | Event    |{{KeyboardEvent}}<br/>|{{KeyboardEvent}}<br/>| Notes                                   |
				 |   | Type     |{{KeyboardEvent/key}} |{{KeyboardEvent/code}}|                                         |
				 +---+----------+----------o-----------+----------o-----------+-----------------------------------------+
				+| 1 | keydown  | KEY{Shift}           | CODE{ShiftLeft}      | {{KeyboardEvent/DOM_KEY_LOCATION_LEFT}} |
				+| 2 | keydown  | KEY_NOLINK{@}        | CODE{Digit2}         | {{KeyboardEvent/shiftKey}}              |
				+| 3 | keypress | KEY_NOLINK{@}        | CODE{Digit2}         | (if supported)                          |
				+| 4 | keyup    | KEY{Shift}           | CODE{ShiftLeft}      | {{KeyboardEvent/DOM_KEY_LOCATION_LEFT}} |
				+| 5 | keyup    | KEY_NOLINK{2}        | CODE{Digit2}         |                                         |
				++---+----------+----------------------+----------------------+-----------------------------------------+

				Note that the values contained in the {{KeyboardEvent/key}}
				attribute does not match between the keydown and keyup events for
				the GLYPH{2} key. The {{KeyboardEvent/code}} attribute provides a
				consistent value that is not affected by the current modifier state.

			</div><!-- Sequence of Keyboard Events: Shift and 2 -->

		<h4 id="code-virtual-keyboards">{{KeyboardEvent/code}} and Virtual Keyboards</h4>

			The usefulness of the {{KeyboardEvent/code}} attribute is less obvious
			for virtual keyboards (and also for remote controls and chording
			keyboards). In general, if a virtual (or remote control) keyboard is
			mimicking the layout and functionality of a standard keyboard, then it
			MUST also set the {{KeyboardEvent/code}} attribute as appropriate. For
			keyboards which are not mimicking the layout of a standard keyboard,
			then the {{KeyboardEvent/code}} attribute MAY be set to the closest
			match on a standard keyboard or it MAY be left undefined.

			For virtual keyboards with keys that produce different values based on
			some modifier state, the {{KeyboardEvent/code}} value should be the
			{{KeyboardEvent/key}} value generated when the button is pressed while
			the device is in its factory-reset state.

	<h3 id="keys-keyvalues">Keyboard Event <code>key</code> Values</h3>

		A key value is a <code>DOMString</code> that can be used to indicate any
		given key on a keyboard, regardless of position or state, by the value it
		produces.  These key values MAY be used as return values for keyboard events
		generated by the implementation, or as input values by the content author to
		specify desired input (such as for keyboard shortcuts).

		The list of valid <code>key</code> values is defined in [[!UIEvents-Key]].

		Key values can be used to detect the value of a key which has been pressed,
		using the {{KeyboardEvent/key}} attribute.  Content authors can retrieve the
		<a>character value</a> of upper- or lower-case letters, number, symbols, or
		other character-producing keys, and also the <a>key value</a> of control
		keys, modifier keys, function keys, or other keys that do not generate
		characters. These values can be used for monitoring particular input
		strings, for detecting and acting on modifier key input in combination with
		other inputs (such as a mouse), for creating virtual keyboards, or for any
		number of other purposes.

		Key values can also be used by content authors in string comparisons, as
		values for markup attributes (such as the HTML <code>accesskey</code>) in
		conforming <a>host languages</a>, or for other related purposes.   A
		conforming <a>host language</a> SHOULD allow content authors to use either
		of the two equivalent string values for a key value: the <a>character
		value</a>, or the <a>key value</a>.

		<p class="note">
		While implementations will use the most relevant value for a key
		independently of the platform or keyboard layout mappings, content authors
		can not make assumptions on the ability of keyboard devices to generate
		them.  When using keyboard events and key values for shortcut-key
		combinations, content authors can <q>consider using numbers and function
		keys (KEYCAP{F4}, KEYCAP{F5}, and so on) instead of letters</q> ([[DWW95]])
		given that most keyboard layouts will provide keys for those.
		</p>

		A key value does not indicate a specific key on the physical keyboard, nor
		does it reflect the character printed on the key. A key value indicates the
		current value of the event with consideration to the current state of all
		active keys and key input modes (including shift modes), as reflected in the
		operating-system mapping of the keyboard and reported to the implementation.
		In other words, the key value for the key labeled KEYCAP{O} on a
		<a>QWERTY</a> keyboard has the key value KEY_NOLINK{o} in an unshifted state and
		KEY_NOLINK{O} in a shifted state. Because a user can map their keyboard to an
		arbitrary custom configuration, the content author is encouraged not to
		assume that a relationship exists between the shifted and unshifted states
		of a key and the majuscule form (uppercase or capital letters) and minuscule
		form (lowercase or small letters) of a character representation, but is
		encouraged instead to use the value of the {{KeyboardEvent/key}} attribute.
		For example, the Standard "102" Keyboard layout depicted in [[UIEvents-Code]]
		illustrates one possible set of <a>key mappings</a> on one possible keyboard
		layout. Many others exist, both standard and idiosyncratic.

		<p class="note">
		To simplify <a>dead key</a> support, when the operating-system mapping of
		the keyboard is handling a <a>dead key</a> state, the current state of the
		dead key sequence is not reported via the {{KeyboardEvent/key}} attribute.
		Rather, a key value of KEY{Dead} is reported. Instead, implementations
		generate <a href="#events-compositionevents">composition events</a> which
		contain the intermediate state of the dead key sequence reported via the
		{{CompositionEvent/data}} attribute. As in the previous example, the key
		value for the key marked KEYCAP{O} on a <a>QWERTY</a> keyboard has a
		{{CompositionEvent/data}} value of <code class="char">"&#xF6;"</code> in an
		unshifted state during a dead-key operation to add an umlaut diacritic, and
		<code class="char">"&#xD6;"</code> in a shifted state during a dead-key
		operation to add an umlaut diacritic.
		</p>

		It is also important to note that there is not a one-to-one relationship
		between key event states and key values.  A particular key value might be
		associated with multiple keys. For example, many standard keyboards contain
		more than one key with the KEYCAP{Shift} key value (normally distinguished
		by the {{KeyboardEvent/location}} values
		{{KeyboardEvent/DOM_KEY_LOCATION_LEFT}} and
		{{KeyboardEvent/DOM_KEY_LOCATION_RIGHT}}) or KEYCAP{8} key value (normally
		distinguished by the {{KeyboardEvent/location}} values
		{{KeyboardEvent/DOM_KEY_LOCATION_STANDARD}} and
		{{KeyboardEvent/DOM_KEY_LOCATION_NUMPAD}}), and user-configured custom
		keyboard layouts MAY duplicate any key value in multiple key-state scenarios
		(note that {{KeyboardEvent/location}} is intended for standard keyboard
		layouts, and cannot always indicate a meaningful distinction).

		Finally, the meaning of any given character representation is
		context-dependent and complex.  For example, in some contexts, the asterisk
		(star) glyph (GLYPH{*}) represents a footnote or
		emphasis (when bracketing a passage of text). However, in some documents or
		executable programs it is equivalent to the mathematical multiplication
		operation, while in other documents or executable programs, that function is
		reserved for the multiplication symbol (GLYPH{&#xD7;}, Unicode value
		UNI{U+00D7}) or the Latin small letter <code>"x"</code>
		(due to the lack of a multiplication key on many keyboards and the
		superficial resemblance of the glyphs GLYPH{&#xD7;} and GLYPH{x}).  Thus,
		the semantic meaning or function of character representations is outside the
		scope of this specification.

		<h4 id="keys-modifiers">Modifier keys</h4>

			Keyboard input uses modifier keys to change the normal behavior of a
			key. Like other keys, modifier keys generate EVENT{keydown} and
			EVENT{keyup} events, as shown in the example below. Some modifiers are
			activated while the key is being pressed down or maintained pressed such
			as KEYCAP{Alt}, KEYCAP{Control}, KEYCAP{Shift}, KEYCAP{AltGraph}, or
			KEYCAP{Meta}. Other modifiers are activated depending on their state
			such as KEYCAP{CapsLock}, KEYCAP{NumLock}, or KEYCAP{ScrollLock}. Change
			in the state happens when the modifier key is being pressed down. The
			{{KeyboardEvent}} interface provides convenient attributes for some
			common modifiers keys: {{KeyboardEvent/ctrlKey}},
			{{KeyboardEvent/shiftKey}}, {{KeyboardEvent/altKey}},
			{{KeyboardEvent/metaKey}}. Some operating systems simulate the
			KEYCAP{AltGraph} modifier key with the combination of the KEYCAP{Alt}
			and KEYCAP{Control} modifier keys. Implementations are encouraged to use
			the KEYCAP{AltGraph} modifier key.

			<div class="example">
				This example describes a possible sequence of events
				associated with the generation of the Unicode character Q (Latin
				Capital Letter Q, Unicode code point UNI{U+0051}) on a US
				keyboard using a US mapping:

				++---+-------------+----------------------+----------------------------+------------------------+
				=| # | Event Type  |{{KeyboardEvent}}<br/>| Modifiers                  | Notes                  |
				 |   |             |{{KeyboardEvent/key}} |                            |                        |
				 +---+-------------+----------o-----------+-------------o--------------+------------------------+
				+| 1 | keydown     | KEY{Shift}           | {{KeyboardEvent/shiftKey}} |                        |
				+| 2 | keydown     | KEY_NOLINK{Q}        | {{KeyboardEvent/shiftKey}} | Latin Capital Letter Q |
				+| 3 | beforeinput |                      |                            |                        |
				+| 4 | input       |                      |                            |                        |
				+| 5 | keyup       | KEY_NOLINK{Q}        | {{KeyboardEvent/shiftKey}} |                        |
				+| 6 | keyup       | KEY{Shift}           |                            |                        |
				++---+-------------+----------------------+----------------------------+------------------------+
			</div>

			<div class="example">
				Th example describes an alternate sequence of keys to the
				example above, where the KEYCAP{Shift} key is released before the
				KEYCAP{Q} key.  The key value for the KEYCAP{Q} key will revert to its
				unshifted value for the EVENT{keyup} event:

				++---+-------------+----------------------+----------------------------+------------------------+
				=| # | Event Type  |{{KeyboardEvent}}<br/>| Modifiers                  | Notes                  |
				 |   |             |{{KeyboardEvent/key}} |                            |                        |
				 +---+-------------+----------o-----------+-------------o--------------+------------------------+
				+| 1 | keydown     | KEY{Shift}           | {{KeyboardEvent/shiftKey}} |                        |
				+| 2 | keydown     | KEY_NOLINK{Q}        | {{KeyboardEvent/shiftKey}} | Latin Capital Letter Q |
				+| 3 | beforeinput |                      |                            |                        |
				+| 4 | input       |                      |                            |                        |
				+| 5 | keyup       | KEY{Shift}           |                            |                        |
				+| 6 | keyup       | KEY_NOLINK{q}        |                            | Latin Small Letter Q   |
				++---+-------------+----------------------+----------------------------+------------------------+
			</div>

			<div class="example">
				The following example describes a possible sequence of keys that
				does not generate a Unicode character (using the same configuration
				as the previous example):

				++---+-------------+----------------------+----------------------------+----------------------------+
				=| # | Event Type  |{{KeyboardEvent}}<br/>| Modifiers                  | Notes                      |
				 |   |             |{{KeyboardEvent/key}} |                            |                            |
				 +---+-------------+----------o-----------+-------------o--------------+----------------------------+
				+| 1 | keydown     | KEY{Control}         | {{KeyboardEvent/ctrlKey}}  |                            |
				+| 2 | keydown     | KEY_NOLINK{v}        | {{KeyboardEvent/ctrlKey}}  | Latin Small Letter V       |
				+|   |             |                      |                            | <em>No EVENT{beforeinput}  |
				 |   |             |                      |                            | or EVENT{input} events are |
				 |   |             |                      |                            | generated.</em>            |
				+| 3 | keyup       | KEY_NOLINK{v}        | {{KeyboardEvent/ctrlKey}}  | Latin Small Letter V       |
				+| 4 | keyup       | KEY{Control}         |                            |                            |
				++---+-------------+----------------------+----------------------------+----------------------------+
			</div>

			<div class="example">
				The following example shows the sequence of events when both KEYCAP{Shift} and
				KEYCAP{Control} are pressed:

				++---+-------------+----------------------+----------------------------+----------------------------+
				=| # | Event Type  |{{KeyboardEvent}}<br/>| Modifiers                  | Notes                      |
				 |   |             |{{KeyboardEvent/key}} |                            |                            |
				 +---+-------------+----------o-----------+-------------o--------------+----------------------------+
				+| 1 | keydown     | KEY{Control}         | {{KeyboardEvent/ctrlKey}}  |                            |
				+| 2 | keydown     | KEY{Shift}           | {{KeyboardEvent/ctrlKey}}, |                            |
				 |   |             |                      | {{KeyboardEvent/shiftKey}} |                            |
				+| 3 | keydown     | KEY_NOLINK{V}        | {{KeyboardEvent/ctrlKey}}, | Latin Capital Letter V     |
				 |   |             |                      | {{KeyboardEvent/shiftKey}} |                            |
				+|   |             |                      |                            | <em>No EVENT{beforeinput}  |
				 |   |             |                      |                            | or EVENT{input} events are |
				 |   |             |                      |                            | generated.</em>            |
				+| 4 | keyup       | KEY_NOLINK{V}        | {{KeyboardEvent/ctrlKey}}, | Latin Capital Letter V     |
				 |   |             |                      | {{KeyboardEvent/shiftKey}} |                            |
				+| 5 | keyup       | KEY{Shift}           | {{KeyboardEvent/ctrlKey}}  |                            |
				+| 6 | keyup       | KEY{Control}         |                            |                            |
				++---+-------------+----------------------+----------------------------+----------------------------+
			</div>

			<div class="example">
				For non-US keyboard layouts, the sequence of events is the same, but
				the value of the key is based on the current keyboard layout. This
				example shows a sequence of events when an Arabic keyboard layout is
				used:

				++---+-------------+----------------------+----------------------------+----------------------------+
				=| # | Event Type  |{{KeyboardEvent}}<br/>| Modifiers                  | Notes                      |
				 |   |             |{{KeyboardEvent/key}} |                            |                            |
				 +---+-------------+----------o-----------+-------------o--------------+----------------------------+
				+| 1 | keydown     | KEY{Control}         | {{KeyboardEvent/ctrlKey}}  |                            |
				+| 2 | keydown     | KEY_NOLINK{ر}        | {{KeyboardEvent/ctrlKey}}  | Arabic Letter Reh          |
				+|   |             |                      |                            | <em>No EVENT{beforeinput}  |
				 |   |             |                      |                            | or EVENT{input} events are |
				 |   |             |                      |                            | generated.</em>            |
				+| 3 | keyup       | KEY_NOLINK{ر}        | {{KeyboardEvent/ctrlKey}}  | Arabic Letter Reh          |
				+| 4 | keyup       | KEY{Control}         |                            |                            |
				++---+-------------+----------------------+----------------------------+----------------------------+
			</div>

			<p class="note">
			The value in the EVENT{keydown} and EVENT{keyup} events varies based on
			the current keyboard layout in effect when the key is pressed. This
			means that the KEYCAP{v} key on a US layout and the KEYCAP{ر} key on an
			Arabic layout will generate different events even though they are the
			same physical key. To identify these events as coming from the same
			physical key, you will need to make use of the {{KeyboardEvent/code}}
			attribute.
			</p>

			In some cases, <a>modifier keys</a> change the {{KeyboardEvent/key}}
			value for a key event. For example, on some MacOS keyboards, the  key
			labeled "delete" functions the same as the KEYCAP{Backspace} key on the
			Windows OS when unmodified, but when modified by the KEYCAP{Fn} key,
			acts as the KEYCAP{Delete} key, and the value of {{KeyboardEvent/key}}
			will match the most appropriate function of the key in its current
			modified state.

		<h4 id="keys-dead">Dead keys</h4>

			Some keyboard input uses <a>dead keys</a> for the input of composed
			character sequences. Unlike the handwriting sequence, in which users
			enter the base character first, keyboard input requires to enter a
			special state when a <a>dead key</a> is pressed and emit the
			character(s) only when one of a limited number of <q>legal</q> base
			character is entered.

			<p class="note">
			The MacOS and Linux operating systems use input methods to process
			<a>dead keys</a>.
			</p>

			The <a>dead keys</a> (across all keyboard layouts and mappings) are
			represented by the key value KEYCAP{Dead}. In response to any dead key
			press, <a href="#events-compositionevents"> composition events</a> must
			be dispatched by the user agent and the EVENT{compositionupdate} event's
			{{CompositionEvent/data}} value must be the character value of the
			current state of the dead key combining sequence.

			While Unicode combining characters always follow the handwriting
			sequence, with the combining character trailing the corresponding
			letter, typical dead key input MAY reverse the sequence, with the
			combining character before the corresponding letter. For example, the
			word <em>naïve</em>, using the combining diacritic <em>¨</em>, would be
			represented sequentially in Unicode as <em>nai¨ve</em>, but MAY be typed
			<em>na¨ive</em>. The sequence of keystrokes UNI{U+0302} (Combining
			Circumflex Accent key) and UNI{U+0065} (key marked with the Latin Small
			Letter E) will likely produce (on a French keyboard using a french
			mapping and without any modifier activated) the Unicode character
			GLYPH{&#xEA;} (Latin Small Letter E With Circumflex), as preferred by
			the Unicode Normalization Form <em>NFC</em>.

			<div class="example">
			++---+-------------------+----------------------+-----------------------------+-------------------------+----------------------+
			=| # | Event Type        |{{KeyboardEvent}}<br/>|{{KeyboardEvent}}<br/>       |{{CompositionEvent}}<br/>| Notes                |
			 |   |                   |{{KeyboardEvent/key}} |{{KeyboardEvent/isComposing}}|{{CompositionEvent/data}}|                      |
			 +---+-------------------+----------o-----------+-------------o---------------+------------o------------+----------------------+
			+| 1 | keydown           | KEY{Dead}            | <code>false</code>          |                         | Combining Circumflex |
			 |   |                   |                      |                             |                         | Accent (Dead Key)    |
			+| 2 | compositionstart  |                      |                             | <code>""</code>         |                      |
			+| 3 | compositionupdate |                      |                             | UNI{U+0302}             |                      |
			+| 4 | keyup             | KEY{Dead}            | <code>true</code>           |                         |                      |
			+| 5 | keydown           | KEY_NOLINK{ê}        | <code>true</code>           |                         |                      |
			+| 6 | compositionupdate |                      |                             | GLYPH{ê}                |                      |
			+| 7 | compositionend    |                      |                             | GLYPH{ê}                |                      |
			+| 8 | keyup             | KEY_NOLINK{e}        | <code>false</code>          |                         | Latin Small Letter E |
			++---+-------------------+----------------------+-----------------------------+-------------------------+----------------------+
			</div>

			<p class="note">
			In the second EVENT{keydown} event (step 5), the key value (assuming the
			event is not suppressed) will <em>not</em> be KEY_NOLINK{e} (Latin Small
			Letter E key) under normal circumstances because the value delivered to
			the user agent will already be modified by the dead key operation.
			</p>

			This process might be aborted when a user types an unsupported base
			character (that is, a base character for which the active
			diacritical mark is not available) after pressing a <a>dead key</a>:

			<div class="example">
			++---+-------------------+----------------------+-----------------------------+-------------------------+----------------------+
			=| # | Event Type        |{{KeyboardEvent}}<br/>|{{KeyboardEvent}}<br/>       |{{CompositionEvent}}<br/>| Notes                |
			 |   |                   |{{KeyboardEvent/key}} |{{KeyboardEvent/isComposing}}|{{CompositionEvent/data}}|                      |
			 +---+-------------------+----------o-----------+--------------o--------------+------------o------------+----------------------+
			+| 1 | keydown           | KEY{Dead}            | <code>false</code>          |                         | Combining Circumflex |
			 |   |                   |                      |                             |                         | Accent (Dead Key)    |
			+| 2 | compositionstart  |                      |                             | <code>""</code>         |                      |
			+| 3 | compositionupdate |                      |                             | UNI{U+0302}             |                      |
			+| 4 | keyup             | KEY{Dead}            | <code>true</code>           |                         |                      |
			+| 5 | keydown           | KEY_NOLINK{q}        | <code>true</code>           |                         | Latin Small Letter Q |
			+| 6 | compositionupdate |                      |                             | <code>""</code>         |                      |
			+| 7 | compositionend    |                      |                             | <code>""</code>         |                      |
			+| 8 | keyup             | KEY_NOLINK{q}        | <code>false</code>          |                         |                      |
			++---+-------------------+----------------------+-----------------------------+-------------------------+----------------------+
			</div>

		<h4 id="keys-IME">Input Method Editors</h4>

			This specification includes a model for <a>input method editors</a>
			(IMEs), through the {{CompositionEvent}} interface and events.
			However, Composition Events and Keyboard Events do not necessarily map
			as a one-to-one relationship.  As an example, receiving a EVENT{keydown}
			for the KEYCAP{Accept} key value does not necessarily imply that the
			text currently selected in the <a>IME</a> is being accepted, but
			indicates only that a keystroke happened, disconnected from the
			<a>IME</a> Accept functionality (which would normally result in a
			EVENT{compositionend} event in most <a>IME</a> systems).  Keyboard
			events cannot be used to determine the current state of the input method
			editor, which can be obtained through the {{CompositionEvent/data}}
			attribute of the {{CompositionEvent}} interface.  Additionally,
			<a>IME</a> systems and devices vary in their functionality, and in which
			keys are used for activating that functionality, such that the
			KEYCAP{Convert} and KEYCAP{Accept} keys MAY be represented by other
			available keys. Keyboard events correspond to the events generated by
			the input device after the keyboard layout mapping.

			<p class="note">
			In some implementations or system configurations, some key events, or
			their values, might be suppressed by the <a>IME</a> in use.
			</p>

			The following example describes a possible sequence of keys to generate
			the Unicode character GLYPH{&#x5E02;} (Kanji character, part of CJK
			Unified Ideographs) using Japanese input methods. This example assumes
			that the input method editor is activated and in the Japanese-Romaji
			input mode. The keys KEYCAP{Convert} and KEYCAP{Accept} MAY be replaced
			by others depending on the input device in use and the configuration of
			the IME, e.g., it can be respectively UNI{U+0020} (Space key) and
			KEYCAP{Enter}.

			<p class="note">
			GLYPH{&#x8A69;} (<q>poem</q>) and GLYPH{&#x5E02;} (<q>city</q>) are
			homophones, both pronounced &#x3057; (<q>shi</q>/<q>si</q>), so the user
			needs to use the KEYCAP{Convert} key to select the proper option.
			</p>

			<div class="example">
			++----+-------------------+----------------------+-----------------------------+-------------------------+----------------------+
			=| #  | Event Type        |{{KeyboardEvent}}<br/>|{{KeyboardEvent}}<br/>       |{{CompositionEvent}}<br/>| Notes                |
			 |    |                   |{{KeyboardEvent/key}} |{{KeyboardEvent/isComposing}}|{{CompositionEvent/data}}|                      |
			 +----+-------------------+----------o-----------+--------------o--------------+------------o------------+----------------------+
			+|  1 | keydown           | KEY_NOLINK{s}        | <code>false</code>          |                         | Latin Small Letter S |
			+|  2 | compositionstart  |                      |                             | GLYPH{}                 |                      |
			+|  3 | beforeinput       |                      |                             |                         |                      |
			+|  4 | compositionupdate |                      |                             | GLYPH{s}                |                      |
			+|    |                   |                      |                             |                         | DOM is updated       |
			+|  5 | input             |                      |                             |                         |                      |
			+|  6 | keyup             | KEY_NOLINK{s}        | <code>true</code>           |                         |                      |
			+|  7 | keydown           | KEY_NOLINK{i}        | <code>true</code>           |                         | Latin Small Letter I |
			+|  8 | beforeinput       |                      |                             |                         |                      |
			+|  9 | compositionupdate |                      |                             | GLYPH{&#x3057;}         | <em>shi</em>         |
			+|    |                   |                      |                             |                         | DOM is updated       |
			+| 10 | input             |                      |                             |                         |                      |
			+| 11 | keyup             | KEY_NOLINK{i}        | <code>true</code>           |                         |                      |
			+| 12 | keydown           | KEY{Convert}         | <code>true</code>           |                         | Convert              |
			+| 13 | beforeinput       |                      |                             |                         |                      |
			+| 14 | compositionupdate |                      |                             | GLYPH{&#x8A69;}         | "poem"               |
			+|    |                   |                      |                             |                         | DOM is updated       |
			+| 15 | input             |                      |                             |                         |                      |
			+| 16 | keyup             | KEY{Convert}         | <code>true</code>           |                         |                      |
			+| 17 | keydown           | KEY{Convert}         | <code>true</code>           |                         | Convert              |
			+| 18 | beforeinput       |                      |                             |                         |                      |
			+| 19 | compositionupdate |                      |                             | GLYPH{&#x5E02;}         | "city"               |
			+|    |                   |                      |                             |                         | DOM is updated       |
			+| 20 | input             |                      |                             |                         |                      |
			+| 21 | keyup             | KEY{Convert}         | <code>true</code>           |                         |                      |
			+| 22 | keydown           | KEY{Accept}          | <code>true</code>           |                         | Accept               |
			+| 23 | compositionend    |                      |                             | GLYPH{&#x5E02;}         |                      |
			+| 24 | keyup             | KEY{Accept}          | <code>false</code>          |                         |                      |
			++----+-------------------+----------------------+-----------------------------+-------------------------+----------------------+
			</div>

			IME composition can also be canceled as in the following example, with
			conditions identical to the previous example. The key KEYCAP{Cancel}
			might also be replaced by others depending on the input device in use
			and the configuration of the IME, e.g., it could be UNI{U+001B} (Escape
			key).

			<div class="example">
			++----+-------------------+----------------------+-----------------------------+-------------------------+----------------------+
			=| #  | Event Type        |{{KeyboardEvent}}<br/>|{{KeyboardEvent}}<br/>       |{{CompositionEvent}}<br/>| Notes                |
			 |    |                   |{{KeyboardEvent/key}} |{{KeyboardEvent/isComposing}}|{{CompositionEvent/data}}|                      |
			 +----+-------------------+----------o-----------+--------------o--------------+------------o------------+----------------------+
			+|  1 | keydown           | KEY_NOLINK{s}        | <code>false</code>          |                         | Latin Small Letter S |
			+|  2 | compositionstart  |                      |                             | GLYPH{}                 |                      |
			+|  3 | compositionupdate |                      |                             | GLYPH{s}                |                      |
			+|  4 | keyup             | KEY_NOLINK{s}        | <code>true</code>           |                         |                      |
			+|  5 | keydown           | KEY_NOLINK{i}        | <code>true</code>           |                         | Latin Small Letter I |
			+|  6 | compositionupdate |                      |                             | GLYPH{&#x3057;}         | <em>shi</em>         |
			+|  7 | keyup             | KEY_NOLINK{i}        | <code>true</code>           |                         |                      |
			+|  8 | keydown           | KEY{Convert}         | <code>true</code>           |                         | Convert              |
			+|  9 | compositionupdate |                      |                             | GLYPH{&#x8A69;}         | "poem"               |
			+| 10 | keyup             | KEY{Convert}         | <code>true</code>           |                         |                      |
			+| 11 | keydown           | KEY{Convert}         | <code>true</code>           |                         | Convert              |
			+| 12 | compositionupdate |                      |                             | GLYPH{&#x5E02;}         | "city"               |
			+| 13 | keyup             | KEY{Convert}         | <code>true</code>           |                         |                      |
			+| 14 | keydown           | KEY{Cancel}          | <code>true</code>           |                         | Cancel               |
			+| 15 | compositionupdate |                      |                             | GLYPH{}                 |                      |
			+| 16 | compositionend    |                      |                             | GLYPH{}                 |                      |
			+| 17 | keyup             | KEY{Cancel}          | <code>false</code>          |                         |                      |
			++----+-------------------+----------------------+-----------------------------+-------------------------+----------------------+
			</div>

			<p class="note">
			Some <a>input method editors</a> (such as on the MacOS operating system)
			might set an <a>empty string</a> to the composition data attribute
			before canceling a composition.
			</p>

			<h5 id="keys-IME-keys">Input Method Editor mode keys</h5>

				Some keys on certain devices are intended to activate <a>input
				method editor</a> functionality, or to change the mode of an active
				<a>input method editor</a>.  Custom keys for this purpose can be
				defined for different devices or language modes. The keys defined in
				this specification for this purpose are: KEY{Alphanumeric},
				KEY{CodeInput}, KEY{FinalMode}, KEY{HangulMode}, KEY{HanjaMode},
				KEY{Hiragana}, KEY{JunjaMode}, KEY{KanaMode}, KEY{KanjiMode},
				KEY{Katakana}, and KEY{Romaji}.  When one of these keys is
				pressed, and no <a>IME</a> is currently active, the appropriate
				<a>IME</a> is expected to be activated in the mode indicated by the
				key (if available). If an <a>IME</a> is already active when the key
				is pressed, the active <a>IME</a> might change to the indicated
				mode, or a different <a>IME</a> might be launched, or the might MAY
				be ignored, on a device- and application-specific basis.

				This specification also defines other keys which are intended for
				operation specifically with <a>input method editors</a>:
				KEY{Accept}, KEY{AllCandidates}, KEY{Cancel}, KEY{Convert},
				KEY{Compose}, KEY{Zenkaku} (FullWidth), KEY{Hankaku} (HalfWidth), KEY{NextCandidate},
				KEY{NonConvert}, and KEY{PreviousCandidate}.  The functions of these
				keys are not defined in this specification &mdash; refer to other
				resources for details on <a>input method editor</a> functionality.

				<p class="note">
				Keys with <a>input method editor</a> functions are not restricted to
				that purpose, and can have other device- or implementation-specific
				purposes.
				</p>

		<h4 id="keys-cancelable-keys">Default actions and cancelable keyboard events</h4>

			Canceling the <a>default action</a> of a EVENT{keydown} event MUST NOT
			affect its respective EVENT{keyup} event, but it MUST prevent the
			respective EVENT{beforeinput} and EVENT{input} (and EVENT{keypress} if
			supported) events from being generated. The following example describes
			a possible sequence of keys to generate the Unicode character Q (Latin
			Capital Letter Q) on a US keyboard using a US mapping:

			<div class="example">
			++---+-------------+----------------------+--------------------+----------------------------+-----------------------------------+
			=| # | Event Type  |{{KeyboardEvent}}<br/>|{{InputEvent}}<br/> | Modifiers                  | Notes                             |
			 |   |             |{{KeyboardEvent/key}} |{{InputEvent/data}} |                            |                                   |
			 +---+-------------+----------o-----------+---------o----------+--------------o-------------+-----------------------------------+
			+| 1 | keydown     | KEY{Shift}           |                    | {{KeyboardEvent/shiftKey}} |                                   |
			+| 2 | keydown     | KEY_NOLINK{Q}        |                    | {{KeyboardEvent/shiftKey}} | The <a>default action</a> is      |
			 |   |             |                      |                    |                            | prevented, e.g., by invoking      |
			 |   |             |                      |                    |                            | {{Event/preventDefault()}}.       |
			+|   |             |                      |                    |                            | <em>No EVENT{beforeinput} or      |
			 |   |             |                      |                    |                            | EVENT{input} (or EVENT{keypress}, |
			 |   |             |                      |                    |                            | if supported) events are          |
			 |   |             |                      |                    |                            | generated</em>                    |
			+| 3 | keyup       | KEY_NOLINK{Q}        |                    | {{KeyboardEvent/shiftKey}} |                                   |
			+| 4 | keyup       | KEY{Shift}           |                    |                            |                                   |
			++---+-------------+----------------------+--------------------+----------------------------+-----------------------------------+
			</div>

			If the key is a modifier key, the keystroke MUST still be taken into
			account for the modifiers states. The following example describes a
			possible sequence of keys to generate the Unicode character Q (Latin
			Capital Letter Q) on a US keyboard using a US mapping:

			<div class="example">
			++---+-------------+----------------------+--------------------+----------------------------+-----------------------------------+
			=| # | Event Type  |{{KeyboardEvent}}<br/>|{{InputEvent}}<br/> | Modifiers                  | Notes                             |
			 |   |             |{{KeyboardEvent/key}} |{{InputEvent/data}} |                            |                                   |
			 +---+-------------+----------o-----------+---------o----------+--------------o-------------+-----------------------------------+
			+| 1 | keydown     | KEY{Shift}           |                    | {{KeyboardEvent/shiftKey}} | The <a>default action</a> is      |
			 |   |             |                      |                    |                            | prevented, e.g., by invoking      |
			 |   |             |                      |                    |                            | {{Event/preventDefault()}}.       |
			+| 2 | keydown     | KEY_NOLINK{Q}        |                    | {{KeyboardEvent/shiftKey}} |                                   |
			+| 3 | beforeinput |                      | GLYPH{Q}           |                            |                                   |
			+| 4 | input       |                      |                    |                            |                                   |
			+| 5 | keyup       | KEY_NOLINK{Q}        |                    | {{KeyboardEvent/shiftKey}} |                                   |
			+| 6 | keyup       | KEY{Shift}           |                    |                            |                                   |
			++---+-------------+----------------------+--------------------+----------------------------+-----------------------------------+
			</div>

			If the key is part of a sequence of several keystrokes, whether it is a
			<a>dead key</a> or it is contributing to an Input Method Editor
			sequence, the keystroke MUST be ignored (not taken into account) only if
			the <a>default action</a> is canceled on the EVENT{keydown} event.
			Canceling a <a>dead key</a> on a EVENT{keyup} event has no effect on
			EVENT{beforeinput} or EVENT{input} events. The following example uses
			the dead key KEY{Dead} (UNI{U+0302} Combining Circumflex Accent key) and
			KEY_NOLINK{e} (UNI{U+0065}, Latin Small Letter E key) on a French
			keyboard using a French mapping and without any modifier activated:

			<div class="example">
			++---+-------------+----------------------+--------------------+-----------------------------------+
			=| # | Event Type  |{{KeyboardEvent}}<br/>|{{InputEvent}}<br/> | Notes                             |
			 |   |             |{{KeyboardEvent/key}} |{{InputEvent/data}} |                                   |
			 +---+-------------+----------o-----------+---------o----------+-----------------------------------+
			+| 1 | keydown     | KEY{Dead}            |                    | The <a>default action</a> is      |
			 |   |             |                      |                    | prevented, e.g., by invoking      |
			 |   |             |                      |                    | {{Event/preventDefault()}}.       |
			+| 2 | keyup       | KEY{Dead}            |                    |                                   |
			+| 3 | keydown     | KEY_NOLINK{e}        |                    |                                   |
			+| 4 | beforeinput |                      | GLYPH{e}           |                                   |
			+| 5 | input       |                      |                    |                                   |
			+| 6 | keyup       | KEY_NOLINK{e}        |                    |                                   |
			++---+-------------+----------------------+--------------------+-----------------------------------+
			</div>

<h2 id="event-constructors">Constructing Mouse and Keyboard Events</h2>

	Generally, when a constructor of an {{Event}} interface, or of an interface
	inherited from the {{Event}} interface, is invoked, the steps described in
	[[!DOM]] should be followed. However the {{KeyboardEvent}} and
	{{MouseEvent}} interfaces provide additional dictionary members for
	initializing the internal state of the {{Event}} object's key modifiers:
	specifically, the internal state queried for using the
	{{KeyboardEvent/getModifierState()}} and {{MouseEvent/getModifierState()}}
	methods. This section supplements the DOM4 steps for intializing a new
	{{Event}} object with these optional modifier states.

	For the purposes of constructing a {{KeyboardEvent}}, {{MouseEvent}}, or
	object derived from these objects using the algorithm below, all
	{{KeyboardEvent}}, {{MouseEvent}}, and derived objects have
	<dfn id="internal-key-modifier-state">internal key modifier state</dfn> which can be set and
	retrieved using the <a href="#keys-modifiers">key modifier names</a>
	described in the
	<a href="http://www.w3.org/TR/uievents-key/#keys-modifier">Modifier Keys table</a>
	in [[UIEvents-Key]].

	The following steps supplement the algorithm defined for constructing
	events in DOM4:

	*   If the {{Event}} being constructed is a {{KeyboardEvent}} or
		{{MouseEvent}} object or an object that derives from either of these,
		and a {{EventModifierInit}} argument was provided to the constructor,
		then run the following sub-steps:

		*   For each {{EventModifierInit}} argument, if the dictionary member
			begins with the string <code>"modifier"</code>, then let the
			<dfn id="modifier-key-name">key modifier name</dfn> be the
			dictionary member's name excluding the prefix
			<code>"modifier"</code>, and set the {{Event}} object's
			<a href="#internal-key-modifier-state">internal key modifier state</a>
			that matches the <a href="#modifier-key-name">key modifier name</a>
			to the corresponding value.

<h2 id="legacy-keyboardevent-events">Legacy {{KeyboardEvent}} events</h2>

	The EVENT{keypress} event is the traditional method for capturing key events
	and processing them before the DOM is updated with the effects of the key
	press. Code that makes use of the EVENT{keypress} event typically relies on
	the legacy {{KeyboardEvent/charCode}}, {{KeyboardEvent/keyCode}}, and
	{{UIEvent/which}} attributes.

	Note that the EVENT{keypress} event is specific to key events, and has been
	replaced by the more general event sequence of EVENT{beforeinput} and
	EVENT{input} events. These new <code>input</code> events are not specific to
	keyboard actions and can be used to capture user input regardless of the
	original source.

	<h3 id="legacy-keyboardevent-event-types">Legacy {{KeyboardEvent}} event types</h3>

		<h4 id="event-type-keypress"><dfn>keypress</dfn></h4>

			<table class="event-definition">
				<tr>
					<th>Type</th>
					<td><strong><code>keypress</code></strong></td>
				</tr>
				<tr>
					<th>Interface</th>
					<td>{{KeyboardEvent}}</td>
				</tr>
				<tr>
					<th>Sync / Async</th>
					<td>Sync</td>
				</tr>
				<tr>
					<th>Bubbles</th>
					<td>Yes</td>
				</tr>
				<tr>
					<th>Trusted Targets</th>
					<td><code>Element</code></td>
				</tr>
				<tr>
					<th>Cancelable</th>
					<td>Yes</td>
				</tr>
				<tr>
					<th>Composed</th>
					<td>Yes</td>
				</tr>
				<tr>
					<th>Default action</th>
					<td>Varies:
						launch <a>text composition system</a>;
						EVENT{blur} and EVENT{focus} events;
						EVENT{DOMActivate} event;
						other event</td>
				</tr>
				<tr>
					<th>Context<br/>(trusted events)</th>
					<td>
						<ul>
							<li>{{Event}}.{{Event/target}} :
									focused element processing the key event or if no element focused, then the
									<a>body element</a> if available, otherwise the
									<a>root element</a></li>
							<li>{{UIEvent}}.{{UIEvent/view}} :
								<a><code>Window</code></a></li>
							<li>{{UIEvent}}.{{UIEvent/detail}} :
								<code>0</code></li>
							<li>{{KeyboardEvent}}.{{UIEvent/which}} :
								legacy numerical code for this key</li>
							<li>{{KeyboardEvent}}.{{KeyboardEvent/charCode}} :
								legacy character value for this event</li>
							<li>{{KeyboardEvent}}.{{KeyboardEvent/keyCode}} :
								legacy numerical code for this key</li>
							<li>{{KeyboardEvent}}.{{KeyboardEvent/key}} :
								the key value of the key pressed.</li>
							<li>{{KeyboardEvent}}.{{KeyboardEvent/code}} :
								the code value associated with the key's physical placement on the keyboard.</li>
							<li>{{KeyboardEvent}}.{{KeyboardEvent/location}} :
								the location of the key on the device.</li>
							<li>{{KeyboardEvent}}.{{KeyboardEvent/altKey}} :
								<code>true</code> if KEYCAP{Alt} modifier was active, otherwise <code>false</code></li>
							<li>{{KeyboardEvent}}.{{KeyboardEvent/shiftKey}} :
								<code>true</code> if KEYCAP{Shift} modifier was active, otherwise <code>false</code></li>
							<li>{{KeyboardEvent}}.{{KeyboardEvent/ctrlKey}} :
								<code>true</code> if KEYCAP{Control} modifier was active, otherwise <code>false</code></li>
							<li>{{KeyboardEvent}}.{{KeyboardEvent/metaKey}} :
								<code>true</code> if KEYCAP{Meta} modifier was active, otherwise <code>false</code></li>
							<li>{{KeyboardEvent}}.{{KeyboardEvent/repeat}} :
								<code>false</code></li>
							<li>{{KeyboardEvent}}.{{KeyboardEvent/isComposing}} :
								<code>true</code> if the key event occurs as part of a composition session, otherwise <code>false</code></li>
						</ul>
					</td>
				</tr>
			</table>

			If supported by a <a>user agent</a>, this event MUST be dispatched
			when a key is pressed down, if and only if that key normally
			produces a <a>character value</a>. The EVENT{keypress} event type is
			device dependent and relies on the capabilities of the input devices
			and how they are mapped in the operating system.

			This event type MUST be generated after the <a>key mapping</a>. It
			MUST NOT be fired when using an <a>input method editor</a>.

			If this event is canceled, it should prevent the EVENT{input} event
			from firing, in addition to canceling the <a>default action</a>.

			Authors SHOULD use the EVENT{beforeinput} event instead of the
			EVENT{keypress} event.

			<p class="note">
			The EVENT{keypress} event is traditionally associated with detecting
			a <a>character value</a> rather than a physical key, and might not
			be available on all keys in some configurations.
			</p>

			<p class="warning">
			The EVENT{keypress} event type is defined in this specification for
			reference and completeness, but this specification <a>deprecates</a>
			the use of this event type. When in editing contexts, authors can
			subscribe to the EVENT{beforeinput} event instead.
			</p>

	<h3 id="keypress-event-order">EVENT{keypress} event order</h3>

		The EVENT{keypress} event type MUST be dispatched after the
		EVENT{keydown} event and before the EVENT{keyup} event associated with
		the same key.

		The EVENT{keypress} event type MUST be dispatched after the
		EVENT{beforeinput} event and before the EVENT{input} event associated
		with the same key.

		The sequence of key events for user-agents the support the
		EVENT{keypress} event is demonstrated in the following example:

		<div class="example">
		++---+-------------+------------------------+---------------------+--------------------------------+
		=| # | Event Type  | {{KeyboardEvent}}<br/> | {{InputEvent}}<br/> | Notes                          |
		 |   |             | {{KeyboardEvent/key}}  | {{InputEvent/data}} |                                |
		 +---+-------------+-----------o------------+----------o----------+--------------------------------+
		+| 1 | keydown     | KEY_NOLINK{a}          |                     |                                |
		+| 2 | beforeinput |                        | GLYPH{a}            |                                |
		+| 3 | keypress    | KEY_NOLINK{a}          |                     |                                |
		+|   |             |                        |                     | <em>Any <a>default actions</a> |
		 |   |             |                        |                     | related to this key, such as   |
		 |   |             |                        |                     | inserting a character in to    |
		 |   |             |                        |                     | the DOM.</em>                  |
		+| 4 | input       |                        |                     |                                |
		+| 5 | keyup       | KEY_NOLINK{a}          |                     |                                |
		++---+-------------+------------------------+---------------------+--------------------------------+
		</div>

<h2 id="legacy-event-initializers">Legacy Event Initializers</h2>

	<em>This section is normative.</em>
	
	The following features are obsolete and should only be implemented by
	<a>user agents</a> that require compatibility with legacy software.</em>

	Early versions of this specification included an initialization method on
	the interface (for example <code>initMouseEvent</code>) that required a long
	list of parameters that, in most cases, did not fully initialize all
	attributes of the event object. Because of this, event interfaces which were
	derived from the basic {{Event}} interface required that the initializer of
	<em>each</em> of the derived interfaces be called explicitly in order to
	fully initialize an event.

	<div class="example">
	Initializing all the attributes of a MutationEvent requires calls to two
	initializer methods: <code>initEvent</code> and
	<code>initMutationEvent</code>.
	</div>

	Due in part to the length of time in the development of this standard, some
	implementations MAY have taken a dependency on these (now deprecated)
	initializer methods. For completeness, these legacy event initializers are
	described in this section.

	<h3 id="idl-interface-KeyboardEvent-initializers">Initializers for interface KeyboardEvent</h3>

		<em>This section is informative</em>

		<p class="note">
		The argument list to this legacy KeyboardEvent initializer does not
		include the <code>detailArg</code> (present in other initializers) and
		adds the <code>locale</code> argument (see [[#changes-drafts]]); it is
		necessary to preserve this inconsistency for compatibility with existing
		implementations.
		</p>

		<pre class="idl">
		partial interface KeyboardEvent {
			// Originally introduced (and deprecated) in this specification
			undefined initKeyboardEvent(DOMString typeArg,
				optional boolean bubblesArg = false,
				optional boolean cancelableArg = false,
				optional Window? viewArg = null,
				optional DOMString keyArg = "",
				optional unsigned long locationArg = 0,
				optional boolean ctrlKey = false,
				optional boolean altKey = false,
				optional boolean shiftKey = false,
				optional boolean metaKey = false);
		};
		</pre>

		<dl dfn-for="KeyboardEvent">
			<dt><dfn method>initKeyboardEvent(typeArg)</dfn></dt>
			<dd>
				Initializes attributes of a {{KeyboardEvent}} object. This
				method has the same behavior as <code>UIEvent.initUIEvent()</code>.
				The value of {{UIEvent/detail}} remains undefined.

				<p class="warning">
				The <code>initKeyboardEvent</code> method is deprecated.
				</p>

				<dl class="parameters">
					<dt>DOMString typeArg</dt>
					<dd>
						Refer to the {{Event/initEvent()}} method for a description of this parameter.
					</dd>

					<dt>boolean bubblesArg</dt>
					<dd>
						Refer to the {{Event/initEvent()}} method for a description of this parameter.
					</dd>

					<dt>boolean cancelableArg</dt>
					<dd>
						Refer to the {{Event/initEvent()}} method for a description of this parameter.
					</dd>

					<dt>Window? viewArg</dt>
					<dd>
						Specifies {{UIEvent/view}}. This value MAY be <code>null</code>.
					</dd>

					<dt>DOMString keyArg</dt>
					<dd>
						Specifies {{KeyboardEvent/key}}.
					</dd>

					<dt>unsigned long locationArg</dt>
					<dd>
						Specifies {{KeyboardEvent/location}}.
					</dd>

					<dt>boolean ctrlKey</dt>
					<dd>
						Specifies whether the Control key modifier is active.
					</dd>

					<dt>boolean altKey</dt>
					<dd>
						Specifies whether the Alt key modifier is active.
					</dd>

					<dt>boolean shiftKey</dt>
					<dd>
						Specifies whether the Shift key modifier is active.
					</dd>

					<dt>boolean metaKey</dt>
					<dd>
						Specifies whether the Meta key modifier is active.
					</dd>
				</dl>
			</dd>
		</dl>

<h2 id="legacy-key-attributes">Legacy Key &amp; Mouse Event Attributes</h2>

	<em>This section is non-normative. The following attributes are obsolete and should
	only be implemented by <a>user agents</a> that require compatibility with legacy
	software that requires these keyboard events.</em>

	These features were never formally specified and the current browser
	implementations vary in significant ways.

	<h3 id="legacy-KeyboardEvent">Legacy {{KeyboardEvent}} supplemental interface</h3>

		<em>This section is non-normative</em>

		Browser support for keyboards has traditionally relied on three ad-hoc
		attributes, {{KeyboardEvent/keyCode}}, {{KeyboardEvent/charCode}}, and
		{{UIEvent}}'s {{UIEvent/which}}.

		All three of these attributes return a numerical code that represents some
		aspect of the key pressed: {{KeyboardEvent/keyCode}} is an index of the key
		itself. {{KeyboardEvent/charCode}} is the ASCII value of the character keys.
		{{UIEvent/which}} is the character value where available and otherwise
		the key index. The values for these attributes, and the availability of the
		attribute, is inconsistent across platforms, keyboard languages and layouts,
		<a>user agents</a>, versions, and even event types.

		<h4 id="legacy-interface-KeyboardEvent">Interface KeyboardEvent (supplemental)</h4>

			The partial {{KeyboardEvent}} interface is an informative extension of
			the {{KeyboardEvent}} interface, which adds the
			{{KeyboardEvent/charCode}} and {{KeyboardEvent/keyCode}} attributes.

			The partial {{KeyboardEvent}} interface can be obtained by using the
			{{Document/createEvent()}} method call in
			implementations that support this extension.

			<pre class="idl">
			partial interface KeyboardEvent {
			  // The following support legacy user agents
			  readonly attribute unsigned long charCode;
			  readonly attribute unsigned long keyCode;
			};
			</pre>

			<dl dfn-for="KeyboardEvent">
				<dt><dfn attribute>charCode</dfn></dt>
				<dd>
					{{KeyboardEvent/charCode}} holds a character value, for
					EVENT{keypress} events which generate character input. The value
					is the Unicode reference number (code point) of that character
					(e.g. <code>event.charCode = event.key.charCodeAt(0)</code> for
					printable characters). For EVENT{keydown} or EVENT{keyup}
					events, the value of {{KeyboardEvent/charCode}} is
					<code>0</code>.
				</dd>

				<dt><dfn attribute>keyCode</dfn></dt>
				<dd>
					{{KeyboardEvent/keyCode}} holds a system- and
					implementation-dependent numerical code signifying the
					unmodified identifier associated with the key pressed. Unlike
					the {{KeyboardEvent/key}} attribute, the set of possible values
					are not normatively defined in this specification. Typically,
					these value of the {{KeyboardEvent/keyCode}} SHOULD represent
					the decimal codepoint in ASCII [[RFC20]][[US-ASCII]] or Windows
					1252 [[WIN1252]], but MAY be drawn from a different appropriate
					character set. Implementations that are unable to identify a key
					use the key value KEYCAP{0}.

					See [[#legacy-key-models]] for more details on how to determine
					the values for {{KeyboardEvent/keyCode}}.
				</dd>
			</dl>

		<h4 id="legacy-dictionary-KeyboardEventInit">Interface KeyboardEventInit (supplemental)</h4>

			Browsers that include support for {{KeyboardEvent/keyCode}}
			and {{KeyboardEvent/charCode}} in
			{{KeyboardEvent}} should also add the following members to the
			{{KeyboardEventInit}} dictionary.

			The partial {{KeyboardEventInit}} dictionary is an informative extension
			of the {{KeyboardEventInit}} dictionary, which adds
			{{KeyboardEvent/charCode}} and {{KeyboardEvent/keyCode}}
			members to initialize the corresponding
			{{KeyboardEvent}} attributes.

			<pre class="idl">
			partial dictionary KeyboardEventInit {
			  // The following support legacy user agents
			  unsigned long charCode = 0;
			  unsigned long keyCode = 0;
			};
			</pre>

			<dl dfn-for="KeyboardEventInit" data-noexport>
				<dt><dfn dict-member>charCode</dfn></dt>
				<dd>
					Initializes the {{KeyboardEvent/charCode}} attribute of the
					{{KeyboardEvent}} to the Unicode code point for the event's
					character.
				</dd>

				<dt><dfn dict-member>keyCode</dfn></dt>
				<dd>
					Initializes the {{KeyboardEvent/keyCode}} attribute of the
					{{KeyboardEvent}} to the system- and implementation-dependent
					numerical code signifying the unmodified identifier associated
					with the key pressed.
				</dd>
			</dl>

	<h3 id="legacy-key-models">Legacy key models</h3>

		<em>This section is non-normative</em>

		Implementations differ on which values are exposed on these attributes for
		different event types. An implementation MAY choose to expose both virtual
		key codes and character codes in the {{KeyboardEvent/keyCode}} property
		(<em>conflated model</em>), or report separate {{KeyboardEvent/keyCode}} and
		{{KeyboardEvent/charCode}} properties (<em>split model</em>).

		<h4 id="determine-keydown-keyup-keyCode">How to determine {{KeyboardEvent/keyCode}} for EVENT{keydown} and EVENT{keyup} events</h4>

			The {{KeyboardEvent/keyCode}} for EVENT{keydown} or EVENT{keyup} events
			is calculated as follows:

			*	Read the virtual key code from the operating system's event
				information, if such information is available.

			*	If an Input Method Editor is processing key input and the event is
				EVENT{keydown}, return 229.

			*	If input key when pressed without modifiers would insert a numerical
				character (0-9), return the ASCII code of that numerical character.

			*	If input key when pressed without modifiers would insert a lower
				case character in the a-z alphabetical range, return the ASCII code
				of the upper case equivalent.

			*	If the implementation supports a key code conversion table for the
				operating system and platform, look up the value. If the conversion
				table specifies an alternate virtual key value for the given input,
				return the specified value.

			*	If the key's function, as determined in an implementation-specific
				way, corresponds to one of the keys in the
				[[#fixed-virtual-key-codes]] table, return the corresponding key
				code.

			*	Return the virtual key code from the operating system.

			*	If no key code was found, return 0.

		<h4 id="determine-keypress-keyCode">How to determine {{KeyboardEvent/keyCode}} for EVENT{keypress} events</h4>

			The {{KeyboardEvent/keyCode}} for EVENT{keypress} events is calculated
			as follows:

			*	If the implementation supports a <em>conflated model</em>, set
				{{KeyboardEvent/keyCode}} to the Unicode code point of the character
				being entered.

			*	If the implementation supports a <em>split model</em>, set
				{{KeyboardEvent/keyCode}} to 0.

		<h4 id="fixed-virtual-key-codes">Fixed virtual key codes</h4>

			The virtual key codes for the following keys do not usually change with
			keyboard layouts on desktop systems:

			++------------+-------------+-------+
			=| Key        | Virtual Key | Notes |
			 |            | <br/>Code   |       |
			 +------------+------o------+---o---+
			+| Backspace  | 8           |       |
			+| Tab        | 9           |       |
			+| Enter      | 13          |       |
			+| Shift      | 16          |       |
			+| Control    | 17          |       |
			+| Alt        | 18          |       |
			+| CapsLock   | 20          |       |
			+| Escape     | 27          | Esc   |
			+| Space      | 32          |       |
			+| PageUp     | 33          |       |
			+| PageDown   | 34          |       |
			+| End        | 35          |       |
			+| Home       | 36          |       |
			+| ArrowLeft  | 37          |       |
			+| ArrowUp    | 38          |       |
			+| ArrowRight | 39          |       |
			+| ArrowDown  | 40          |       |
			+| Delete     | 46          | Del   |
			++------------+-------------+-------+

		<h4 id="optionally-fixed-virtual-key-codes">Optionally fixed virtual key codes</h4>

			The following punctuation characters MAY change virtual codes between
			keyboard layouts, but reporting these values will likely be more
			compatible with legacy content expecting US-English keyboard layout:

			++------------------------+-----------------+-------------+
			=| Key                    | Character       | Virtual Key |
			 |                        |                 | <br/>Code   |
			 +------------------------+--------o--------+------o------+
			+| Semicolon              | GLYPH{;}        | 186         |
			+| Colon                  | GLYPH{:}        | 186         |
			+| Equals sign            | GLYPH{=}        | 187         |
			+| Plus                   | GLYPH{+}        | 187         |
			+| Comma                  | GLYPH{,}        | 188         |
			+| Less than sign         | GLYPH{&lt;}     | 188         |
			+| Minus                  | GLYPH{-}        | 189         |
			+| Underscore             | GLYPH{_}        | 189         |
			+| Period                 | GLYPH{.}        | 190         |
			+| Greater than sign      | GLYPH{&gt;}     | 190         |
			+| Forward slash          | GLYPH{/}        | 191         |
			+| Question mark          | GLYPH{?}        | 191         |
			+| Backtick               | GLYPH{`}        | 192         |
			+| Tilde                  | GLYPH{~}        | 192         |
			+| Opening squace bracket | GLYPH{[}        | 219         |
			+| Opening curly brace    | GLYPH{{}        | 219         |
			+| Backslash              | GLYPH{\}        | 220         |
			+| Pipe                   | GLYPH{&vert;}   | 220         |
			+| Closing square bracket | GLYPH{]}        | 221         |
			+| Closing curly brace    | GLYPH{&rbrace;} | 221         |
			+| Single quote           | GLYPH{'}        | 222         |
			+| Double quote           | GLYPH{"}        | 222         |
			++------------------------+-----------------+-------------+

<h2 id="legacy-event-types">Legacy Event Types</h2>

	<em>This section is normative. The following event types are obsolete and should
	only be implemented by <a>user agents</a> that require compatibility with legacy
	software.</em>

	<h3 id="legacy-keyboardevent-events">Legacy {{KeyboardEvent}} events</h3>

		The EVENT{keypress} event is the traditional method for capturing key events
		and processing them before the DOM is updated with the effects of the key
		press. Code that makes use of the EVENT{keypress} event typically relies on
		the legacy {{KeyboardEvent/charCode}}, {{KeyboardEvent/keyCode}}, and
		{{UIEvent/which}} attributes.

		Note that the EVENT{keypress} event is specific to key events, and has been
		replaced by the more general event sequence of EVENT{beforeinput} and
		EVENT{input} events. These new <code>input</code> events are not specific to
		keyboard actions and can be used to capture user input regardless of the
		original source.

		<h4 id="legacy-keyboardevent-event-types">Legacy {{KeyboardEvent}} event types</h4>

			<h5 id="event-type-keypress"><dfn>keypress</dfn></h5>

				<table class="event-definition">
					<tr>
						<th>Type</th>
						<td><strong><code>keypress</code></strong></td>
					</tr>
					<tr>
						<th>Interface</th>
						<td>{{KeyboardEvent}}</td>
					</tr>
					<tr>
						<th>Sync / Async</th>
						<td>Sync</td>
					</tr>
					<tr>
						<th>Bubbles</th>
						<td>Yes</td>
					</tr>
					<tr>
						<th>Trusted Targets</th>
						<td><code>Element</code></td>
					</tr>
					<tr>
						<th>Cancelable</th>
						<td>Yes</td>
					</tr>
					<tr>
						<th>Composed</th>
						<td>Yes</td>
					</tr>
					<tr>
						<th>Default action</th>
						<td>Varies:
							launch <a>text composition system</a>;
							EVENT{blur} and EVENT{focus} events;
							EVENT{DOMActivate} event;
							other event</td>
					</tr>
					<tr>
						<th>Context<br/>(trusted events)</th>
						<td>
							<ul>
								<li>{{Event}}.{{Event/target}} :
										focused element processing the key event or if no element focused, then the
										<a>body element</a> if available, otherwise the
										<a>root element</a></li>
								<li>{{UIEvent}}.{{UIEvent/view}} :
									<a><code>Window</code></a></li>
								<li>{{UIEvent}}.{{UIEvent/detail}} :
									<code>0</code></li>
								<li>{{KeyboardEvent}}.{{UIEvent/which}} :
									legacy numerical code for this key</li>
								<li>{{KeyboardEvent}}.{{KeyboardEvent/charCode}} :
									legacy character value for this event</li>
								<li>{{KeyboardEvent}}.{{KeyboardEvent/keyCode}} :
									legacy numerical code for this key</li>
								<li>{{KeyboardEvent}}.{{KeyboardEvent/key}} :
									the key value of the key pressed.</li>
								<li>{{KeyboardEvent}}.{{KeyboardEvent/code}} :
									the code value associated with the key's physical placement on the keyboard.</li>
								<li>{{KeyboardEvent}}.{{KeyboardEvent/location}} :
									the location of the key on the device.</li>
								<li>{{KeyboardEvent}}.{{KeyboardEvent/altKey}} :
									<code>true</code> if KEYCAP{Alt} modifier was active, otherwise <code>false</code></li>
								<li>{{KeyboardEvent}}.{{KeyboardEvent/shiftKey}} :
									<code>true</code> if KEYCAP{Shift} modifier was active, otherwise <code>false</code></li>
								<li>{{KeyboardEvent}}.{{KeyboardEvent/ctrlKey}} :
									<code>true</code> if KEYCAP{Control} modifier was active, otherwise <code>false</code></li>
								<li>{{KeyboardEvent}}.{{KeyboardEvent/metaKey}} :
									<code>true</code> if KEYCAP{Meta} modifier was active, otherwise <code>false</code></li>
								<li>{{KeyboardEvent}}.{{KeyboardEvent/repeat}} :
									<code>false</code></li>
								<li>{{KeyboardEvent}}.{{KeyboardEvent/isComposing}} :
									<code>true</code> if the key event occurs as part of a composition session, otherwise <code>false</code></li>
							</ul>
						</td>
					</tr>
				</table>

				If supported by a <a>user agent</a>, this event MUST be dispatched
				when a key is pressed down, if and only if that key normally
				produces a <a>character value</a>. The EVENT{keypress} event type is
				device dependent and relies on the capabilities of the input devices
				and how they are mapped in the operating system.

				This event type MUST be generated after the <a>key mapping</a>. It
				MUST NOT be fired when using an <a>input method editor</a>.

				If this event is canceled, it should prevent the EVENT{input} event
				from firing, in addition to canceling the <a>default action</a>.

				Authors SHOULD use the EVENT{beforeinput} event instead of the
				EVENT{keypress} event.

				<p class="note">
				The EVENT{keypress} event is traditionally associated with detecting
				a <a>character value</a> rather than a physical key, and might not
				be available on all keys in some configurations.
				</p>

				<p class="warning">
				The EVENT{keypress} event type is defined in this specification for
				reference and completeness, but this specification <a>deprecates</a>
				the use of this event type. When in editing contexts, authors can
				subscribe to the EVENT{beforeinput} event instead.
				</p>

		<h4 id="keypress-event-order">EVENT{keypress} event order</h4>

			The EVENT{keypress} event type MUST be dispatched after the
			EVENT{keydown} event and before the EVENT{keyup} event associated with
			the same key.

			The EVENT{keypress} event type MUST be dispatched after the
			EVENT{beforeinput} event and before the EVENT{input} event associated
			with the same key.

			The sequence of key events for user-agents the support the
			EVENT{keypress} event is demonstrated in the following example:

			<div class="example">
			++---+-------------+------------------------+---------------------+--------------------------------+
			=| # | Event Type  | {{KeyboardEvent}}<br/> | {{InputEvent}}<br/> | Notes                          |
			 |   |             | {{KeyboardEvent/key}}  | {{InputEvent/data}} |                                |
			 +---+-------------+-----------o------------+----------o----------+--------------------------------+
			+| 1 | keydown     | KEY_NOLINK{a}          |                     |                                |
			+| 2 | beforeinput |                        | GLYPH{a}            |                                |
			+| 3 | keypress    | KEY_NOLINK{a}          |                     |                                |
			+|   |             |                        |                     | <em>Any <a>default actions</a> |
			 |   |             |                        |                     | related to this key, such as   |
			 |   |             |                        |                     | inserting a character in to    |
			 |   |             |                        |                     | the DOM.</em>                  |
			+| 4 | input       |                        |                     |                                |
			+| 5 | keyup       | KEY_NOLINK{a}          |                     |                                |
			++---+-------------+------------------------+---------------------+--------------------------------+
			</div>

<h2 id="security-considerations">Security Considerations</h2>

	TODO - Add specific concerns for this spec

<h2 id="acknowledgements-contributors">Acknowledgements</h2>

	TODO

<h2 id="other-uievents">Refs to other UIEvent specs \[DELETE]</h2>

	This section will be deleted.

	Temporary place to "define" other referenced UI Events (to make the bikeshed linker happy).
	This will be deleted once we have proper cross-references.

	<dfn>beforeinput</dfn>
	<dfn>blur</dfn>
	<dfn>click</dfn>
	<dfn>compositionend</dfn>
	<dfn>compositionstart</dfn>
	<dfn>compositionupdate</dfn>
	<dfn>DOMActivate</dfn>
	<dfn>input</dfn>

	<h3 id="things">Things defined in other sections</h3>

		<h4 id="event-flow-activation">Activation triggers and behavior</h4>
		<h4 id="event-flow-default-cancel">Default actions and cancelable events</h4>
		<h4 id="event-flow">Event dispatch and DOM event flow</h4>
		<h4 id="events-focusevent">Focus Events</h4>
		<h4 id="conf-interactive-ua">Web browsers and other dynamic or interactive <a>user agents</a></h4>
		<h4 id="conf-author-tools">Authoring tools</h4>

	<h3 id="compositionevent-things">Things defined in CompositionEvents</h3>
		<h4 id="events-compositionevents">Composition Events</h4>

	<h3 id="changes-things">Things defined in Changes</h3>
		<h4 id="changes-drafts">Changes between different drafts of UI Events</h4>

<h2 id="glossary">Glossary \[DELETE]</h2>

This section will be deleted.

Temporary glossary terms (for bikeshed linker).
Many of these are properly defined elsewhere and should be linked to directly. 
Terms which should be defined in this spec should be defined inline.

: <dfn>activation behavior</dfn>
::	The action taken when an <a>event</a>, typically initiated by users through
	an input device, causes an element to fulfill a defined task.  The task MAY
	be defined for that element by the <a>host language</a>, or by
	author-defined variables, or both.  The default task for any given element
	MAY be a generic action, or MAY be unique to that element.  For example, the
	activation behavior of an HTML or SVG <code>&lt;a&gt;</code> element is to
	cause the <a>user agent</a> to traverse the link specified in the
	<code>href</code> attribute, with the further optional parameter of
	specifying the browsing context for the traversal (such as the current
	window or tab, a named window, or a new window). The activation behavior of
	an HTML <code>&lt;input&gt;</code> element with the <code>type</code>
	attribute value <code>submit</code> is be to send the values of the form
	elements to an author-defined IRI by the author-defined HTTP method.  See
	[[#event-flow-activation]] for more details.

: <dfn>activation trigger</dfn>
::	An event which is defined to initiate an <a>activation behavior</a>.  Refer
	to [[#event-flow-activation]] for more details.

: <dfn>body element</dfn>
::	In HTML or XHTML <a>documents</a>, the body element represents the contents of the
	document. In a well-formed HTML document, the body element is a first
	descendant of the <a>root element</a>.

: <dfn>character value</dfn>
::	In the context of key values, a character value is a string representing one
	or more Unicode characters, such as a letter or symbol, or a set of letters, each
	belonging to the set of valid <a>Unicode character categories</a>.
	In this specification, character values are denoted as a unicode string
	(e.g., UNI{U+0020}) or a glyph representation of the same code point (e.g.,
	GLYPH{&nbsp;}), and are color coded to help distinguish these two representations.

	<p class="note">
	In source code, some key values, such as non-graphic characters, can be
	represented using the character escape syntax of the programming language in
	use.
	</p>

: <dfn>dead key</dfn>
::	A dead key is a key or combination of keys which produces no character by
	itself, but which in combination or sequence with another key produces a
	modified character, such as a character with diacritical marks (e.g.,
	GLYPH{&#xF6;}, GLYPH{&#xE9;}, GLYPH{&#xE2;}).

: <dfn>default action</dfn>
::	A <a>default action</a> is an OPTIONAL supplementary behavior that an
	implementation MUST perform in combination with the dispatch of the event
	object.  Each event type definition, and each specification, defines the
	<a>default action</a> for that event type, if it has one.  An instance of an
	event MAY have more than one <a>default action</a> under some circumstances,
	such as when associated with an <a>activation trigger</a>.  A <a>default
	action</a> MAY be cancelled through the invocation of the
	{{Event/preventDefault()}} method. For more details, see
	[[#event-flow-default-cancel]].

: <dfn lt="deprecates|deprecated">deprecated</dfn>
::	Features marked as deprecated are included in the specification as reference
	to older implementations or specifications, but are OPTIONAL and
	discouraged.  Only features which have existing or in-progress replacements
	MUST be deprecated in this specification.  Implementations which do not
	already include support for the feature MAY implement deprecated features
	for reasons of backwards compatibility with existing content, but content
	authors creating content SHOULD NOT use deprecated features, unless there is
	no other way to solve a use case. Other specifications which reference this
	specification SHOULD NOT use deprecated features, but SHOULD point instead
	to the replacements of which the feature is deprecated in favor.  Features
	marked as deprecated in this specification are expected to be dropped from
	future specifications.

: <dfn>empty string</dfn>
::	The empty string is a value of type <code>DOMString</code> of length
	<code>0</code>, i.e., a string which contains no characters (neither
	printing nor control characters).

: <dfn>event</dfn>
::	An event is the representation of some occurrence (such as a mouse click on
	the presentation of an element, the removal of child node from an element,
	or any number of other possibilities) which is associated with its <a>event
	target</a>. Each event is an instantiation of one specific <a>event
	type</a>.

: <dfn>event target</dfn>
::	The object to which an <a>event</a> is targeted using the [[#event-flow]].
	The event target is the value of the {{Event/target}} attribute.

: <dfn>host language</dfn>
::	Any language which integrates the features of another language or API
	specification, while normatively referencing the origin specification rather
	than redefining those features, and extending those features only in ways
	defined by the origin specification.  An origin specification typically is
	only intended to be implemented in the context of one or more host
	languages, not as a standalone language.  For example, XHTML, HTML, and SVG
	are host languages for UI Events, and they integrate and extend the objects
	and models defined in this specification.

: <dfn>IME</dfn>
: <dfn>input method editor</dfn>
:: 	An <em>input method editor</em> (IME), also known as a <em>front end
	processor</em>, is an application that performs the conversion between
	keystrokes and ideographs or other characters, usually by user-guided
	dictionary lookup, often used in East Asian languages (e.g., Chinese,
	Japanese, Korean).  An <a>IME</a> MAY also be used for dictionary-based word
	completion, such as on mobile devices.  See [[#keys-IME]] for treatment of
	IMEs in this specification.  See also <a>text composition system</a>.

: <dfn>key mapping</dfn>
::	Key mapping is the process of assigning a key value to a particular key, and
	is the result of a combination of several factors, including the operating
	system and the keyboard layout (e.g., <a>QWERTY</a>, Dvorak, Spanish,
	InScript, Chinese, etc.), and after taking into account all <a>modifier
	key</a> (KEYCAP{Shift}, KEYCAP{Alt}, et al.) and <a>dead key</a> states.

: <dfn>key value</dfn>
::	A key value is a <a>character value</a> or multi-character string (such as
	KEY{Enter}, KEY{Tab}, or KEY{MediaTrackNext}) associated with a key in a
	particular state. Every key has a key value, whether or not it has a
	<a>character value</a>. This includes control keys, function keys,
	<a>modifier keys</a>, <a>dead keys</a>, and any other key. The key value of
	any given key at any given time depends upon the <a>key mapping</a>.

: <dfn>modifier key</dfn>
::	A modifier key changes the normal behavior of a key, such as to produce a
	character of a different case (as with the KEYCAP{Shift} key), or to alter
	what functionality the key triggers (as with the KEYCAP{Fn} or KEYCAP{Alt}
	keys). See [[#keys-modifiers]] for more information about modifier keys and
	refer to the [=Modifier Keys table=] in [[UIEvents-Key]] for a list
	of valid modifier keys.

: <dfn>QWERTY</dfn>
::	QWERTY (pronounced <q>&#x2C8;kw&#x25C;rti</q>) is a common keyboard layout,
	so named because the first five character keys on the top row of letter keys
	are Q, W, E, R, T, and Y.  There are many other popular keyboard layouts
	(including the Dvorak and Colemak layouts), most designed for localization
	or ergonomics.

: <dfn>text composition system</dfn>
::	A software component that interprets some form of alternate input (such as a
	<a>input method editor</a>, a speech processor, or a handwriting recognition
	system) and converts it to text.

: <dfn>Unicode character categories</dfn>
:: A subset of the General Category values that are defined for each Unicode
	code point. This subset contains all the
	Letter (<abbr title="Letter, Lowercase">Ll</abbr>,
		<abbr title="Letter, Modifier">Lm</abbr>,
		<abbr title="Letter, Other">Lo</abbr>,
		<abbr title="Letter, Titlecase">Lt</abbr>,
		<abbr title="Letter, Uppercase">Lu</abbr>),
	Number (<abbr title="Number, Decimal Digit">Nd</abbr>,
		<abbr title="Number, Letter">Nl</abbr>,
		<abbr title="Number, Other">No</abbr>),
	Punctuation (<abbr title="Punctuation, Connector">Pc</abbr>,
		<abbr title="Punctuation, Dash">Pd</abbr>,
		<abbr title="Punctuation, Close">Pe</abbr>,
		<abbr title="Punctuation, Final quote">Pf</abbr>,
		<abbr title="Punctuation, Initial quote">Pi</abbr>,
		<abbr title="Punctuation, Other">Po</abbr>,
		<abbr title="Punctuation, Open">Ps</abbr>)
	and Symbol (<abbr title="Symbol, Currency">Sc</abbr>,
		<abbr title="Symbol, Modifier">Sk</abbr>,
		<abbr title="Symbol, Math">Sm</abbr>,
		<abbr title="Symbol, Other">So</abbr>)
	category values.

: <dfn>un-initialized value</dfn>
::	The value of any event attribute (such as {{Event/bubbles}} or
	{{Event/currentTarget}}) before the event has been initialized with
	{{Event/initEvent()}}. The un-initialized values of an event apply
	immediately after a new event has been created using the method
	{{Document/createEvent()}}.

: <dfn>user agent</dfn>
::	A program, such as a browser or content authoring tool, normally running on
	a client machine, which acts on a user's behalf in retrieving, interpreting,
	executing, presenting, or creating content.  Users MAY act on the content
	using different user agents at different times, for different purposes.  See
	the [[#conf-interactive-ua]] and [[#conf-author-tools]] for details on the
	requirements for a <em>conforming</em> user agent.

: <dfn>Window</dfn>
::	The <code>Window</code> is the object referred to by the current <a>document</a>'s
	browsing context's Window Proxy object as defined in
	<a href="http://dev.w3.org/html5/spec/single-page.html#windowproxy" title="HTML5 WindowProxy description">HTML5</a>
	[[HTML5]].

