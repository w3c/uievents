<h1>Mouse Events</h1>

<pre class="metadata">
Shortname: mouse-events
Level:
Group: webapps
Status: ED
TR: https://www.w3.org/TR/uievents/
ED: https://w3c.github.io/uievents/
Repository: w3c/uievents
Editor: Gary Kacmarcik 59482, Google, garykac@google.com
Editor: Travis Leithead 40117, Microsoft, travil@microsoft.com
Former Editor: Doug Schepers, Mar 2008 - May 2011
!Tests: <a href=https://github.com/web-platform-tests/wpt/tree/master/uievents>web-platform-tests uievents/</a> (<a href=https://github.com/web-platform-tests/wpt/labels/uievents>ongoing work</a>)
Abstract:
	*** Mouse Events ***

	Note: This is an experimental split of the UI Events spec into smaller, event-specific
	specs. The split was made from an out-of-date snapshot, so the information here is not
	current, so please focus on the overall structure rather than the specifics of the
	content. If this experiment goes well, then we will split the current spec after all
	outstanding pull requests have been handled.
</pre>

<pre class="anchors">
urlPrefix: https://www.w3.org/TR/WebIDL/#idl-; type: type;
	text: long
urlPrefix: https://w3c.github.io/selection-api/#widl-Window-getSelection-Selection; type: dfn; for: Document
	text: getSelection()
url: https://www.w3.org/TR/2004/REC-xml-20040204/#NT-S; type: dfn;
	text: white space
url: https://www.w3.org/TR/uievents-key/#key-attribute-value; type: dfn; spec: uievents-key;
	text: key attribute value
url: https://www.w3.org/TR/uievents-key/#keys-modifier; type: dfn; spec: uievents-key;
	text: modifier keys table
url: https://html.spec.whatwg.org/multipage/forms.html#context-menus; type: dfn;
	text: contextmenu
url: https://www.w3.org/TR/pointerevents3/#pointerevent-interface; type: interface; spec: pointerevents3
	text: PointerEvent
url: https://dom.spec.whatwg.org/#concept-tree-ancestor; type: dfn;
	text: ancestor
url: https://www.w3.org/TR/CSS21/visuren.html#x43; type: dfn;
	text: stacking context
url: https://drafts.csswg.org/css-position-3/#positioned-box; type: dfn;
	text: positioned
url: https://drafts.csswg.org/css-position-4/#paint-a-stacking-context; type: dfn;
	text: painting a stacking context
</pre>

<pre class="link-defaults">
spec:dom; type:interface; text:Document
spec:dom; type:dfn; for:Event; text:target
spec:infra; type:dfn; text:code point
</pre>

<h2 id="spec-intro">Introduction</h2>

	<h3 id="spec-overview">Overview</h3>

		TODO.

	<h3 id="spec-conformance">Conformance</h3>

		Boilerplate?

<h2 id="style-conventions">Stylistic Conventions</h2>

This specification follows the
<a href="http://www.w3.org/People/Schepers/spec-conventions.html">Proposed W3C Specification Conventions</a>,
with the following supplemental additions:

<p class="note">This is a note.</p>

<!-- TODO : Example (but ensure that it doesn't get auto-numbered -->

<p class="&#x0058;&#x0058;&#x0058;">This is an open issue.</p>

<p class="warning">This is a warning.</p>

<pre class="idl-ignore" data-no-idl data-highlight="webidl">
	  interface <b>Example</b> {
	      // This is an IDL definition.
	  };
</pre>

<h2 id="events-mouseevents">Mouse Events</h2>

	The mouse event module originates from the [[HTML401]] <code>onclick</code>,
	<code>ondblclick</code>, <code>onmousedown</code>, <code>onmouseup</code>,
	<code>onmouseover</code>, <code>onmousemove</code>, and
	<code>onmouseout</code> attributes. This event module is specifically
	designed for use with pointing input devices, such as a mouse or a trackball.

	<h3 id="interface-mouseevent">Interface MouseEvent</h3>

		<p class="intro-dom">Introduced in DOM Level 2, modified in this
		specification
		</p>

		The {{MouseEvent}} interface provides specific contextual information
		associated with Mouse events.

		In the case of nested elements, mouse events are always targeted at the
		most deeply nested element.

		<p class="note">
		Ancestors of the targeted element can use event bubbling to obtain
		notifications of mouse events which occur within their descendent
		elements.
		</p>

		To create an instance of the {{MouseEvent}} interface, use the
		{{MouseEvent}} constructor, passing an optional {{MouseEventInit}}
		dictionary.

		<p class="note">
		When initializing {{MouseEvent}} objects using <code>initMouseEvent</code>,
		implementations can use the client coordinates {{MouseEvent/clientX}}
		and {{MouseEvent/clientY}} for calculation of other coordinates (such
		as target coordinates exposed by <a>DOM Level 0</a> implementations or
		other proprietary attributes, e.g., <code>pageX</code>).
		</p>

		<h4 id="idl-mouseevent">MouseEvent</h4>

			<pre class="idl">
			[Exposed=Window]
			interface MouseEvent : UIEvent {
				constructor(DOMString type, optional MouseEventInit eventInitDict = {});
				readonly attribute long screenX;
				readonly attribute long screenY;
				readonly attribute long clientX;
				readonly attribute long clientY;
				readonly attribute long layerX;
				readonly attribute long layerY;

				readonly attribute boolean ctrlKey;
				readonly attribute boolean shiftKey;
				readonly attribute boolean altKey;
				readonly attribute boolean metaKey;

				readonly attribute short button;
				readonly attribute unsigned short buttons;

				readonly attribute EventTarget? relatedTarget;

				boolean getModifierState(DOMString keyArg);
			};
			</pre>

			<dl dfn-for="MouseEvent">
				<dt><dfn attribute>screenX</dfn></dt>
				<dd>
					The horizontal coordinate at which the event occurred relative
					to the origin of the screen coordinate system.

					The <a>un-initialized value</a> of this attribute MUST be
					<code>0</code>.
				</dd>

				<dt><dfn attribute>screenY</dfn></dt>
				<dd>
					The vertical coordinate at which the event occurred relative to
					the origin of the screen coordinate system.

					The <a>un-initialized value</a> of this attribute MUST be
					<code>0</code>.
				</dd>

				<dt><dfn attribute>clientX</dfn></dt>
				<dd>
					The horizontal coordinate at which the event occurred relative
					to the viewport associated with the event.

					The <a>un-initialized value</a> of this attribute MUST be
					<code>0</code>.
				</dd>

				<dt><dfn attribute>clientY</dfn></dt>
				<dd>
					The vertical coordinate at which the event occurred relative
					to the viewport associated with the event.

					The <a>un-initialized value</a> of this attribute MUST be
					<code>0</code>.
				</dd>

				<dt><dfn attribute>layerX</dfn></dt>
				<dd>
					The horizontal offset from the nearest <a>ancestor</a> element which
					is a <a>stacking context</a>, is <a>positioned</a>, or paints in the
					positioned phase when <a>painting a stacking context</a>.

					The <a>un-initialized value</a> of this attribute MUST be
					<code>0</code>.
				</dd>

				<dt><dfn attribute>layerY</dfn></dt>
				<dd>
					The vertical offset from the nearest <a>ancestor</a> element which
					is a <a>stacking context</a>, is <a>positioned</a>, or paints in the
					positioned phase when <a>painting a stacking context</a>.

					The <a>un-initialized value</a> of this attribute MUST be
					<code>0</code>.
				</dd>

				<dt><dfn attribute>ctrlKey</dfn></dt>
				<dd>
					Refer to the {{KeyboardEvent}}'s {{KeyboardEvent/ctrlKey}} attribute.

					The <a>un-initialized value</a> of this attribute MUST be
					<code>false</code>.
				</dd>

				<dt><dfn attribute>shiftKey</dfn></dt>
				<dd>
					Refer to the {{KeyboardEvent}}'s {{KeyboardEvent/shiftKey}} attribute.

					The <a>un-initialized value</a> of this attribute MUST be
					<code>false</code>.
				</dd>

				<dt><dfn attribute>altKey</dfn></dt>
				<dd>
					Refer to the {{KeyboardEvent}}'s {{KeyboardEvent/altKey}} attribute.

					The <a>un-initialized value</a>
					of this attribute MUST be <code>false</code>.
				</dd>

				<dt><dfn attribute>metaKey</dfn></dt>
				<dd>
					Refer to the {{KeyboardEvent}}'s {{KeyboardEvent/metaKey}} attribute.

					The <a>un-initialized value</a>
					of this attribute MUST be <code>false</code>.
				</dd>

				<dt><dfn attribute>button</dfn></dt>
				<dd>
					During mouse events caused by the depression or release of a mouse button,
					{{MouseEvent/button}} MUST be used to indicate which pointer device button
					changed state.

					The value of the {{MouseEvent/button}}
					attribute MUST be as follows:

					*	<code>0</code> MUST indicate the primary button of the device
						(in general, the left button  or the only button on single-button devices,
						used to activate a user interface control or select text) or the
						un-initialized value.
					*	<code>1</code> MUST indicate the auxiliary button
						(in general, the middle button, often combined with a mouse wheel).
					*	<code>2</code> MUST indicate the secondary button
						(in general, the right button, often used to display a context menu).
					*	<code>3</code> MUST indicate the X1 (back) button.
					*	<code>4</code> MUST indicate the X2 (forward) button.

					Some pointing devices provide or simulate more button states, and values higher than
					<code>2</code> or lower than <code>0</code> MAY be used to represent such buttons.

					<p class="note">
					The value of {{MouseEvent/button}} is not updated for events not caused by the
					depression/release of a mouse button.
					In these scenarios, take care not to interpret the value <code>0</code> as the
					left button, but rather as the <a>un-initialized value</a>.
					</p>

					<p class="note">
					Some <a>default actions</a> related
					to events such as <a><code>mousedown</code></a> and
					<a><code>mouseup</code></a> depend on the specific mouse
					button in use.
					</p>

					The <a>un-initialized value</a>
					of this attribute MUST be <code>0</code>.
				</dd>

				<dt><dfn attribute>buttons</dfn></dt>
				<dd>
					During any mouse events, {{MouseEvent/buttons}} MUST be used to
					indicate which combination of mouse buttons are currently being
					pressed, expressed as a bitmask.

					<p class="note">
					Though similarly named, the values for the
					{{MouseEvent/buttons}} attribute and the {{MouseEvent/button}}
					attribute are very different. The value of {{MouseEvent/button}}
					is assumed to be valid during <a><code>mousedown</code></a> / <a><code>mouseup</code></a>
					event handlers, whereas the {{MouseEvent/buttons}} attribute
					reflects the state of the mouse's buttons for any trusted
					{{MouseEvent}} object (while it is being dispatched), because it
					can represent the "no button currently active" state (0).
					</p>

					The value of the {{MouseEvent/buttons}}
					attribute MUST be as follows:

					*	<code>0</code> MUST indicate no button is currently active.
					*	<code>1</code> MUST indicate the primary button of the device
						(in general, the left button or the only button on single-button devices,
						used to activate a user interface control or select text).
					*	<code>2</code> MUST indicate the secondary button
						(in general, the right button, often used to display a context menu), if present.
					*	<code>4</code> MUST indicate the auxiliary button
						(in general, the middle button, often combined with a mouse wheel).

					Some pointing devices provide or simulate more buttons. To
					represent such buttons, the value MUST be doubled for each
					successive button (in the binary series <code>8</code>,
					<code>16</code>, <code>32</code>, ... ).

					<p class="note">
					Because the sum of any set of button values is a unique number,
					a content author can use a bitwise operation to determine how
					many buttons are currently being pressed and which buttons they
					are, for an arbitrary number of mouse buttons on a device. For
					example, the value <code>3</code> indicates that the left and
					right button are currently both pressed, while the value
					<code>5</code> indicates that the left and middle button are
					currently both pressed.

					<p class="note">
					Some <a>default actions</a> related to events such as
					<a><code>mousedown</code></a> and <a><code>mouseup</code></a> depend on the specific mouse
					button in use.
					</p>

					The <a>un-initialized value</a>
					of this attribute MUST be <code>0</code>.
				</dd>

				<dt><dfn attribute>relatedTarget</dfn></dt>
				<dd>
					Used to identify a secondary {{EventTarget}} related to a UI event, depending on the type of event.

					The <a>un-initialized value</a> of this attribute MUST be <code>null</code>.
				</dd>

				<dt><dfn method>getModifierState(keyArg)</dfn></dt>
				<dd>
					<p class="intro-dom">Introduced in this specification</p>

					Queries the state of a modifier using a key value.

					Returns <code>true</code> if it is a modifier key and the
					modifier is activated, <code>false</code> otherwise.

					<dl class="parameters">
						<dt>DOMString keyArg</dt>
						<dd>
							Refer to the {{KeyboardEvent}}'s {{KeyboardEvent/getModifierState()}}
							method for a description of this parameter.
						</dd>
					</dl>
				</dd>
			</dl>

		<h4 id="idl-mouseeventinit">MouseEventInit</h4>

			<pre class="idl">
			dictionary MouseEventInit : EventModifierInit {
				long screenX = 0;
				long screenY = 0;
				long clientX = 0;
				long clientY = 0;

				short button = 0;
				unsigned short buttons = 0;
				EventTarget? relatedTarget = null;
			};
			</pre>

			<dl dfn-for="MouseEventInit">
				<dt><dfn dict-member>screenX</dfn></dt>
				<dd>
					Initializes the {{MouseEvent/screenX}} attribute of the {{MouseEvent}}
					object to the desired horizontal relative position of the mouse
					pointer on the user's screen.

					Initializing the event object to the given mouse position must
					not move the user's mouse pointer to the initialized position.
				</dd>

				<dt><dfn dict-member>screenY</dfn></dt>
				<dd>
					Initializes the {{MouseEvent/screenY}} attribute of the {{MouseEvent}}
					object to the desired vertical relative position of the mouse
					pointer on the user's screen.

					Initializing the event object to the given mouse position must
					not move the user's mouse pointer to the initialized position.
				</dd>

				<dt><dfn dict-member>clientX</dfn></dt>
				<dd>
					Initializes the {{MouseEvent/clientX}} attribute of the {{MouseEvent}}
					object to the desired horizontal position of the mouse pointer
					relative to the client window of the user's browser.

					Initializing the event object to the given mouse position must
					not move the user's mouse pointer to the initialized position.
				</dd>

				<dt><dfn dict-member>clientY</dfn></dt>
				<dd>
					Initializes the {{MouseEvent/clientY}} attribute of the {{MouseEvent}}
					object to the desired vertical position of the mouse pointer
					relative to the client window of the user's browser.

					Initializing the event object to the given mouse position must
					not move the user's mouse pointer to the initialized position.
				</dd>

				<dt><dfn dict-member>button</dfn></dt>
				<dd>
					Initializes the {{MouseEvent/button}} attribute of the {{MouseEvent}}
					object to a number representing the desired state of the button(s)
					of the mouse.

					<p class="note">
					The value 0 is used to represent
					the primary mouse button, 1 is used to represent the auxiliary/middle
					mouse button, and 2 to represent the right mouse button.
					Numbers greater than 2 are also possible, but are not specified
					in this document.
					</p>
				</dd>

				<dt><dfn dict-member>buttons</dfn></dt>
				<dd>
					Initializes the {{MouseEvent/buttons}} attribute of the {{MouseEvent}}
					object to a number representing one <em>or more</em> of the button(s) of the mouse
					that are to be considered active.

					<p class="note">
					The {{MouseEvent/buttons}}
					attribute is a bit-field. If a mask value of 1 is true when applied to
					the value of the bit field, then the primary mouse button is down. If a
					mask value of 2 is true when applied to the value of the bit field, then
					the right mouse button is down. If a mask value of 4 is true when applied
					to the value of the bit field, then the auxiliary/middle button is down.
					</p>

					<p class="example">
					In JavaScript, to initialize the
					{{MouseEvent/buttons}} attribute as if the right (2) and middle
					button (4) were being pressed simultaneously, the buttons value
					can be assigned as either:<br/>
					<code>&nbsp;&nbsp;{ buttons: 2 | 4 }</code></br/>
					or:<br/>
					<code>&nbsp;&nbsp;{ buttons: 6 }</code>
					</p>
				</dd>

				<dt><dfn dict-member>relatedTarget</dfn></dt>
				<dd>
					The <code>relatedTarget</code> should be initialized to the element
					whose bounds the mouse pointer just left (in the case of a
					<em>mouseover</em> or <em>mouseenter</em> event) or the element
					whose bounds the mouse pointer is entering (in the case of a
					<em>mouseout</em> or <em>mouseleave</em>
					or <em>focusout</em> event). For other events, this value need not
					be assigned (and will default to null).
				</dd>

			</dl>

	<p id="current-click-count">Implementations MUST maintain the <em>current
	click count</em> when generating mouse events. This MUST be a non-negative
	integer indicating the number of consecutive clicks of a pointing device
	button within a specific time. The delay after which the count resets is
	specific to the environment configuration.
	</p>

	<h3 id="event-modifier-initializers">Event Modifier Initializers</h3>

		The {{MouseEvent}} and {{KeyboardEvent}} interfaces share a set of
		keyboard modifier attributes and support a mechanism for retrieving
		additional modifier states. The following dictionary enables authors to
		initialize keyboard modifier attributes of the {{MouseEvent}} and
		{{KeyboardEvent}} interfaces, as well as the additional modifier states
		queried via {{KeyboardEvent/getModifierState()}}. The steps for
		constructing events using this dictionary are defined in the
		<a href="#event-constructors">event constructors</a> section.

		<pre class="idl">
		dictionary EventModifierInit : UIEventInit {
			boolean ctrlKey = false;
			boolean shiftKey = false;
			boolean altKey = false;
			boolean metaKey = false;

			boolean modifierAltGraph = false;
			boolean modifierCapsLock = false;
			boolean modifierFn = false;
			boolean modifierFnLock = false;
			boolean modifierHyper = false;
			boolean modifierNumLock = false;
			boolean modifierScrollLock = false;
			boolean modifierSuper = false;
			boolean modifierSymbol = false;
			boolean modifierSymbolLock = false;
		};
		</pre>

		<dl dfn-for="EventModifierInit">
			<dt><dfn dict-member>ctrlKey</dfn></dt>
			<dd>
				Initializes the <code>ctrlKey</code> attribute of the
				{{MouseEvent}} or {{KeyboardEvent}}
				objects to <code>true</code> if the <code class="keycap">Control</code>
				key modifier is to be considered active,
				<code>false</code> otherwise.

				When <code>true</code>, implementations must also initialize the event object's key modifier
				state such that calls to the
				{{MouseEvent/getModifierState()}} or
				{{KeyboardEvent/getModifierState()}}
				when provided with the parameter <code class="keycap">Control</code>
				must return <code>true</code>.
			</dd>

			<dt><dfn dict-member>shiftKey</dfn></dt>
			<dd>
				Initializes the <code>shiftKey</code> attribute of the
				{{MouseEvent}} or {{KeyboardEvent}}
				objects to <code>true</code> if the <code class="keycap">Shift</code>
				key modifier is to be considered active, <code>false</code> otherwise.

				When <code>true</code>, implementations must also initialize the event object's key modifier
				state such that calls to the
				{{MouseEvent/getModifierState()}} or
				{{KeyboardEvent/getModifierState()}}
				when provided with the parameter <code class="keycap">Shift</code> must
				return <code>true</code>.
			</dd>

			<dt><dfn dict-member>altKey</dfn></dt>
			<dd>
				Initializes the <code>altKey</code> attribute of the
				{{MouseEvent}} or {{KeyboardEvent}}
				objects to <code>true</code> if the <code class="keycap">Alt</code>
				(alternative) (or <code class="keycap">Option</code>) key modifier
				is to be considered active, <code>false</code> otherwise.

				When <code>true</code>, implementations must also initialize the event object's key modifier
				state such that calls to the
				{{MouseEvent/getModifierState()}} or
				{{KeyboardEvent/getModifierState()}}
				when provided with the parameter <code class="keycap">Alt</code> must
				return <code>true</code>.
			</dd>

			<dt><dfn dict-member>metaKey</dfn></dt>
			<dd>
				Initializes the <code>metaKey</code> attribute of the
				{{MouseEvent}} or {{KeyboardEvent}}
				objects to <code>true</code> if the <code class="keycap">Meta</code>
				key modifier is to be considered active, <code>false</code> otherwise.

				When <code>true</code>, implementations must also initialize the event object's
				key modifier state such that calls to the
				{{MouseEvent/getModifierState()}} or
				{{KeyboardEvent/getModifierState()}}
				when provided with either the parameter <code class="keycap">Meta</code>
				must return <code>true</code>.
			</dd>

			<dt><dfn dict-member>modifierAltGraph</dfn></dt>
			<dd>
				Initializes the event object's key modifier state such that calls to the
				{{MouseEvent/getModifierState()}} or
				{{KeyboardEvent/getModifierState()}}
				when provided with the parameter <code class="keycap">AltGraph</code> must
				return <code>true</code>.
			</dd>

			<dt><dfn dict-member>modifierCapsLock</dfn></dt>
			<dd>
				Initializes the event object's key modifier state such that calls to the
				{{MouseEvent/getModifierState()}} or
				{{KeyboardEvent/getModifierState()}}
				when provided with the parameter <code class="keycap">CapsLock</code> must
				return <code>true</code>.
			</dd>

			<dt><dfn dict-member>modifierFn</dfn></dt>
			<dd>
				Initializes the event object's key modifier state such that calls to the
				{{MouseEvent/getModifierState()}} or
				{{KeyboardEvent/getModifierState()}}
				when provided with the parameter <code class="keycap">Fn</code> must
				return <code>true</code>.
			</dd>

			<dt><dfn dict-member>modifierFnLock</dfn></dt>
			<dd>
				Initializes the event object's key modifier state such that calls to the
				{{MouseEvent/getModifierState()}} or
				{{KeyboardEvent/getModifierState()}}
				when provided with the parameter <code class="keycap">FnLock</code> must
				return <code>true</code>.
			</dd>

			<dt><dfn dict-member>modifierHyper</dfn></dt>
			<dd>
				Initializes the event object's key modifier state such that calls to the
				{{MouseEvent/getModifierState()}} or
				{{KeyboardEvent/getModifierState()}}
				when provided with the parameter <code class="keycap">Hyper</code> must
				return <code>true</code>.
			</dd>

			<dt><dfn dict-member>modifierNumLock</dfn></dt>
			<dd>
				Initializes the event object's key modifier state such that calls to the
				{{MouseEvent/getModifierState()}} or
				{{KeyboardEvent/getModifierState()}}
				when provided with the parameter <code class="keycap">NumLock</code> must
				return <code>true</code>.
			</dd>

			<dt><dfn dict-member>modifierScrollLock</dfn></dt>
			<dd>
				Initializes the event object's key modifier state such that calls to the
				{{MouseEvent/getModifierState()}} or
				{{KeyboardEvent/getModifierState()}}
				when provided with the parameter <code class="keycap">ScrollLock</code> must
				return <code>true</code>.
			</dd>

			<dt><dfn dict-member>modifierSuper</dfn></dt>
			<dd>
				Initializes the event object's key modifier state such that calls to the
				{{MouseEvent/getModifierState()}} or
				{{KeyboardEvent/getModifierState()}}
				when provided with the parameter <code class="keycap">Super</code> must
				return <code>true</code>.
			</dd>

			<dt><dfn dict-member>modifierSymbol</dfn></dt>
			<dd>
				Initializes the event object's key modifier state such that calls to the
				{{MouseEvent/getModifierState()}} or
				{{KeyboardEvent/getModifierState()}}
				when provided with the parameter <code class="keycap">Symbol</code> must
				return <code>true</code>.
			</dd>

			<dt><dfn dict-member>modifierSymbolLock</dfn></dt>
			<dd>
				Initializes the event object's key modifier state such that calls to the
				{{MouseEvent/getModifierState()}} or
				{{KeyboardEvent/getModifierState()}}
				when provided with the parameter <code class="keycap">SymbolLock</code> must
				return <code>true</code>.
			</dd>
		</dl>

	<h3 id="events-mouseevent-event-order">Mouse Event Order</h3>

		Certain mouse events defined in this specification MUST occur in a set
		order relative to one another. The following shows the event sequence
		that MUST occur when a pointing device's cursor is moved over an element:

<table class="event-sequence-table">
<thead><tr><td class="cell-number"></th><th>Event Type</th><th style="text-align:center">Element</th><th>Notes</th></tr></thead>
<tr><td class="cell-number">1</td><td><a><code>mousemove</code></a></td><td style="text-align:center"></td><td></td></tr>
<tr><td class="cell-number"></td><td></td><td style="text-align:center"></td><td><em>Pointing device is moved into element A...</em></td></tr>
<tr><td class="cell-number">2</td><td><a><code>mouseover</code></a></td><td style="text-align:center">A</td><td></td></tr>
<tr><td class="cell-number">3</td><td><a><code>mouseenter</code></a></td><td style="text-align:center">A</td><td></td></tr>
<tr><td class="cell-number">4</td><td><a><code>mousemove</code></a></td><td style="text-align:center">A</td><td>Multiple <a><code>mousemove</code></a> events</td></tr>
<tr><td class="cell-number"></td><td></td><td style="text-align:center"></td><td><em>Pointing device is moved out of element A...</em></td></tr>
<tr><td class="cell-number">5</td><td><a><code>mouseout</code></a></td><td style="text-align:center">A</td><td></td></tr>
<tr><td class="cell-number">6</td><td><a><code>mouseleave</code></a></td><td style="text-align:center">A</td><td></td></tr>
</table>

		When a pointing device is moved into an element <em>A</em>, and then
		into a nested element <em>B</em> and then back out again, the following
		sequence of events MUST occur:

<table class="event-sequence-table">
<thead><tr><td class="cell-number"></th><th>Event Type</th><th style="text-align:center">Element</th><th>Notes</th></tr></thead>
<tr><td class="cell-number">1</td><td><a><code>mousemove</code></a></td><td style="text-align:center"></td><td></td></tr>
<tr><td class="cell-number"></td><td></td><td style="text-align:center"></td><td><em>Pointing device is moved into element A...</em></td></tr>
<tr><td class="cell-number">2</td><td><a><code>mouseover</code></a></td><td style="text-align:center">A</td><td></td></tr>
<tr><td class="cell-number">3</td><td><a><code>mouseenter</code></a></td><td style="text-align:center">A</td><td></td></tr>
<tr><td class="cell-number">4</td><td><a><code>mousemove</code></a></td><td style="text-align:center">A</td><td>Multiple <a><code>mousemove</code></a> events</td></tr>
<tr><td class="cell-number"></td><td></td><td style="text-align:center"></td><td><em>Pointing device is moved into nested element B...</em></td></tr>
<tr><td class="cell-number">5</td><td><a><code>mouseout</code></a></td><td style="text-align:center">A</td><td></td></tr>
<tr><td class="cell-number">6</td><td><a><code>mouseover</code></a></td><td style="text-align:center">B</td><td></td></tr>
<tr><td class="cell-number">7</td><td><a><code>mouseenter</code></a></td><td style="text-align:center">B</td><td></td></tr>
<tr><td class="cell-number">8</td><td><a><code>mousemove</code></a></td><td style="text-align:center">B</td><td>Multiple <a><code>mousemove</code></a> events</td></tr>
<tr><td class="cell-number"></td><td></td><td style="text-align:center"></td><td><em>Pointing device is moved from element B into A...</em></td></tr>
<tr><td class="cell-number">9</td><td><a><code>mouseout</code></a></td><td style="text-align:center">B</td><td></td></tr>
<tr><td class="cell-number">10</td><td><a><code>mouseleave</code></a></td><td style="text-align:center">B</td><td></td></tr>
<tr><td class="cell-number">11</td><td><a><code>mouseover</code></a></td><td style="text-align:center">A</td><td></td></tr>
<tr><td class="cell-number">12</td><td><a><code>mousemove</code></a></td><td style="text-align:center">A</td><td>Multiple <a><code>mousemove</code></a> events</td></tr>
<tr><td class="cell-number"></td><td></td><td style="text-align:center"></td><td><em>Pointing device is moved out of element A...</em></td></tr>
<tr><td class="cell-number">13</td><td><a><code>mouseout</code></a></td><td style="text-align:center">A</td><td></td></tr>
<tr><td class="cell-number">14</td><td><a><code>mouseleave</code></a></td><td style="text-align:center">A</td><td></td></tr>
</table>

		Sometimes elements can be visually overlapped using CSS. In the
		following example, three elements labeled A, B, and C all have the same
		dimensions and absolute position on a web page. Element C is a child of
		B, and B is a child of A in the DOM:

		<figure id="figure-mouse-event-stacked-elements">
			<img src='images/stacked-event-mouse-dispatch.svg' height="250" alt="Graphical representation of three stacked elements all on top of each other. The bottom element is labeled A and the top element is C" />
			<figcaption>Graphical representation of three stacked elements all on top of each other, with the pointing device moving over the stack.</figcaption>
		</figure>

		When the pointing device is moved from outside the element stack to the
		element labeled C and then moved out again, the following series of
		events MUST occur:

<table class="event-sequence-table">
<thead><tr><td class="cell-number"></th><th>Event Type</th><th style="text-align:center">Element</th><th>Notes</th></tr></thead>
<tr><td class="cell-number">1</td><td><a><code>mousemove</code></a></td><td style="text-align:center"></td><td></td></tr>
<tr><td class="cell-number"></td><td></td><td style="text-align:center"></td><td><em>Pointing device is moved into element C, the topmost element in the stack</em></td></tr>
<tr><td class="cell-number">2</td><td><a><code>mouseover</code></a></td><td style="text-align:center">C</td><td></td></tr>
<tr><td class="cell-number">3</td><td><a><code>mouseenter</code></a></td><td style="text-align:center">A</td><td></td></tr>
<tr><td class="cell-number">4</td><td><a><code>mouseenter</code></a></td><td style="text-align:center">B</td><td></td></tr>
<tr><td class="cell-number">5</td><td><a><code>mouseenter</code></a></td><td style="text-align:center">C</td><td></td></tr>
<tr><td class="cell-number">6</td><td><a><code>mousemove</code></a></td><td style="text-align:center">C</td><td>Multiple <a><code>mousemove</code></a> events</td></tr>
<tr><td class="cell-number"></td><td></td><td style="text-align:center"></td><td><em>Pointing device is moved out of element C...</em></td></tr>
<tr><td class="cell-number">7</td><td><a><code>mouseout</code></a></td><td style="text-align:center">C</td><td></td></tr>
<tr><td class="cell-number">8</td><td><a><code>mouseleave</code></a></td><td style="text-align:center">C</td><td></td></tr>
<tr><td class="cell-number">9</td><td><a><code>mouseleave</code></a></td><td style="text-align:center">B</td><td></td></tr>
<tr><td class="cell-number">10</td><td><a><code>mouseleave</code></a></td><td style="text-align:center">A</td><td></td></tr>
</table>

		<p class="note">
		The <a><code>mouseover</code></a>/<a><code>mouseout</code></a> events are only fired once, while
		<a><code>mouseenter</code></a>/<a><code>mouseleave</code></a> events are fired three times (once
		to each element).
		</p>

		The following is the typical sequence of events when a button associated
		with a pointing device (e.g., a mouse button or trackpad) is pressed and
		released over an element:

<table class="event-sequence-table">
<thead><tr><td class="cell-number"></th><th>Event Type</th><th>Notes</th></tr></thead>
<tr><td class="cell-number">1</td><td><a><code>mousedown</code></a></td><td></td></tr>
<tr><td class="cell-number">2</td><td><a><code>mousemove</code></a></td><td>OPTIONAL, multiple events, some limits</td></tr>
<tr><td class="cell-number">3</td><td><a><code>mouseup</code></a></td><td></td></tr>
<tr><td class="cell-number">4</td><td><a><code>click</code></a></td><td></td></tr>
<tr><td class="cell-number">5</td><td><a><code>mousemove</code></a></td><td>OPTIONAL, multiple events, some limits</td></tr>
<tr><td class="cell-number">6</td><td><a><code>mousedown</code></a></td><td></td></tr>
<tr><td class="cell-number">7</td><td><a><code>mousemove</code></a></td><td>OPTIONAL, multiple events, some limits</td></tr>
<tr><td class="cell-number">8</td><td><a><code>mouseup</code></a></td><td></td></tr>
<tr><td class="cell-number">9</td><td><a><code>click</code></a></td><td></td></tr>
<tr><td class="cell-number">10</td><td><a><code>dblclick</code></a></td><td></td></tr>
</table>

		<p class="note">
		The lag time, degree, distance, and number of <a><code>mousemove</code></a> events
		allowed between the <a><code>mousedown</code></a> and <a><code>mouseup</code></a> events while
		still firing a <a><code>click</code></a> or <a><code>dblclick</code></a> event will be
		implementation-, device-, and platform-specific. This tolerance can aid
		users that have physical disabilities like unsteady hands when these
		users interact with a pointing device.
		</p>

		Each implementation will determine the appropriate <a>hysteresis</a>
		tolerance, but in general SHOULD fire <a><code>click</code></a> and <a><code>dblclick</code></a>
		events when the event target of the associated <a><code>mousedown</code></a> and
		<a><code>mouseup</code></a> events is the same element with no <a><code>mouseout</code></a> or
		<a><code>mouseleave</code></a> events intervening, and SHOULD fire <a><code>click</code></a> and
		<a><code>dblclick</code></a> events on the nearest common inclusive ancestor when the
		associated <a><code>mousedown</code></a> and <a><code>mouseup</code></a> event targets are
		different.

		<p class="example">
		If a <a><code>mousedown</code></a> event was targeted at an HTML document's <a>body
		element</a>, and the corresponding <a><code>mouseup</code></a> event was targeted at
		the <a>root element</a>, then the <a><code>click</code></a> event will be dispatched
		to the <a>root element</a>, since it is the nearest common inclusive
		ancestor.
		</p>

		If the <a>event target</a> (e.g. the target element) is removed from the
		DOM during the mouse events sequence, the remaining events of the
		sequence MUST NOT be fired on that element.

		<p class="example">
		If the target element is removed from the DOM as the result of a
		<a><code>mousedown</code></a> event, no events for that element will be dispatched
		for <a><code>mouseup</code></a>, <a><code>click</code></a>, or <a><code>dblclick</code></a>, nor any default
		activation events. However, the <a><code>mouseup</code></a> event will still be
		dispatched on the element that is exposed to the mouse after the removal
		of the initial target element. Similarly, if the target element is
		removed from the DOM during the dispatch of a <a><code>mouseup</code></a> event, the
		<a><code>click</code></a> and subsequent events will not be dispatched.
		</p>

	<h3 id="events-mouse-types">Mouse Event Types</h3>

		The Mouse event types are listed below. In the case of nested elements,
		mouse event types are always targeted at the most deeply nested element.
		Ancestors of the targeted element MAY use bubbling to obtain
		notification of mouse events which occur within its descendent elements.

		<h4 id="event-type-auxclick"><dfn>auxclick</dfn></h4>

<table class="event-definition">
<tr><th>Type</th><td><strong><code>auxclick</code></strong></td></tr>
<tr><th>Interface</th><td>{{PointerEvent}}</td></tr>
<tr><th>Sync / Async</th><td>Sync</td></tr>
<tr><th>Bubbles</th><td>Yes</td></tr>
<tr><th>Trusted Targets</th><td><code>Element</code></td></tr>
<tr><th>Cancelable</th><td>Yes</td></tr>
<tr><th>Composed</th><td>Yes</td></tr>
<tr><th>Default action</th><td>Varies</td></tr>
<tr><th>Context<br/> (trusted events)</th><td><ul> <li>{{Event}}.{{Event/target}} : <a>topmost event target</a></li> <li>{{UIEvent}}.{{UIEvent/view}} : <a><code>Window</code></a></li> <li>{{UIEvent}}.{{UIEvent/detail}} : indicates the <a href="#current-click-count">current click count</a>; the attribute value MUST be <code>1</code> when the user begins this action and increments by <code>1</code> for each click.</li> <li>{{MouseEvent}}.{{MouseEvent/screenX}} : value based on the pointer position on the screen</li> <li>{{MouseEvent}}.{{MouseEvent/screenY}} : value based on the pointer position on the screen</li> <li>{{MouseEvent}}.{{MouseEvent/clientX}} : value based on the pointer position within the viewport</li> <li>{{MouseEvent}}.{{MouseEvent/clientY}} : value based on the pointer position within the viewport</li> <li>{{MouseEvent}}.{{MouseEvent/layerX}} : value based on the pointer position within the containing element</li> <li>{{MouseEvent}}.{{MouseEvent/layerY}} : value based on the pointer position within the containing element</li> <li>{{MouseEvent}}.{{MouseEvent/altKey}} : <code>true</code> if <code class="keycap">Alt</code> modifier was active, otherwise <code>false</code></li> <li>{{MouseEvent}}.{{MouseEvent/ctrlKey}} : <code>true</code> if <code class="keycap">Control</code> modifier was active, otherwise <code>false</code></li> <li>{{MouseEvent}}.{{MouseEvent/shiftKey}} : <code>true</code> if <code class="keycap">Shift</code> modifier was active, otherwise <code>false</code></li> <li>{{MouseEvent}}.{{MouseEvent/metaKey}} : <code>true</code> if <code class="keycap">Meta</code> modifier was active, otherwise <code>false</code></li> <li>{{MouseEvent}}.{{MouseEvent/button}} : value based on current button pressed</li> <li>{{MouseEvent}}.{{MouseEvent/buttons}} : value based on all buttons currently depressed, <code>0</code> if no buttons pressed</li> <li>{{MouseEvent}}.{{MouseEvent/relatedTarget}} : <code>null</code></li> <li>For {{PointerEvent}} specific attributes, see the [[!pointerevents3]] spec.</li> </ul></td></tr>
</table>

			The <a><code>auxclick</code></a> event type MUST be dispatched on the <a>topmost
			event target</a> indicated by the pointer, when the user presses
			down and releases the non-primary pointer button, or otherwise activates
			the pointer in a manner that simulates such an action. The actuation
			method of the mouse button depends upon the pointer device and the
			environment configuration, e.g., it MAY depend on the screen
			location or the delay between the press and release of the pointing
			device button.

			The <a><code>auxclick</code></a> event should only be fired for the non-primary pointer
			buttons (i.e., when {{MouseEvent/button}} value is not <code>0</code>,
			{{MouseEvent/buttons}} value is greater than <code>1</code>). The primary button
			(like the left button on a standard mouse) MUST NOT fire
			<a><code>auxclick</code></a> events. See <a><code>click</code></a> for a corresponding event that
			is associated with the primary button.

			The <a><code>auxclick</code></a> event MAY be preceded by the <a><code>mousedown</code></a> and
			<a><code>mouseup</code></a> events on the same element, disregarding changes
			between other node types (e.g., text nodes).  Depending upon the
			environment configuration, the <a><code>auxclick</code></a> event MAY be dispatched
			if one or more of the event types <a><code>mouseover</code></a>,
			<a><code>mousemove</code></a>, and <a><code>mouseout</code></a> occur between the press and
			release of the pointing device button.

			The <a>default action</a> of the <a><code>auxclick</code></a> event type varies
			based on the <a>event target</a> of the event and the value of the
			{{MouseEvent/button}} or {{MouseEvent/buttons}} attributes. Typical
			<a>default actions</a> of the <a><code>auxclick</code></a> event type are as follows:

			*	If the <a>event target</a> has associated activation behavior,
				the <a>default action</a> MUST be to execute that activation
				behavior (see [[#event-flow-activation]]).

			<p class="example">
			Receiving and handling auxclick for the middle button.<br/>
<code class="pre">myLink.addEventListener("auxclick", function(e) {
	  if (e.button === 1) {
	    // This would prevent the default behavior which is for example
	    // opening a new tab when middle clicking on a link.
	    e.preventDefault();
	    // Do something else to handle middle button click like taking
	    // care of opening link or non-link buttons in new tabs in a way
	    // that fits the app. Other actions like closing a tab in a tab-strip
	    // which should be done on the click action can be done here too.
	  }
	});
</code>
			</p>

			<p class="note">
			In the case of right button, the <a><code>auxclick</code></a> event is dispatched after
			any <a><code>contextmenu</code></a> event. Note that some user agents swallow all input
			events while a context menu is being displayed, so auxclick may not be
			available to applications in such scenarios.
			See <a href="#example-auxclick-right">this example</a> for more clarification.
			</p>

			<p id="example-auxclick-right" class="example">
			Receiving and handling auxclick for the right button<br/>
<code class="pre">myDiv.addEventListener("contextmenu", function(e) {
	  // This call makes sure no context menu is shown
	  // to interfere with page receiving the events.
	  e.preventDefault();
	});
	myDiv.addEventListener("auxclick", function(e) {
	  if (e.button === 2) {
	    // Do something else to handle right button click like opening a
	    // customized context menu inside the app.
	  }
	});
</code>
			</p>

		<h4 id="event-type-click"><dfn>click</dfn></h4>

<table class="event-definition">
<tr><th>Type</th><td><strong><code>click</code></strong></td></tr>
<tr><th>Interface</th><td>{{PointerEvent}}</td></tr>
<tr><th>Sync / Async</th><td>Sync</td></tr>
<tr><th>Bubbles</th><td>Yes</td></tr>
<tr><th>Trusted Targets</th><td><code>Element</code></td></tr>
<tr><th>Cancelable</th><td>Yes</td></tr>
<tr><th>Composed</th><td>Yes</td></tr>
<tr><th>Default action</th><td>Varies</td></tr>
<tr><th>Context<br/> (trusted events)</th><td><ul> <li>{{Event}}.{{Event/target}} : <a>topmost event target</a></li> <li>{{UIEvent}}.{{UIEvent/view}} : <a><code>Window</code></a></li> <li>{{UIEvent}}.{{UIEvent/detail}} : indicates the <a href="#current-click-count">current click count</a>; the attribute value MUST be <code>1</code> when the user begins this action and increments by <code>1</code> for each click.</li> <li>{{MouseEvent}}.{{MouseEvent/screenX}} : value based on the pointer position on the screen</li> <li>{{MouseEvent}}.{{MouseEvent/screenY}} : value based on the pointer position on the screen</li> <li>{{MouseEvent}}.{{MouseEvent/clientX}} : value based on the pointer position within the viewport</li> <li>{{MouseEvent}}.{{MouseEvent/clientY}} : value based on the pointer position within the viewport</li> <li>{{MouseEvent}}.{{MouseEvent/layerX}} : value based on the pointer position within the containing element</li> <li>{{MouseEvent}}.{{MouseEvent/layerY}} : value based on the pointer position within the containing element</li> <li>{{MouseEvent}}.{{MouseEvent/altKey}} : <code>true</code> if <code class="keycap">Alt</code> modifier was active, otherwise <code>false</code></li> <li>{{MouseEvent}}.{{MouseEvent/ctrlKey}} : <code>true</code> if <code class="keycap">Control</code> modifier was active, otherwise <code>false</code></li> <li>{{MouseEvent}}.{{MouseEvent/shiftKey}} : <code>true</code> if <code class="keycap">Shift</code> modifier was active, otherwise <code>false</code></li> <li>{{MouseEvent}}.{{MouseEvent/metaKey}} : <code>true</code> if <code class="keycap">Meta</code> modifier was active, otherwise <code>false</code></li> <li>{{MouseEvent}}.{{MouseEvent/button}} : value based on current button pressed</li> <li>{{MouseEvent}}.{{MouseEvent/buttons}} : value based on all buttons currently depressed, <code>0</code> if no buttons pressed</li> <li>{{MouseEvent}}.{{MouseEvent/relatedTarget}} : <code>null</code></li> <li>For {{PointerEvent}} specific attributes, see the [[!pointerevents3]] spec.</li> </ul></td></tr>
</table>

			The <a><code>click</code></a> event type MUST be dispatched on the <a>topmost
			event target</a> indicated by the pointer, when the user presses
			down and releases the primary pointer button, or otherwise activates
			the pointer in a manner that simulates such an action. The actuation
			method of the mouse button depends upon the pointer device and the
			environment configuration, e.g., it MAY depend on the screen
			location or the delay between the press and release of the pointing
			device button.

			The <a><code>click</code></a> event should only be fired for the primary pointer
			button (i.e., when {{MouseEvent/button}} value is <code>0</code>,
			{{MouseEvent/buttons}} value is <code>1</code>). Secondary buttons
			(like the middle or right button on a standard mouse) MUST NOT fire
			<a><code>click</code></a> events. See <a><code>auxclick</code></a> for a corresponding event that
			is associated with the non-primary buttons.

			The <a><code>click</code></a> event MAY be preceded by the <a><code>mousedown</code></a> and
			<a><code>mouseup</code></a> events on the same element, disregarding changes
			between other node types (e.g., text nodes).  Depending upon the
			environment configuration, the <a><code>click</code></a> event MAY be dispatched
			if one or more of the event types <a><code>mouseover</code></a>,
			<a><code>mousemove</code></a>, and <a><code>mouseout</code></a> occur between the press and
			release of the pointing device button.  The <a><code>click</code></a> event MAY
			also be followed by the <a><code>dblclick</code></a> event.

			<p class="example">
			If a user mouses down on a text node child of a
			<code>&lt;p&gt;</code> element which has been styled with a large
			line-height, shifts the mouse slightly such that it is no longer
			over an area containing text but is still within the containing
			block of that <code>&lt;p&gt;</code> element (i.e., the pointer is
			between lines of the same text block, but not over the text node per
			se), then subsequently mouses up, this will likely still trigger a
			<a><code>click</code></a> event (if it falls within the normal temporal
			<a>hysteresis</a> for a <a><code>click</code></a>), since the user has stayed
			within the scope of the same element. Note that user-agent-generated
			mouse events are not dispatched on text nodes.
			</p>

			In addition to being associated with pointer devices, the
			<a><code>click</code></a> event type MUST be dispatched as part of an element
			activation, as described in [[#event-flow-activation]].

			<p class="note">
			For maximum accessibility, content authors are encouraged to use the
			<a><code>click</code></a> event type when defining activation behavior for custom
			controls, rather than other pointing-device event types such as
			<a><code>mousedown</code></a> or <a><code>mouseup</code></a>, which are more device-specific.
			Though the <a><code>click</code></a> event type has its origins in pointer
			devices (e.g., a mouse), subsequent implementation enhancements have
			extended it beyond that association, and it can be considered a
			device-independent event type for element activation.
			</p>

			The <a>default action</a> of the <a><code>click</code></a> event type varies
			based on the <a>event target</a> of the event and the value of the
			{{MouseEvent/button}} or {{MouseEvent/buttons}} attributes. Typical
			<a>default actions</a> of the <a><code>click</code></a> event type are as follows:

			*	If the <a>event target</a> has associated activation behavior,
				the <a>default action</a> MUST be to execute that activation
				behavior (see [[#event-flow-activation]]).

			*	If the <a>event target</a> is focusable, the <a>default
				action</a> MUST be to give that element document focus.

		<h4 id="event-type-contextmenu"><dfn>contextmenu</dfn></h4>

<table class="event-definition">
<tr><th>Type</th><td><strong><code>contextmenu</code></strong></td></tr>
<tr><th>Interface</th><td>{{PointerEvent}}</td></tr>
<tr><th>Sync / Async</th><td>Sync</td></tr>
<tr><th>Bubbles</th><td>Yes</td></tr>
<tr><th>Trusted Targets</th><td><code>Element</code></td></tr>
<tr><th>Cancelable</th><td>Yes</td></tr>
<tr><th>Composed</th><td>Yes</td></tr>
<tr><th>Default action</th><td>Invoke a context menu if supported.</td></tr>
<tr><th>Context<br/> (trusted events)</th><td><ul> <li>{{Event}}.{{Event/target}} : <a>topmost event target</a></li> <li>{{UIEvent}}.{{UIEvent/view}} : <a><code>Window</code></a></li> <li>{{UIEvent}}.{{UIEvent/detail}} : 0</li> <li>{{MouseEvent}}.{{MouseEvent/screenX}} : value based on the pointer position on the screen</li> <li>{{MouseEvent}}.{{MouseEvent/screenY}} : value based on the pointer position on the screen</li> <li>{{MouseEvent}}.{{MouseEvent/clientX}} : value based on the pointer position within the viewport</li> <li>{{MouseEvent}}.{{MouseEvent/clientY}} : value based on the pointer position within the viewport</li> <li>{{MouseEvent}}.{{MouseEvent/layerX}} : value based on the pointer position within the containing element</li> <li>{{MouseEvent}}.{{MouseEvent/layerY}} : value based on the pointer position within the containing element</li> <li>{{MouseEvent}}.{{MouseEvent/altKey}} : <code>true</code> if <code class="keycap">Alt</code> modifier was active, otherwise <code>false</code></li> <li>{{MouseEvent}}.{{MouseEvent/ctrlKey}} : <code>true</code> if <code class="keycap">Control</code> modifier was active, otherwise <code>false</code></li> <li>{{MouseEvent}}.{{MouseEvent/shiftKey}} : <code>true</code> if <code class="keycap">Shift</code> modifier was active, otherwise <code>false</code></li> <li>{{MouseEvent}}.{{MouseEvent/metaKey}} : <code>true</code> if <code class="keycap">Meta</code> modifier was active, otherwise <code>false</code></li> <li>{{MouseEvent}}.{{MouseEvent/button}} : value based on current button pressed</li> <li>{{MouseEvent}}.{{MouseEvent/buttons}} : value based on all buttons currently depressed, <code>0</code> if no buttons pressed</li> <li>{{MouseEvent}}.{{MouseEvent/relatedTarget}} : <code>null</code></li> </ul></td></tr>
</table>

			A <a>user agent</a> MUST dispatch this event before invoking a context menu.

			When the <a><code>contextmenu</code></a> event is triggered by right mouse button, the
			<a><code>contextmenu</code></a> event MUST be dispatched after the <a><code>mousedown</code></a> event.

			<p class="note">
			Depending on the platform, the <a><code>contextmenu</code></a> event may be dispatched
			before or after the <a><code>mouseup</code></a> event.
			</p>

		<h4 id="event-type-dblclick"><dfn>dblclick</dfn></h4>

<table class="event-definition">
<tr><th>Type</th><td><strong><code>dblclick</code></strong></td></tr>
<tr><th>Interface</th><td>{{MouseEvent}}</td></tr>
<tr><th>Sync / Async</th><td>Sync</td></tr>
<tr><th>Bubbles</th><td>Yes</td></tr>
<tr><th>Trusted Targets</th><td><code>Element</code></td></tr>
<tr><th>Cancelable</th><td>Yes</td></tr>
<tr><th>Composed</th><td>Yes</td></tr>
<tr><th>Default action</th><td>None</td></tr>
<tr><th>Context<br/> (trusted events)</th><td><ul> <li>{{Event}}.{{Event/target}} : <a>topmost event target</a></li> <li>{{UIEvent}}.{{UIEvent/view}} : <a><code>Window</code></a></li> <li>{{UIEvent}}.{{UIEvent/detail}} : indicates the <a href="#current-click-count">current click count</a></li> <li>{{MouseEvent}}.{{MouseEvent/screenX}} : value based on the pointer position on the screen</li> <li>{{MouseEvent}}.{{MouseEvent/screenY}} : value based on the pointer position on the screen</li> <li>{{MouseEvent}}.{{MouseEvent/clientX}} : value based on the pointer position within the viewport</li> <li>{{MouseEvent}}.{{MouseEvent/clientY}} : value based on the pointer position within the viewport</li> <li>{{MouseEvent}}.{{MouseEvent/layerX}} : value based on the pointer position within the containing element</li> <li>{{MouseEvent}}.{{MouseEvent/layerY}} : value based on the pointer position within the containing element</li> <li>{{MouseEvent}}.{{MouseEvent/altKey}} : <code>true</code> if <code class="keycap">Alt</code> modifier was active, otherwise <code>false</code></li> <li>{{MouseEvent}}.{{MouseEvent/ctrlKey}} : <code>true</code> if <code class="keycap">Control</code> modifier was active, otherwise <code>false</code></li> <li>{{MouseEvent}}.{{MouseEvent/shiftKey}} : <code>true</code> if <code class="keycap">Shift</code> modifier was active, otherwise <code>false</code></li> <li>{{MouseEvent}}.{{MouseEvent/metaKey}} : <code>true</code> if <code class="keycap">Meta</code> modifier was active, otherwise <code>false</code></li> <li>{{MouseEvent}}.{{MouseEvent/button}} : value based on current button pressed</li> <li>{{MouseEvent}}.{{MouseEvent/buttons}} : value based on all buttons currently depressed, <code>0</code> if no buttons pressed</li> <li>{{MouseEvent}}.{{MouseEvent/relatedTarget}} : <code>null</code></li> </ul></td></tr>
</table>

			A <a>user agent</a> MUST dispatch this event when the primary button
			of a pointing device is clicked twice over an element. The
			definition of a double click depends on the environment
			configuration, except that the event target MUST be the same between
			<a><code>mousedown</code></a>, <a><code>mouseup</code></a>, and <a><code>dblclick</code></a>. This event
			type MUST be dispatched after the event type <a><code>click</code></a> if a click
			and double click occur simultaneously, and after the event type
			<a><code>mouseup</code></a> otherwise.

			As with the <a><code>click</code></a> event, the <a><code>dblclick</code></a> event should
			only be fired for the primary pointer button. Secondary buttons MUST
			NOT fire <a><code>dblclick</code></a> events.

			<p class="note">
			Canceling the <a><code>click</code></a> event does not affect the firing of a
			<a><code>dblclick</code></a> event.
			</p>

			As with the <a><code>click</code></a> event type, the <a>default action</a> of
			the <a><code>dblclick</code></a> event type varies based on the <a>event
			target</a> of the event and the value of the {{MouseEvent/button}}
			or {{MouseEvent/buttons}} attributes. The typical
			<a>default actions</a> of the <a><code>dblclick</code></a> event type match those
			of the <a><code>click</code></a> event type.

		<h4 id="event-type-mousedown"><dfn>mousedown</dfn></h4>

<table class="event-definition">
<tr><th>Type</th><td><strong><code>mousedown</code></strong></td></tr>
<tr><th>Interface</th><td>{{MouseEvent}}</td></tr>
<tr><th>Sync / Async</th><td>Sync</td></tr>
<tr><th>Bubbles</th><td>Yes</td></tr>
<tr><th>Trusted Targets</th><td><code>Element</code></td></tr>
<tr><th>Cancelable</th><td>Yes</td></tr>
<tr><th>Composed</th><td>Yes</td></tr>
<tr><th>Default action</th><td>Varies: Start a drag/drop operation; start a text selection; start a scroll/pan interaction (in combination with the middle mouse button, if supported)</td></tr>
<tr><th>Context<br/> (trusted events)</th><td><ul> <li>{{Event}}.{{Event/target}} : <a>topmost event target</a></li> <li>{{UIEvent}}.{{UIEvent/view}} : <a><code>Window</code></a></li> <li>{{UIEvent}}.{{UIEvent/detail}} : indicates the <a href="#current-click-count">current click count</a> incremented by one. For example, if no click happened before the <a><code>mousedown</code></a>, {{UIEvent/detail}} will contain the value <code>1</code></li> <li>{{MouseEvent}}.{{MouseEvent/screenX}} : value based on the pointer position on the screen</li> <li>{{MouseEvent}}.{{MouseEvent/screenY}} : value based on the pointer position on the screen</li> <li>{{MouseEvent}}.{{MouseEvent/clientX}} : value based on the pointer position within the viewport</li> <li>{{MouseEvent}}.{{MouseEvent/clientY}} : value based on the pointer position within the viewport</li> <li>{{MouseEvent}}.{{MouseEvent/layerX}} : value based on the pointer position within the containing element</li> <li>{{MouseEvent}}.{{MouseEvent/layerY}} : value based on the pointer position within the containing element</li> <li>{{MouseEvent}}.{{MouseEvent/altKey}} : <code>true</code> if <code class="keycap">Alt</code> modifier was active, otherwise <code>false</code></li> <li>{{MouseEvent}}.{{MouseEvent/ctrlKey}} : <code>true</code> if <code class="keycap">Control</code> modifier was active, otherwise <code>false</code></li> <li>{{MouseEvent}}.{{MouseEvent/shiftKey}} : <code>true</code> if <code class="keycap">Shift</code> modifier was active, otherwise <code>false</code></li> <li>{{MouseEvent}}.{{MouseEvent/metaKey}} : <code>true</code> if <code class="keycap">Meta</code> modifier was active, otherwise <code>false</code></li> <li>{{MouseEvent}}.{{MouseEvent/button}} : value based on current button pressed</li> <li>{{MouseEvent}}.{{MouseEvent/buttons}} : value based on all buttons currently depressed, <code>0</code> if no buttons pressed</li> <li>{{MouseEvent}}.{{MouseEvent/relatedTarget}} : <code>null</code></li> </ul></td></tr>
</table>

			A <a>user agent</a> MUST dispatch this event when a pointing device
			button is pressed over an element.

			<p class="note">
			Many implementations use the <a><code>mousedown</code></a> event to begin a
			variety of contextually dependent <a>default actions</a>. These
			default actions can be prevented if this event is canceled. Some of
			these default actions could include: beginning a drag/drop
			interaction with an image or link, starting text selection, etc.
			Additionally, some implementations provide a mouse-driven panning
			feature that is activated when the middle mouse button is pressed at
			the time the <a><code>mousedown</code></a> event is dispatched.
			</p>

		<h4 id="event-type-mouseenter"><dfn>mouseenter</dfn></h4>

<table class="event-definition">
<tr><th>Type</th><td><strong><code>mouseenter</code></strong></td></tr>
<tr><th>Interface</th><td>{{MouseEvent}}</td></tr>
<tr><th>Sync / Async</th><td>Sync</td></tr>
<tr><th>Bubbles</th><td>No</td></tr>
<tr><th>Trusted Targets</th><td><code>Element</code></td></tr>
<tr><th>Cancelable</th><td>No</td></tr>
<tr><th>Composed</th><td>No</td></tr>
<tr><th>Default action</th><td>None</td></tr>
<tr><th>Context<br/> (trusted events)</th><td><ul> <li>{{Event}}.{{Event/target}} : <a>topmost event target</a></li> <li>{{UIEvent}}.{{UIEvent/view}} : <a><code>Window</code></a></li> <li>{{UIEvent}}.{{UIEvent/detail}} : <code>0</code></li> <li>{{MouseEvent}}.{{MouseEvent/screenX}} : value based on the pointer position on the screen</li> <li>{{MouseEvent}}.{{MouseEvent/screenY}} : value based on the pointer position on the screen</li> <li>{{MouseEvent}}.{{MouseEvent/clientX}} : value based on the pointer position within the viewport</li> <li>{{MouseEvent}}.{{MouseEvent/clientY}} : value based on the pointer position within the viewport</li> <li>{{MouseEvent}}.{{MouseEvent/layerX}} : value based on the pointer position within the containing element</li> <li>{{MouseEvent}}.{{MouseEvent/layerY}} : value based on the pointer position within the containing element</li> <li>{{MouseEvent}}.{{MouseEvent/altKey}} : <code>true</code> if <code class="keycap">Alt</code> modifier was active, otherwise <code>false</code></li> <li>{{MouseEvent}}.{{MouseEvent/ctrlKey}} : <code>true</code> if <code class="keycap">Control</code> modifier was active, otherwise <code>false</code></li> <li>{{MouseEvent}}.{{MouseEvent/shiftKey}} : <code>true</code> if <code class="keycap">Shift</code> modifier was active, otherwise <code>false</code></li> <li>{{MouseEvent}}.{{MouseEvent/metaKey}} : <code>true</code> if <code class="keycap">Meta</code> modifier was active, otherwise <code>false</code></li> <li>{{MouseEvent}}.{{MouseEvent/button}} : <code>0</code></li> <li>{{MouseEvent}}.{{MouseEvent/buttons}} : value based on all buttons currently depressed, <code>0</code> if no buttons pressed</li> <li>{{MouseEvent}}.{{MouseEvent/relatedTarget}} : indicates the <a>event target</a> a pointing device is exiting, if any.</li> </ul></td></tr>
</table>

			A <a>user agent</a> MUST dispatch this event when a pointing device
			is moved onto the boundaries of an element or one of its descendent
			elements.  A <a>user agent</a> MUST also dispatch this event when the
			element or one of its descendants moves to be underneath the primary
			pointing device. This event type is similar to <a><code>mouseover</code></a>, but
			differs in that it does not bubble, and MUST NOT be dispatched when
			the pointer device moves from an element onto the boundaries of one
			of its descendent elements.

			<p class="note">
			There are similarities between this event type and the CSS
			<a href="http://www.w3.org/TR/CSS2/selector.html#dynamic-pseudo-classes"
			title="Selectors"><code>:hover</code> pseudo-class</a> [[CSS2]].
			See also the <a><code>mouseleave</code></a> event type.
			</p>

		<h4 id="event-type-mouseleave"><dfn>mouseleave</dfn></h4>

<table class="event-definition">
<tr><th>Type</th><td><strong><code>mouseleave</code></strong></td></tr>
<tr><th>Interface</th><td>{{MouseEvent}}</td></tr>
<tr><th>Sync / Async</th><td>Sync</td></tr>
<tr><th>Bubbles</th><td>No</td></tr>
<tr><th>Trusted Targets</th><td><code>Element</code></td></tr>
<tr><th>Cancelable</th><td>No</td></tr>
<tr><th>Composed</th><td>No</td></tr>
<tr><th>Default action</th><td>None</td></tr>
<tr><th>Context<br/> (trusted events)</th><td><ul> <li>{{Event}}.{{Event/target}} : <a>topmost event target</a></li> <li>{{UIEvent}}.{{UIEvent/view}} : <a><code>Window</code></a></li> <li>{{UIEvent}}.{{UIEvent/detail}} : <code>0</code></li> <li>{{MouseEvent}}.{{MouseEvent/screenX}} : value based on the pointer position on the screen</li> <li>{{MouseEvent}}.{{MouseEvent/screenY}} : value based on the pointer position on the screen</li> <li>{{MouseEvent}}.{{MouseEvent/clientX}} : value based on the pointer position within the viewport</li> <li>{{MouseEvent}}.{{MouseEvent/clientY}} : value based on the pointer position within the viewport</li> <li>{{MouseEvent}}.{{MouseEvent/layerX}} : value based on the pointer position within the containing element</li> <li>{{MouseEvent}}.{{MouseEvent/layerY}} : value based on the pointer position within the containing element</li> <li>{{MouseEvent}}.{{MouseEvent/altKey}} : <code>true</code> if <code class="keycap">Alt</code> modifier was active, otherwise <code>false</code></li> <li>{{MouseEvent}}.{{MouseEvent/ctrlKey}} : <code>true</code> if <code class="keycap">Control</code> modifier was active, otherwise <code>false</code></li> <li>{{MouseEvent}}.{{MouseEvent/shiftKey}} : <code>true</code> if <code class="keycap">Shift</code> modifier was active, otherwise <code>false</code></li> <li>{{MouseEvent}}.{{MouseEvent/metaKey}} : <code>true</code> if <code class="keycap">Meta</code> modifier was active, otherwise <code>false</code></li> <li>{{MouseEvent}}.{{MouseEvent/button}} : <code>0</code></li> <li>{{MouseEvent}}.{{MouseEvent/buttons}} : value based on all buttons currently depressed, <code>0</code> if no buttons pressed</li> <li>{{MouseEvent}}.{{MouseEvent/relatedTarget}} : indicates the <a>event target</a> a pointing device is exiting, if any.</li> </ul></td></tr>
</table>

			A <a>user agent</a> MUST dispatch this event when a pointing device
			is moved off of the boundaries of an element and all of its
			descendent elements.  A <a>user agent</a> MUST also dispatch this event
			when the element or one of its descendants moves to be no longer underneath
			the primary pointing device. This event type is similar to <a><code>mouseout</code></a>,
			but differs in that does not bubble, and that it MUST NOT be
			dispatched until the pointing device has left the boundaries of the
			element and the boundaries of all of its children.

			<p class="note">
			There are similarities between this event type and the CSS
			<a href="http://www.w3.org/TR/CSS2/selector.html#dynamic-pseudo-classes"
			title="Selectors"><code>:hover</code> pseudo-class</a> [[CSS2]].
			See also the <a><code>mouseenter</code></a> event type.
			</p>

		<h4 id="event-type-mousemove"><dfn>mousemove</dfn></h4>

<table class="event-definition">
<tr><th>Type</th><td><strong><code>mousemove</code></strong></td></tr>
<tr><th>Interface</th><td>{{MouseEvent}}</td></tr>
<tr><th>Sync / Async</th><td>Sync</td></tr>
<tr><th>Bubbles</th><td>Yes</td></tr>
<tr><th>Trusted Targets</th><td><code>Element</code></td></tr>
<tr><th>Cancelable</th><td>Yes</td></tr>
<tr><th>Composed</th><td>Yes</td></tr>
<tr><th>Default action</th><td>None</td></tr>
<tr><th>Context<br/> (trusted events)</th><td><ul> <li>{{Event}}.{{Event/target}} : <a>topmost event target</a></li> <li>{{UIEvent}}.{{UIEvent/view}} : <a><code>Window</code></a></li> <li>{{UIEvent}}.{{UIEvent/detail}} : <code>0</code></li> <li>{{MouseEvent}}.{{MouseEvent/screenX}} : value based on the pointer position on the screen</li> <li>{{MouseEvent}}.{{MouseEvent/screenY}} : value based on the pointer position on the screen</li> <li>{{MouseEvent}}.{{MouseEvent/clientX}} : value based on the pointer position within the viewport</li> <li>{{MouseEvent}}.{{MouseEvent/clientY}} : value based on the pointer position within the viewport</li> <li>{{MouseEvent}}.{{MouseEvent/layerX}} : value based on the pointer position within the containing element</li> <li>{{MouseEvent}}.{{MouseEvent/layerY}} : value based on the pointer position within the containing element</li> <li>{{MouseEvent}}.{{MouseEvent/altKey}} : <code>true</code> if <code class="keycap">Alt</code> modifier was active, otherwise <code>false</code></li> <li>{{MouseEvent}}.{{MouseEvent/ctrlKey}} : <code>true</code> if <code class="keycap">Control</code> modifier was active, otherwise <code>false</code></li> <li>{{MouseEvent}}.{{MouseEvent/shiftKey}} : <code>true</code> if <code class="keycap">Shift</code> modifier was active, otherwise <code>false</code></li> <li>{{MouseEvent}}.{{MouseEvent/metaKey}} : <code>true</code> if <code class="keycap">Meta</code> modifier was active, otherwise <code>false</code></li> <li>{{MouseEvent}}.{{MouseEvent/button}} : <code>0</code></li> <li>{{MouseEvent}}.{{MouseEvent/buttons}} : value based on all buttons currently depressed, <code>0</code> if no buttons pressed</li> <li>{{MouseEvent}}.{{MouseEvent/relatedTarget}} : <code>null</code></li> </ul></td></tr>
</table>

			A <a>user agent</a> MUST dispatch this event when a pointing device
			is moved while it is over an element.  The frequency rate of events
			while the pointing device is moved is implementation-, device-, and
			platform-specific, but multiple consecutive <a><code>mousemove</code></a> events
			SHOULD be fired for sustained pointer-device movement, rather than a
			single event for each instance of mouse movement.  Implementations
			are encouraged to determine the optimal frequency rate to balance
			responsiveness with performance.

			<p class="note">
			In some implementation environments, such as a browser,
			<a><code>mousemove</code></a> events can continue to fire if the user began a
			drag operation (e.g., a mouse button is pressed) and the pointing
			device has left the boundary of the user agent.
			</p>

			<p class="note" id="mousemove-now-cancelable">
			This event was formerly specified to be non-cancelable in DOM Level
			2 Events, but was changed to reflect existing interoperability between
			user agents.
			</p>

		<h4 id="event-type-mouseout"><dfn>mouseout</dfn></h4>

<table class="event-definition">
<tr><th>Type</th><td><strong><code>mouseout</code></strong></td></tr>
<tr><th>Interface</th><td>{{MouseEvent}}</td></tr>
<tr><th>Sync / Async</th><td>Sync</td></tr>
<tr><th>Bubbles</th><td>Yes</td></tr>
<tr><th>Trusted Targets</th><td><code>Element</code></td></tr>
<tr><th>Cancelable</th><td>Yes</td></tr>
<tr><th>Composed</th><td>Yes</td></tr>
<tr><th>Default action</th><td>None</td></tr>
<tr><th>Context<br/> (trusted events)</th><td><ul> <li>{{Event}}.{{Event/target}} : <a>topmost event target</a></li> <li>{{UIEvent}}.{{UIEvent/view}} : <a><code>Window</code></a></li> <li>{{UIEvent}}.{{UIEvent/detail}} : <code>0</code></li> <li>{{MouseEvent}}.{{MouseEvent/screenX}} : value based on the pointer position on the screen</li> <li>{{MouseEvent}}.{{MouseEvent/screenY}} : value based on the pointer position on the screen</li> <li>{{MouseEvent}}.{{MouseEvent/clientX}} : value based on the pointer position within the viewport</li> <li>{{MouseEvent}}.{{MouseEvent/clientY}} : value based on the pointer position within the viewport</li> <li>{{MouseEvent}}.{{MouseEvent/layerX}} : value based on the pointer position within the containing element</li> <li>{{MouseEvent}}.{{MouseEvent/layerY}} : value based on the pointer position within the containing element</li> <li>{{MouseEvent}}.{{MouseEvent/altKey}} : <code>true</code> if <code class="keycap">Alt</code> modifier was active, otherwise <code>false</code></li> <li>{{MouseEvent}}.{{MouseEvent/ctrlKey}} : <code>true</code> if <code class="keycap">Control</code> modifier was active, otherwise <code>false</code></li> <li>{{MouseEvent}}.{{MouseEvent/shiftKey}} : <code>true</code> if <code class="keycap">Shift</code> modifier was active, otherwise <code>false</code></li> <li>{{MouseEvent}}.{{MouseEvent/metaKey}} : <code>true</code> if <code class="keycap">Meta</code> modifier was active, otherwise <code>false</code></li> <li>{{MouseEvent}}.{{MouseEvent/button}} : <code>0</code></li> <li>{{MouseEvent}}.{{MouseEvent/buttons}} : value based on all buttons currently depressed, <code>0</code> if no buttons pressed</li> <li>{{MouseEvent}}.{{MouseEvent/relatedTarget}} : indicates the <a>event target</a> a pointing device is entering, if any.</li> </ul></td></tr>
</table>

			A <a>user agent</a> MUST dispatch this event when a pointing device
			is moved off of the boundaries of an element or when the element is
			moved to be no longer underneath the primary pointing device.
			This event type is similar to <a><code>mouseleave</code></a>, but differs in that
			does bubble, and that it MUST be dispatched when the pointer device
			moves from an element onto the boundaries of one of its descendent elements.

			<p class="note">
			See also the <a><code>mouseover</code></a> event type.
			</p>

		<h4 id="event-type-mouseover"><dfn>mouseover</dfn></h4>

<table class="event-definition">
<tr><th>Type</th><td><strong><code>mouseover</code></strong></td></tr>
<tr><th>Interface</th><td>{{MouseEvent}}</td></tr>
<tr><th>Sync / Async</th><td>Sync</td></tr>
<tr><th>Bubbles</th><td>Yes</td></tr>
<tr><th>Trusted Targets</th><td><code>Element</code></td></tr>
<tr><th>Cancelable</th><td>Yes</td></tr>
<tr><th>Composed</th><td>Yes</td></tr>
<tr><th>Default action</th><td>None</td></tr>
<tr><th>Context<br/> (trusted events)</th><td><ul> <li>{{Event}}.{{Event/target}} : <a>topmost event target</a></li> <li>{{UIEvent}}.{{UIEvent/view}} : <a><code>Window</code></a></li> <li>{{UIEvent}}.{{UIEvent/detail}} : <code>0</code></li> <li>{{MouseEvent}}.{{MouseEvent/screenX}} : value based on the pointer position on the screen</li> <li>{{MouseEvent}}.{{MouseEvent/screenY}} : value based on the pointer position on the screen</li> <li>{{MouseEvent}}.{{MouseEvent/clientX}} : value based on the pointer position within the viewport</li> <li>{{MouseEvent}}.{{MouseEvent/clientY}} : value based on the pointer position within the viewport</li> <li>{{MouseEvent}}.{{MouseEvent/layerX}} : value based on the pointer position within the containing element</li> <li>{{MouseEvent}}.{{MouseEvent/layerY}} : value based on the pointer position within the containing element</li> <li>{{MouseEvent}}.{{MouseEvent/altKey}} : <code>true</code> if <code class="keycap">Alt</code> modifier was active, otherwise <code>false</code></li> <li>{{MouseEvent}}.{{MouseEvent/ctrlKey}} : <code>true</code> if <code class="keycap">Control</code> modifier was active, otherwise <code>false</code></li> <li>{{MouseEvent}}.{{MouseEvent/shiftKey}} : <code>true</code> if <code class="keycap">Shift</code> modifier was active, otherwise <code>false</code></li> <li>{{MouseEvent}}.{{MouseEvent/metaKey}} : <code>true</code> if <code class="keycap">Meta</code> modifier was active, otherwise <code>false</code></li> <li>{{MouseEvent}}.{{MouseEvent/button}} : <code>0</code></li> <li>{{MouseEvent}}.{{MouseEvent/buttons}} : value based on all buttons currently depressed, <code>0</code> if no buttons pressed</li> <li>{{MouseEvent}}.{{MouseEvent/relatedTarget}} : indicates the <a>event target</a> a pointing device is entering, if any.</li> </ul></td></tr>
</table>

			A <a>user agent</a> MUST dispatch this event when a pointing device
			is moved onto the boundaries of an element or when the element is
			moved to be underneath the primary pointing device.
			This event type is similar to <a><code>mouseenter</code></a>, but differs in
			that it bubbles, and that it MUST be dispatched when the pointer device moves onto the
			boundaries of an element whose ancestor element is the <a>event
			target</a> for the same <a>event listener</a> instance.

			<p class="note">
			See also the <a><code>mouseout</code></a> event type.
			</p>

		<h4 id="event-type-mouseup"><dfn>mouseup</dfn></h4>

<table class="event-definition">
<tr><th>Type</th><td><strong><code>mouseup</code></strong></td></tr>
<tr><th>Interface</th><td>{{MouseEvent}}</td></tr>
<tr><th>Sync / Async</th><td>Sync</td></tr>
<tr><th>Bubbles</th><td>Yes</td></tr>
<tr><th>Trusted Targets</th><td><code>Element</code></td></tr>
<tr><th>Cancelable</th><td>Yes</td></tr>
<tr><th>Composed</th><td>Yes</td></tr>
<tr><th>Default action</th><td>None</td></tr>
<tr><th>Context<br/> (trusted events)</th><td><ul> <li>{{Event}}.{{Event/target}} : <a>topmost event target</a></li> <li>{{UIEvent}}.{{UIEvent/view}} : <a><code>Window</code></a></li> <li>{{UIEvent}}.{{UIEvent/detail}} : indicates the <a href="#current-click-count">current click count</a> incremented by one.</li> <li>{{MouseEvent}}.{{MouseEvent/screenX}} : value based on the pointer position on the screen</li> <li>{{MouseEvent}}.{{MouseEvent/screenY}} : value based on the pointer position on the screen</li> <li>{{MouseEvent}}.{{MouseEvent/clientX}} : value based on the pointer position within the viewport</li> <li>{{MouseEvent}}.{{MouseEvent/clientY}} : value based on the pointer position within the viewport</li> <li>{{MouseEvent}}.{{MouseEvent/layerX}} : value based on the pointer position within the containing element</li> <li>{{MouseEvent}}.{{MouseEvent/layerY}} : value based on the pointer position within the containing element</li> <li>{{MouseEvent}}.{{MouseEvent/altKey}} : <code>true</code> if <code class="keycap">Alt</code> modifier was active, otherwise <code>false</code></li> <li>{{MouseEvent}}.{{MouseEvent/ctrlKey}} : <code>true</code> if <code class="keycap">Control</code> modifier was active, otherwise <code>false</code></li> <li>{{MouseEvent}}.{{MouseEvent/shiftKey}} : <code>true</code> if <code class="keycap">Shift</code> modifier was active, otherwise <code>false</code></li> <li>{{MouseEvent}}.{{MouseEvent/metaKey}} : <code>true</code> if <code class="keycap">Meta</code> modifier was active, otherwise <code>false</code></li> <li>{{MouseEvent}}.{{MouseEvent/button}} : value based on current button pressed</li> <li>{{MouseEvent}}.{{MouseEvent/buttons}} : value based on all buttons currently depressed, <code>0</code> if no buttons pressed</li> <li>{{MouseEvent}}.{{MouseEvent/relatedTarget}} : <code>null</code></li> </ul></td></tr>
</table>

			A <a>user agent</a> MUST dispatch this event when a pointing device
			button is released over an element.

			<p class="note">
			In some implementation environments, such as a browser, a
			<a><code>mouseup</code></a> event can be dispatched even if the pointing device
			has left the boundary of the user agent, e.g., if the user began a
			drag operation with a mouse button pressed.
			</p>

<h2 id="event-constructors">Constructing Mouse and Keyboard Events</h2>

	Generally, when a constructor of an {{Event}} interface, or of an interface
	inherited from the {{Event}} interface, is invoked, the steps described in
	[[!DOM]] should be followed. However the {{KeyboardEvent}} and
	{{MouseEvent}} interfaces provide additional dictionary members for
	initializing the internal state of the {{Event}} object's key modifiers:
	specifically, the internal state queried for using the
	{{KeyboardEvent/getModifierState()}} and {{MouseEvent/getModifierState()}}
	methods. This section supplements the DOM4 steps for intializing a new
	{{Event}} object with these optional modifier states.

	For the purposes of constructing a {{KeyboardEvent}}, {{MouseEvent}}, or
	object derived from these objects using the algorithm below, all
	{{KeyboardEvent}}, {{MouseEvent}}, and derived objects have
	<dfn id="internal-key-modifier-state">internal key modifier state</dfn> which can be set and
	retrieved using the <a href="#keys-modifiers">key modifier names</a>
	described in the
	<a href="http://www.w3.org/TR/uievents-key/#keys-modifier">Modifier Keys table</a>
	in [[UIEvents-Key]].

	The following steps supplement the algorithm defined for constructing
	events in DOM4:

	*   If the {{Event}} being constructed is a {{KeyboardEvent}} or
		{{MouseEvent}} object or an object that derives from either of these,
		and a {{EventModifierInit}} argument was provided to the constructor,
		then run the following sub-steps:

		*   For each {{EventModifierInit}} argument, if the dictionary member
			begins with the string <code>"modifier"</code>, then let the
			<dfn id="modifier-key-name">key modifier name</dfn> be the
			dictionary member's name excluding the prefix
			<code>"modifier"</code>, and set the {{Event}} object's
			<a href="#internal-key-modifier-state">internal key modifier state</a>
			that matches the <a href="#modifier-key-name">key modifier name</a>
			to the corresponding value.

<h2 id="legacy-event-initializers">Legacy Event Initializers</h2>

	<em>This section is normative.</em>

	The following features are obsolete and should only be implemented by
	<a>user agents</a> that require compatibility with legacy software.</em>

	Early versions of this specification included an initialization method on
	the interface (for example <code>initMouseEvent</code>) that required a long
	list of parameters that, in most cases, did not fully initialize all
	attributes of the event object. Because of this, event interfaces which were
	derived from the basic {{Event}} interface required that the initializer of
	<em>each</em> of the derived interfaces be called explicitly in order to
	fully initialize an event.

	<div class="example">
	Initializing all the attributes of a MutationEvent requires calls to two
	initializer methods: <code>initEvent</code> and
	<code>initMutationEvent</code>.
	</div>

	Due in part to the length of time in the development of this standard, some
	implementations MAY have taken a dependency on these (now deprecated)
	initializer methods. For completeness, these legacy event initializers are
	described in this section.

	<h3 id="idl-interface-MouseEvent-initializers">Initializers for interface MouseEvent</h3>

		<em>This section is informative</em>

		<pre class="idl">
		partial interface MouseEvent {
			// Deprecated in this specification
			undefined initMouseEvent(DOMString typeArg,
				optional boolean bubblesArg = false,
				optional boolean cancelableArg = false,
				optional Window? viewArg = null,
				optional long detailArg = 0,
				optional long screenXArg = 0,
				optional long screenYArg = 0,
				optional long clientXArg = 0,
				optional long clientYArg = 0,
				optional boolean ctrlKeyArg = false,
				optional boolean altKeyArg = false,
				optional boolean shiftKeyArg = false,
				optional boolean metaKeyArg = false,
				optional short buttonArg = 0,
				optional EventTarget? relatedTargetArg = null);
		};
		</pre>

		<dl dfn-for="MouseEvent">
			<dt><dfn method>initMouseEvent(typeArg)</dfn></dt>
			<dd>
				Initializes attributes of a {{MouseEvent}} object. This
				method has the same behavior as <code>UIEvent.initUIEvent()</code>.

				<p class="warning">
				The <code>initMouseEvent</code> method is deprecated, but
				supported for backwards-compatibility with widely-deployed
				implementations.
				</p>

				<dl class="parameters">
					<dt>DOMString typeArg</dt>
					<dd>
						Refer to the {{Event/initEvent()}} method for a description of this parameter.
					</dd>

					<dt>boolean bubblesArg</dt>
					<dd>
						Refer to the {{Event/initEvent()}} method for a description of this parameter.
					</dd>

					<dt>boolean cancelableArg</dt>
					<dd>
						Refer to the {{Event/initEvent()}} method for a description of this parameter.
					</dd>

					<dt>Window? viewArg</dt>
					<dd>
						Specifies {{UIEvent/view}}. This value MAY be <code>null</code>.
					</dd>

					<dt>long detailArg</dt>
					<dd>
						Specifies {{UIEvent/detail}}.
					</dd>

					<dt>long screenXArg</dt>
					<dd>
						Specifies {{MouseEvent/screenX}}.
					</dd>

					<dt>long screenYArg</dt>
					<dd>
						Specifies {{MouseEvent/screenY}}.
					</dd>

					<dt>long clientXArg</dt>
					<dd>
						Specifies {{MouseEvent/clientX}}.
					</dd>

					<dt>long clientYArg</dt>
					<dd>
						Specifies {{MouseEvent/clientY}}.
					</dd>

					<dt>boolean ctrlKeyArg</dt>
					<dd>
						Specifies {{MouseEvent/ctrlKey}}.
					</dd>

					<dt>boolean altKeyArg</dt>
					<dd>
						Specifies {{MouseEvent/altKey}}.
					</dd>

					<dt>boolean shiftKeyArg</dt>
					<dd>
						Specifies {{MouseEvent/shiftKey}}.
					</dd>

					<dt>boolean metaKeyArg</dt>
					<dd>
						Specifies {{MouseEvent/metaKey}}.
					</dd>

					<dt>short buttonArg</dt>
					<dd>
						Specifies {{MouseEvent/button}}.
					</dd>

					<dt>EventTarget? relatedTargetArg</dt>
					<dd>
						Specifies {{MouseEvent/relatedTarget}}. This value MAY
						be <code>null</code>.
					</dd>
				</dl>
			</dd>
		</dl>

<h2 id="security-considerations">Security Considerations</h2>

	TODO - Add specific concerns for this spec

<h2 id="acknowledgements-contributors">Acknowledgements</h2>

	TODO

<h2 id="other-uievents">Refs to other UIEvent specs \[DELETE]</h2>

	This section will be deleted.

	Temporary place to "define" other referenced UI Events (to make the bikeshed linker happy).
	This will be deleted once we have proper cross-references.

	<h3 id="things">Things defined in other sections</h3>

		<h4 id="event-flow-activation">Activation triggers and behavior</h4>
		<h4 id="events-compositionevents">Composition Events</h4>
		<h4 id="event-flow-default-cancel">Default actions and cancelable events</h4>
		<h4 id="event-flow">Event dispatch and DOM event flow</h4>
		<h4 id="conf-interactive-ua">Web browsers and other dynamic or interactive <a>user agents</a></h4>
		<h4 id="conf-author-tools">Authoring tools</h4>

	<h3 id="keyboardevent-things">Things defined in KeyboardEvents</h3>
		<h4 id="keys-modifiers">Modifier keys</h4>

<h2 id="glossary">Glossary \[DELETE]</h2>

This section will be deleted.

Temporary glossary terms (for bikeshed linker).
Many of these are properly defined elsewhere and should be linked to directly.
Terms which should be defined in this spec should be defined inline.

: <dfn>activation behavior</dfn>
::	The action taken when an <a>event</a>, typically initiated by users through
	an input device, causes an element to fulfill a defined task.  The task MAY
	be defined for that element by the <a>host language</a>, or by
	author-defined variables, or both.  The default task for any given element
	MAY be a generic action, or MAY be unique to that element.  For example, the
	activation behavior of an HTML or SVG <code>&lt;a&gt;</code> element is to
	cause the <a>user agent</a> to traverse the link specified in the
	<code>href</code> attribute, with the further optional parameter of
	specifying the browsing context for the traversal (such as the current
	window or tab, a named window, or a new window). The activation behavior of
	an HTML <code>&lt;input&gt;</code> element with the <code>type</code>
	attribute value <code>submit</code> is be to send the values of the form
	elements to an author-defined IRI by the author-defined HTTP method.  See
	[[#event-flow-activation]] for more details.

: <dfn>activation trigger</dfn>
::	An event which is defined to initiate an <a>activation behavior</a>.  Refer
	to [[#event-flow-activation]] for more details.

: <dfn>body element</dfn>
::	In HTML or XHTML <a>documents</a>, the body element represents the contents of the
	document. In a well-formed HTML document, the body element is a first
	descendant of the <a>root element</a>.

: <dfn>DOM Level 0</dfn>
::	The term <q>DOM Level 0</q> refers to a mix of HTML <a>document</a> functionalities,
	often not formally specified but traditionally supported as de facto
	standards, implemented originally by Netscape Navigator version 3.0 or
	Microsoft Internet Explorer version 3.0.  In many cases, attributes or
	methods have been included for reasons of backward compatibility with <q>DOM
	Level 0</q>.

: <dfn>default action</dfn>
::	A <a>default action</a> is an OPTIONAL supplementary behavior that an
	implementation MUST perform in combination with the dispatch of the event
	object.  Each event type definition, and each specification, defines the
	<a>default action</a> for that event type, if it has one.  An instance of an
	event MAY have more than one <a>default action</a> under some circumstances,
	such as when associated with an <a>activation trigger</a>.  A <a>default
	action</a> MAY be cancelled through the invocation of the
	{{Event/preventDefault()}} method. For more details, see
	[[#event-flow-default-cancel]].

: <dfn>event</dfn>
::	An event is the representation of some occurrence (such as a mouse click on
	the presentation of an element, the removal of child node from an element,
	or any number of other possibilities) which is associated with its <a>event
	target</a>. Each event is an instantiation of one specific <a>event
	type</a>.

: <dfn>event target</dfn>
::	The object to which an <a>event</a> is targeted using the [[#event-flow]].
	The event target is the value of the {{Event/target}} attribute.

: <dfn>host language</dfn>
::	Any language which integrates the features of another language or API
	specification, while normatively referencing the origin specification rather
	than redefining those features, and extending those features only in ways
	defined by the origin specification.  An origin specification typically is
	only intended to be implemented in the context of one or more host
	languages, not as a standalone language.  For example, XHTML, HTML, and SVG
	are host languages for UI Events, and they integrate and extend the objects
	and models defined in this specification.

: <dfn>hysteresis</dfn>
::	A feature of human interface design to accept input values within a certain
	range of location or time, in order to improve the user experience.  For
	example, allowing for small deviation in the time it takes for a user to
	double-click a mouse button is temporal hysteresis, and not immediately
	closing a nested menu if the user mouses out from the parent window when
	transitioning to the child menu is locative hysteresis.

: <dfn>topmost event target</dfn>
::	The <a>topmost event target</a> MUST be the element highest in the rendering
	order which is capable of being an <a>event target</a>. In graphical user
	interfaces this is the element under the user's pointing device. A user
	interface's <q>hit testing</q> facility is used to determine the target. For
	specific details regarding hit testing and stacking order, refer to the
	<a>host language</a>.

: <dfn>un-initialized value</dfn>
::	The value of any event attribute (such as {{Event/bubbles}} or
	{{Event/currentTarget}}) before the event has been initialized with
	{{Event/initEvent()}}. The un-initialized values of an event apply
	immediately after a new event has been created using the method
	{{Document/createEvent()}}.

: <dfn>user agent</dfn>
::	A program, such as a browser or content authoring tool, normally running on
	a client machine, which acts on a user's behalf in retrieving, interpreting,
	executing, presenting, or creating content.  Users MAY act on the content
	using different user agents at different times, for different purposes.  See
	the [[#conf-interactive-ua]] and [[#conf-author-tools]] for details on the
	requirements for a <em>conforming</em> user agent.

: <dfn>Window</dfn>
::	The <code>Window</code> is the object referred to by the current <a>document</a>'s
	browsing context's Window Proxy object as defined in
	<a href="http://dev.w3.org/html5/spec/single-page.html#windowproxy" title="HTML5 WindowProxy description">HTML5</a>
	[[HTML5]].

