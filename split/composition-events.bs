<h1>Composition Events</h1>

<pre class="metadata">
Shortname: composition-events
Level:
Group: webapps
Status: ED
TR: https://www.w3.org/TR/uievents/
ED: https://w3c.github.io/uievents/
Repository: w3c/uievents
Editor: Gary Kacmarcik 59482, Google, garykac@google.com
Editor: Travis Leithead 40117, Microsoft, travil@microsoft.com
Former Editor: Doug Schepers, Mar 2008 - May 2011
!Tests: <a href=https://github.com/web-platform-tests/wpt/tree/master/uievents>web-platform-tests uievents/</a> (<a href=https://github.com/web-platform-tests/wpt/labels/uievents>ongoing work</a>)
Abstract:
	*** Composition Events ***

	Note: This is an experimental split of the UI Events spec into smaller, event-specific
	specs. The split was made from an out-of-date snapshot, so the information here is not
	current, so please focus on the overall structure rather than the specifics of the
	content. If this experiment goes well, then we will split the current spec after all
	outstanding pull requests have been handled.
</pre>

<pre class="anchors">
urlPrefix: https://www.w3.org/TR/WebIDL/#idl-; type: type;
	text: long
urlPrefix: https://w3c.github.io/selection-api/#widl-Window-getSelection-Selection; type: dfn; for: Document
	text: getSelection()
url: https://www.w3.org/TR/2004/REC-xml-20040204/#NT-S; type: dfn;
	text: white space
url: https://www.w3.org/TR/uievents-key/#key-attribute-value; type: dfn; spec: uievents-key;
	text: key attribute value
url: https://www.w3.org/TR/uievents-key/#keys-modifier; type: dfn; spec: uievents-key;
	text: modifier keys table
url: https://html.spec.whatwg.org/multipage/forms.html#context-menus; type: dfn;
	text: contextmenu
url: https://www.w3.org/TR/pointerevents3/#pointerevent-interface; type: interface; spec: pointerevents3
	text: PointerEvent
url: https://dom.spec.whatwg.org/#concept-tree-ancestor; type: dfn;
	text: ancestor
url: https://www.w3.org/TR/CSS21/visuren.html#x43; type: dfn;
	text: stacking context
url: https://drafts.csswg.org/css-position-3/#positioned-box; type: dfn;
	text: positioned
url: https://drafts.csswg.org/css-position-4/#paint-a-stacking-context; type: dfn;
	text: painting a stacking context
</pre>

<pre class="link-defaults">
spec:dom; type:interface; text:Document
spec:dom; type:dfn; for:Event; text:target
spec:infra; type:dfn; text:code point
</pre>

<h2 id="spec-intro">Introduction</h2>

	<h3 id="spec-overview">Overview</h3>

		TODO.

	<h3 id="spec-conformance">Conformance</h3>

		Boilerplate?

<h2 id="style-conventions">Stylistic Conventions</h2>

This specification follows the
<a href="http://www.w3.org/People/Schepers/spec-conventions.html">Proposed W3C Specification Conventions</a>,
with the following supplemental additions:

*   The <a href="#key-legends"><em>key cap</em></a> printed on a key is shown as
	<code class="keycap">&darr;</code>, <code class="keycap">=</code> or <code class="keycap">Q</code>. This is used to refer to a
	key from the user's perspective without regard for the
	{{KeyboardEvent/key}} and {{KeyboardEvent/code}} values in the
	generated {{KeyboardEvent}}.

*   Glyphs representing character are shown as: <code class="glyph">"&#x239C2;"</code>.

*   Unicode character encodings are shown as: <code class="unicode">U+003d</code>.

*   Names of key values generated by a key press (i.e., the value of
	{{KeyboardEvent}}.{{KeyboardEvent/key}}) are shown as:
	<code class="key">"<a href="http://www.w3.org/TR/uievents-key/#key-ArrowDown">ArrowDown</a>"</code>, <code class="key">"="</code>, <code class="key">"q"</code> or <code class="key">"Q"</code>.

*   Names of key codes associated with the physical keys (i.e., the
	value of {{KeyboardEvent}}.{{KeyboardEvent/code}}) are shown as:
	<code class="code">"<a href="http://www.w3.org/TR/uievents-code/#code-ArrowDown">ArrowDown</a>"</code>, <code class="code">"<a href="http://www.w3.org/TR/uievents-code/#code-Equal">Equal</a>"</code> or <code class="code">"<a href="http://www.w3.org/TR/uievents-code/#code-KeyQ">KeyQ</a>"</code>.


In addition, certain terms are used in this specification with particular
meanings.  The term <q>implementation</q> applies to a browser, content
authoring tool, or other <a>user agent</a> that implements this specification,
while a content author is a person who writes script or code that takes
advantage of the interfaces, methods, attributes, events, and other features
described in this specification in order to make Web applications, and a user is
the person who uses those Web applications in an implementation.

And finally:

<p class="note">This is a note.</p>

<!-- TODO : Example (but ensure that it doesn't get auto-numbered -->

<p class="&#x0058;&#x0058;&#x0058;">This is an open issue.</p>

<p class="warning">This is a warning.</p>

<pre class="idl-ignore" data-no-idl data-highlight="webidl">
	  interface <b>Example</b> {
	      // This is an IDL definition.
	  };
</pre>

<h2 id="events-compositionevents">Composition Events</h2>

	Composition Events provide a means for inputing text in a supplementary or
	alternate manner than by Keyboard Events, in order to allow the use of
	characters that might not be commonly available on keyboard. For example,
	Composition Events might be used to add accents to characters despite their
	absence from standard US keyboards, to build up logograms of many Asian
	languages from their base components or categories, to select word choices
	from a combination of key presses on a mobile device keyboard, or to convert
	voice commands into text using a speech recognition processor. Refer to
	[[#keys]] for examples on how Composition Events are used in combination
	with keyboard events.

	Conceptually, a composition session consists of one <a><code>compositionstart</code></a>
	event, one or more <a><code>compositionupdate</code></a> events, and one
	<a><code>compositionend</code></a> event, with the value of the {{CompositionEvent/data}}
	attribute persisting between each <q>stage</q> of this event chain during
	each session.

	<p class="note"><strong>Note:</strong>
	While a composition session is active, keyboard events can be dispatched to
	the DOM if the keyboard is the input device used with the composition
	session. See the <a><code>compositionstart</code></a> event details</a> and
	<a href="#keys-IME">IME section</a> for relevent event ordering.
	</p>

	Not all <a>IME</a> systems or devices expose the necessary data to the DOM,
	so the active composition string (the <q>Reading Window</q> or <q>candidate
	selection menu option</q>) might not be available through this interface, in
	which case the selection MAY be represented by the <a>empty string</a>.

	<h3 id="interface-compositionevent">Interface CompositionEvent</h3>

		<p class="intro-dom">Introduced in this specification</p>

		The {{CompositionEvent}} interface provides specific contextual
		information associated with Composition Events.

		To create an instance of the {{CompositionEvent}} interface,
		use the {{CompositionEvent}} constructor, passing an optional
		{{CompositionEventInit}} dictionary.

		<h4 id="idl-compositionevent">CompositionEvent</h4>

			<pre class="idl">
			[Exposed=Window]
			interface CompositionEvent : UIEvent {
				constructor(DOMString type, optional CompositionEventInit eventInitDict = {});
				readonly attribute USVString data;
			};
			</pre>

			<dl dfn-for="CompositionEvent">
				<dt><dfn attribute>data</dfn></dt>
				<dd>
					<code>data</code> holds the value of the characters generated by
					an input method. This MAY be a single Unicode character or a
					non-empty sequence of Unicode characters [[Unicode]]. Characters
					SHOULD be normalized as defined by the Unicode normalization
					form <em>NFC</em>, defined in [[UAX15]]. This
					attribute MAY be the <a>empty string</a>.

					The <a>un-initialized value</a> of this attribute MUST be
					<code>""</code> (the empty string).
				</dd>
			</dl>

		<h4 id="idl-compositioneventinit">CompositionEventInit</h4>

			<pre class="idl">
			dictionary CompositionEventInit : UIEventInit {
				DOMString data = "";
			};
			</pre>

			<dl dfn-for="CompositionEventInit">
				<dt><dfn dict-member>data</dfn></dt>
				<dd>
					Initializes the <code>data</code> attribute of the
					CompositionEvent object to the characters generated by the IME
					composition.
				</dd>
			</dl>

	<h3 id="events-composition-order">Composition Event Order</h3>

		<p>The Composition Events defined in this specification MUST occur in the following set order relative to one another:</p>

<table class="event-sequence-table">
<thead><tr><td class="cell-number"></th><th>Event Type</th><th>Notes</th></tr></thead>
<tr><td class="cell-number">1</td><td><a><code>compositionstart</code></a></td><td></td></tr>
<tr><td class="cell-number">2</td><td><a><code>compositionupdate</code></a></td><td>Multiple events</td></tr>
<tr><td class="cell-number">3</td><td><a><code>compositionend</code></a></td><td></td></tr>
</table>

	<h3 id="events-composition-handwriting">Handwriting Recognition Systems</h3>

		The following example describes a possible sequence of events when
		composing a text passage <q>text</q> with a handwriting recognition
		system, such as on a pen tablet, as modeled using Composition Events.

<table class="event-sequence-table">
<thead><tr><td class="cell-number"></th><th>Event Type</th><th style="text-align:center">{{CompositionEvent}}<br/> {{CompositionEvent/data}}</th><th>Notes</th></tr></thead>
<tr><td class="cell-number">1</td><td><a><code>compositionstart</code></a></td><td style="text-align:center"><code>""</code></td><td></td></tr>
<tr><td class="cell-number"></td><td></td><td style="text-align:center"></td><td><em>User writes word on tablet surface</em></td></tr>
<tr><td class="cell-number">2</td><td><a><code>compositionupdate</code></a></td><td style="text-align:center"><code>"test"</code></td><td></td></tr>
<tr><td class="cell-number"></td><td></td><td style="text-align:center"></td><td><em>User rejects first word-match suggestion, selects different match</em></td></tr>
<tr><td class="cell-number">3</td><td><a><code>compositionupdate</code></a></td><td style="text-align:center"><code>"text"</code></td><td></td></tr>
<tr><td class="cell-number">4</td><td><a><code>compositionend</code></a></td><td style="text-align:center"><code>"text"</code></td><td></td></tr>
</table>

	<h3 id="events-composition-canceling">Canceling Composition Events</h3>

		If a <a><code>keydown</code></a> event is canceled then any Composition Events that
		would have fired as a result of that <a><code>keydown</code></a> SHOULD not be
		dispatched:

<table class="event-sequence-table">
<thead><tr><td class="cell-number"></th><th>Event Type</th><th>Notes</th></tr></thead>
<tr><td class="cell-number">1</td><td><a><code>keydown</code></a></td><td>The <a>default action</a> is prevented, e.g., by invoking {{Event/preventDefault()}}.</td></tr>
<tr><td class="cell-number"></td><td></td><td><em>No Composition Events are dispatched</em></td></tr>
<tr><td class="cell-number">2</td><td><a><code>keyup</code></a></td><td></td></tr>
</table>

		If the initial <a><code>compositionstart</code></a> event is canceled then the text
		composition session SHOULD be terminated. Regardless of whether or not
		the composition session is terminated, the <a><code>compositionend</code></a> event
		MUST be sent.

<table class="event-sequence-table">
<thead><tr><td class="cell-number"></th><th>Event Type</th><th>Notes</th></tr></thead>
<tr><td class="cell-number">1</td><td><a><code>keydown</code></a></td><td></td></tr>
<tr><td class="cell-number">2</td><td><a><code>compositionstart</code></a></td><td>The <a>default action</a> is prevented, e.g., by invoking {{Event/preventDefault()}}.</td></tr>
<tr><td class="cell-number"></td><td></td><td><em>No Composition Events are dispatched</em></td></tr>
<tr><td class="cell-number">3</td><td><a><code>compositionend</code></a></td><td></td></tr>
<tr><td class="cell-number">4</td><td><a><code>keyup</code></a></td><td></td></tr>
</table>

	<h3 id="events-composition-key-events">Key Events During Composition</h3>

		During the composition session, <a><code>keydown</code></a> and <a><code>keyup</code></a> events
		MUST still be sent, and these events MUST have the
		{{KeyboardEvent/isComposing}} attribute set to <code>true</code>.

<table class="event-sequence-table">
<thead><tr><td class="cell-number"></th><th>Event Type</th><th style="text-align:center">{{KeyboardEvent}}<br/> {{KeyboardEvent/isComposing}}</th><th>Notes</th></tr></thead>
<tr><td class="cell-number">1</td><td><a><code>keydown</code></a></td><td style="text-align:center">false</td><td>This is the key event that initiates the composition.</td></tr>
<tr><td class="cell-number">2</td><td><a><code>compositionstart</code></a></td><td style="text-align:center"></td><td></td></tr>
<tr><td class="cell-number">3</td><td><a><code>compositionupdate</code></a></td><td style="text-align:center"></td><td></td></tr>
<tr><td class="cell-number">4</td><td><a><code>keyup</code></a></td><td style="text-align:center">true</td><td></td></tr>
<tr><td class="cell-number"></td><td>...</td><td style="text-align:center"></td><td>Any key events sent during the composition session MUST have <code>isComposing</code> set to <code>true</code>.</td></tr>
<tr><td class="cell-number">5</td><td><a><code>keydown</code></a></td><td style="text-align:center">true</td><td>This is the key event that exits the composition.</td></tr>
<tr><td class="cell-number">6</td><td><a><code>compositionend</code></a></td><td style="text-align:center"></td><td></td></tr>
<tr><td class="cell-number">7</td><td><a><code>keyup</code></a></td><td style="text-align:center">false</td><td></td></tr>
</table>

	<h3 id="events-composition-input-events">Input Events During Composition</h3>

		During the composition session, the <a><code>compositionupdate</code></a> MUST be
		dispatched after the <a><code>beforeinput</code></a> is sent, but before the
		<a><code>input</code></a> event is sent.

<table class="event-sequence-table">
<thead><tr><td class="cell-number"></th><th>Event Type</th><th>Notes</th></tr></thead>
<tr><td class="cell-number">1</td><td><a><code>beforeinput</code></a></td><td></td></tr>
<tr><td class="cell-number">2</td><td><a><code>compositionupdate</code></a></td><td></td></tr>
<tr><td class="cell-number"></td><td></td><td><em>Any DOM updates occur at this point.</em></td></tr>
<tr><td class="cell-number">3</td><td><a><code>input</code></a></td><td></td></tr>
</table>

		<p class="note">
		Most IMEs do not support canceling updates during a composition session.
		</p>

		The <a><code>beforeinput</code></a> and <a><code>input</code></a> events are sent along with the
		<a><code>compositionupdate</code></a> event whenever the DOM is updated as part of
		the composition. Since there are no DOM updates associated with the
		<a><code>compositionend</code></a> event, <a><code>beforeinput</code></a> and <a><code>input</code></a> events
		should not be sent at that time.

<table class="event-sequence-table">
<thead><tr><td class="cell-number"></th><th>Event Type</th><th>Notes</th></tr></thead>
<tr><td class="cell-number">1</td><td><a><code>beforeinput</code></a></td><td><em> Canceling this will prevent the DOM update and the <a><code>input</code></a> event.</em></td></tr>
<tr><td class="cell-number">2</td><td><a><code>compositionupdate</code></a></td><td></td></tr>
<tr><td class="cell-number"></td><td></td><td><em>Any DOM updates occur at this point.</em></td></tr>
<tr><td class="cell-number">3</td><td><a><code>input</code></a></td><td><em>Sent only if the DOM was updated.</em></td></tr>
<tr><td class="cell-number">4</td><td><a><code>compositionend</code></a></td><td></td></tr>
</table>

	<h3 id="events-composition-types">Composition Event Types</h3>

		<h4 id="event-type-compositionstart"><dfn>compositionstart</dfn></h4>

<table class="event-definition">
<tr><th>Type</th><td><strong><code>compositionstart</code></strong></td></tr>
<tr><th>Interface</th><td>{{CompositionEvent}}</td></tr>
<tr><th>Sync / Async</th><td>Sync</td></tr>
<tr><th>Bubbles</th><td>Yes</td></tr>
<tr><th>Trusted Targets</th><td><code>Element</code></td></tr>
<tr><th>Cancelable</th><td>Yes</td></tr>
<tr><th>Composed</th><td>Yes</td></tr>
<tr><th>Default action</th><td>Start a new composition session when a <a>text composition system</a> is enabled</td></tr>
<tr><th>Context<br/> (trusted events)</th><td><ul> <li>{{Event}}.{{Event/target}} : focused element processing the composition</li> <li>{{UIEvent}}.{{UIEvent/view}} : <a><code>Window</code></a></li> <li>{{UIEvent}}.{{UIEvent/detail}} : <code>0</code></li> <li>{{CompositionEvent}}.{{CompositionEvent/data}} : the original string being edited, otherwise the <a>empty string</a></li> </ul></td></tr>
</table>

			A <a>user agent</a> MUST dispatch this event when a <a>text
			composition system</a> is enabled and a new composition session is
			about to begin (or has begun, depending on the <a>text composition
			system</a>) in preparation for composing a passage of text. This
			event type is device-dependent, and MAY rely upon the capabilities
			of the text conversion system and how it is mapped into the
			operating system. When a keyboard is used to feed an input method
			editor, this event type is generated after a <a><code>keydown</code></a> event,
			but speech or handwriting recognition systems MAY send this event
			type without keyboard events.  Some implementations MAY populate the
			{{CompositionEvent/data}} attribute of the <a><code>compositionstart</code></a>
			event with the text currently selected in the document (for editing
			and replacement). Otherwise, the value of the
			{{CompositionEvent/data}} attribute MUST be  the <a>empty string</a>.

			This event MUST be dispatched immediately before a <a>text
			composition system</a> begins a new composition session, and before
			the DOM is modified due to the composition process. The default
			action of this event is for the <a>text composition system</a> to
			start a new composition session. If this event is canceled, the
			<a>text composition system</a> SHOULD discard the current
			composition session.

			<p class="note">
			Canceling the <a><code>compositionstart</code></a> <em>event type</em> is
			distinct from canceling the <a>text composition system</a> itself
			(e.g., by hitting a cancel button or closing an <a>IME</a> window).
			</p>

			<p class="note">
			Some IMEs do not support cancelling an in-progress composition
			session (e.g., such as GTK which doesn't presently have such an
			API). In these cases, calling {{Event/preventDefault()}} will not
			stop this event's default action.
			</p>

		<h4 id="event-type-compositionupdate"><dfn>compositionupdate</dfn></h4>

<table class="event-definition">
<tr><th>Type</th><td><strong><code>compositionupdate</code></strong></td></tr>
<tr><th>Interface</th><td>{{CompositionEvent}}</td></tr>
<tr><th>Sync / Async</th><td>Sync</td></tr>
<tr><th>Bubbles</th><td>Yes</td></tr>
<tr><th>Trusted Targets</th><td><code>Element</code></td></tr>
<tr><th>Cancelable</th><td>No</td></tr>
<tr><th>Composed</th><td>Yes</td></tr>
<tr><th>Default action</th><td>None</td></tr>
<tr><th>Context<br/> (trusted events)</th><td><ul> <li>{{Event}}.{{Event/target}} : focused element processing the composition, <code>null</code> if not accessible</li> <li>{{UIEvent}}.{{UIEvent/view}} : <a><code>Window</code></a></li> <li>{{UIEvent}}.{{UIEvent/detail}} : <code>0</code></li> <li>{{CompositionEvent}}.{{CompositionEvent/data}} : the string comprising the current results of the composition session, which MAY be the <a>empty string</a> if the content has been deleted</li> </ul></td></tr>
</table>

			A <a>user agent</a> SHOULD dispatch this event during a composition
			session when a <a>text composition system</a> updates its active
			text passage with a new character, which is reflected in the string
			in {{CompositionEvent/data}}.

			In <a>text composition systems</a> which keep the ongoing
			composition in sync with the input control, the
			<a><code>compositionupdate</code></a> event MUST be dispatched before the control
			is updated.

			Some <a>text composition systems</a> might not expose this
			information to the DOM, in which case this event will not fire
			during the composition process.

			If the composition session is canceled, this event will be fired
			immediately before the <a><code>compositionend</code></a> event, and the
			{{CompositionEvent/data}} attribute will be set to the <a>empty
			string</a>.

		<h4 id="event-type-compositionend"><dfn>compositionend</dfn></h4>

<table class="event-definition">
<tr><th>Type</th><td><strong><code>compositionend</code></strong></td></tr>
<tr><th>Interface</th><td>{{CompositionEvent}}</td></tr>
<tr><th>Sync / Async</th><td>Sync</td></tr>
<tr><th>Bubbles</th><td>Yes</td></tr>
<tr><th>Trusted Targets</th><td><code>Element</code></td></tr>
<tr><th>Cancelable</th><td>No</td></tr>
<tr><th>Composed</th><td>Yes</td></tr>
<tr><th>Default action</th><td>None</td></tr>
<tr><th>Context<br/> (trusted events)</th><td><ul> <li>{{Event}}.{{Event/target}} : focused element processing the composition</li> <li>{{UIEvent}}.{{UIEvent/view}} : <a><code>Window</code></a></li> <li>{{UIEvent}}.{{UIEvent/detail}} : <code>0</code></li> <li>{{CompositionEvent}}.{{CompositionEvent/data}} : the string comprising the final result of the composition session, which MAY be the <a>empty string</a> if the content has been deleted or if the composition process has been canceled</li> </ul></td></tr>
</table>

			A <a>user agent</a> MUST dispatch this event when a <a>text
			composition system</a> completes or cancels the current composition
			session, and the <a><code>compositionend</code></a> event MUST be dispatched
			after the control is updated.

			This event is dispatched immediately after the <a>text composition
			system</a> completes the composition session (e.g., the <a>IME</a>
			is closed, minimized, switched out of focus, or otherwise dismissed,
			and the focus switched back to the <a>user agent</a>).

<h2 id="legacy-event-initializers">Legacy Event Initializers</h2>

	<em>This section is normative.</em>

	The following features are obsolete and should only be implemented by
	<a>user agents</a> that require compatibility with legacy software.</em>

	Early versions of this specification included an initialization method on
	the interface (for example <code>initMouseEvent</code>) that required a long
	list of parameters that, in most cases, did not fully initialize all
	attributes of the event object. Because of this, event interfaces which were
	derived from the basic {{Event}} interface required that the initializer of
	<em>each</em> of the derived interfaces be called explicitly in order to
	fully initialize an event.

	<div class="example">
	Initializing all the attributes of a MutationEvent requires calls to two
	initializer methods: <code>initEvent</code> and
	<code>initMutationEvent</code>.
	</div>

	Due in part to the length of time in the development of this standard, some
	implementations MAY have taken a dependency on these (now deprecated)
	initializer methods. For completeness, these legacy event initializers are
	described in this section.

	<h3 id="idl-interface-CompositionEvent-initializers">Initializers for interface CompositionEvent</h3>

		<em>This section is informative</em>

		<p class="note">
		The argument list to this legacy CompositionEvent initializer does not
		include the <code>detailArg</code> (present in other initializers) and
		adds the <code>locale</code> argument (see [[#changes-drafts]]); it is
		necessary to preserve this inconsistency for compatibility with existing
		implementations.
		</p>

		<pre class="idl">
		partial interface CompositionEvent {
			// Originally introduced (and deprecated) in this specification
			undefined initCompositionEvent(DOMString typeArg,
				optional boolean bubblesArg = false,
				optional boolean cancelableArg = false,
				optional WindowProxy? viewArg = null,
				optional DOMString dataArg = "");
		};
		</pre>

		<dl dfn-for="CompositionEvent">
			<dt><dfn method>initCompositionEvent(typeArg)</dfn></dt>
			<dd>
				Initializes attributes of a <code>CompositionEvent</code>
				object. This method has the same behavior as
				<code>UIEvent.initUIEvent()</code>. The value of {{UIEvent/detail}}
				remains undefined.

				<p class="warning">
				The <code>initCompositionEvent</code> method is deprecated.
				</p>

				<dl class="parameters">
					<dt>DOMString typeArg</dt>
					<dd>
						Refer to the {{Event/initEvent()}} method for a description of this parameter.
					</dd>

					<dt>boolean bubblesArg</dt>
					<dd>
						Refer to the {{Event/initEvent()}} method for a description of this parameter.
					</dd>

					<dt>boolean cancelableArg</dt>
					<dd>
						Refer to the {{Event/initEvent()}} method for a description of this parameter.
					</dd>

					<dt>Window? viewArg</dt>
					<dd>
						Specifies {{UIEvent/view}}. This value MAY be <code>null</code>.
					</dd>

					<dt>DOMString dataArg</dt>
					<dd>
						Specifies {{CompositionEvent/data}}.
					</dd>
				</dl>
			</dd>
		</dl>

<h2 id="security-considerations">Security Considerations</h2>

	TODO - Add specific concerns for this spec

<h2 id="acknowledgements-contributors">Acknowledgements</h2>

	TODO

<h2 id="other-uievents">Refs to other UIEvent specs \[DELETE]</h2>

	This section will be deleted.

	Temporary place to "define" other referenced UI Events (to make the bikeshed linker happy).
	This will be deleted once we have proper cross-references.

	<dfn>beforeinput</dfn>
	<dfn>keydown</dfn>
	<dfn>keyup</dfn>
	<dfn>input</dfn>

	<h3 id="things">Things defined in other sections</h3>
		<h4 id="event-flow-activation">Activation triggers and behavior</h4>
		<h4 id="event-flow-default-cancel">Default actions and cancelable events</h4>
		<h4 id="event-flow">Event dispatch and DOM event flow</h4>
		<h4 id="conf-interactive-ua">Web browsers and other dynamic or interactive <a>user agents</a></h4>
		<h4 id="conf-author-tools">Authoring tools</h4>

	<h3 id="keyboardevent-things">Things defined in KeyboardEvents</h3>
		<h4 id="keys">Keyboard events and key values</h4>
		<h4 id="keys-IME">Input Method Editors</h4>
		<h4 id="key-legends">Key Legends</h4>

	<h3 id="changes-things">Things defined in Changes</h3>
		<h4 id="changes-drafts">Changes between different drafts of UI Events</h4>

<h2 id="glossary">Glossary \[DELETE]</h2>

This section will be deleted.

Temporary glossary terms (for bikeshed linker).
Many of these are properly defined elsewhere and should be linked to directly.
Terms which should be defined in this spec should be defined inline.

: <dfn>activation behavior</dfn>
::	The action taken when an <a>event</a>, typically initiated by users through
	an input device, causes an element to fulfill a defined task.  The task MAY
	be defined for that element by the <a>host language</a>, or by
	author-defined variables, or both.  The default task for any given element
	MAY be a generic action, or MAY be unique to that element.  For example, the
	activation behavior of an HTML or SVG <code>&lt;a&gt;</code> element is to
	cause the <a>user agent</a> to traverse the link specified in the
	<code>href</code> attribute, with the further optional parameter of
	specifying the browsing context for the traversal (such as the current
	window or tab, a named window, or a new window). The activation behavior of
	an HTML <code>&lt;input&gt;</code> element with the <code>type</code>
	attribute value <code>submit</code> is be to send the values of the form
	elements to an author-defined IRI by the author-defined HTTP method.  See
	[[#event-flow-activation]] for more details.

: <dfn>activation trigger</dfn>
::	An event which is defined to initiate an <a>activation behavior</a>.  Refer
	to [[#event-flow-activation]] for more details.

: <dfn>default action</dfn>
::	A <a>default action</a> is an OPTIONAL supplementary behavior that an
	implementation MUST perform in combination with the dispatch of the event
	object.  Each event type definition, and each specification, defines the
	<a>default action</a> for that event type, if it has one.  An instance of an
	event MAY have more than one <a>default action</a> under some circumstances,
	such as when associated with an <a>activation trigger</a>.  A <a>default
	action</a> MAY be cancelled through the invocation of the
	{{Event/preventDefault()}} method. For more details, see
	[[#event-flow-default-cancel]].

: <dfn>empty string</dfn>
::	The empty string is a value of type <code>DOMString</code> of length
	<code>0</code>, i.e., a string which contains no characters (neither
	printing nor control characters).

: <dfn>event</dfn>
::	An event is the representation of some occurrence (such as a mouse click on
	the presentation of an element, the removal of child node from an element,
	or any number of other possibilities) which is associated with its <a>event
	target</a>. Each event is an instantiation of one specific <a>event
	type</a>.

: <dfn>event target</dfn>
::	The object to which an <a>event</a> is targeted using the [[#event-flow]].
	The event target is the value of the {{Event/target}} attribute.

: <dfn>host language</dfn>
::	Any language which integrates the features of another language or API
	specification, while normatively referencing the origin specification rather
	than redefining those features, and extending those features only in ways
	defined by the origin specification.  An origin specification typically is
	only intended to be implemented in the context of one or more host
	languages, not as a standalone language.  For example, XHTML, HTML, and SVG
	are host languages for UI Events, and they integrate and extend the objects
	and models defined in this specification.

: <dfn>IME</dfn>
: <dfn>input method editor</dfn>
:: 	An <em>input method editor</em> (IME), also known as a <em>front end
	processor</em>, is an application that performs the conversion between
	keystrokes and ideographs or other characters, usually by user-guided
	dictionary lookup, often used in East Asian languages (e.g., Chinese,
	Japanese, Korean).  An <a>IME</a> MAY also be used for dictionary-based word
	completion, such as on mobile devices.  See [[#keys-IME]] for treatment of
	IMEs in this specification.  See also <a>text composition system</a>.

: <dfn>text composition system</dfn>
::	A software component that interprets some form of alternate input (such as a
	<a>input method editor</a>, a speech processor, or a handwriting recognition
	system) and converts it to text.

: <dfn>un-initialized value</dfn>
::	The value of any event attribute (such as {{Event/bubbles}} or
	{{Event/currentTarget}}) before the event has been initialized with
	{{Event/initEvent()}}. The un-initialized values of an event apply
	immediately after a new event has been created using the method
	{{Document/createEvent()}}.

: <dfn>user agent</dfn>
::	A program, such as a browser or content authoring tool, normally running on
	a client machine, which acts on a user's behalf in retrieving, interpreting,
	executing, presenting, or creating content.  Users MAY act on the content
	using different user agents at different times, for different purposes.  See
	the [[#conf-interactive-ua]] and [[#conf-author-tools]] for details on the
	requirements for a <em>conforming</em> user agent.

: <dfn>Window</dfn>
::	The <code>Window</code> is the object referred to by the current <a>document</a>'s
	browsing context's Window Proxy object as defined in
	<a href="http://dev.w3.org/html5/spec/single-page.html#windowproxy" title="HTML5 WindowProxy description">HTML5</a>
	[[HTML5]].

