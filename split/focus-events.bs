<h1>Focus Events</h1>

<pre class="metadata">
Shortname: focus-events
Level:
Group: webapps
Status: ED
TR: https://www.w3.org/TR/uievents/
ED: https://w3c.github.io/uievents/
Repository: w3c/uievents
Editor: Gary Kacmarcik 59482, Google, garykac@google.com
Editor: Travis Leithead 40117, Microsoft, travil@microsoft.com
Former Editor: Doug Schepers, Mar 2008 - May 2011
!Tests: <a href=https://github.com/web-platform-tests/wpt/tree/master/uievents>web-platform-tests uievents/</a> (<a href=https://github.com/web-platform-tests/wpt/labels/uievents>ongoing work</a>)
Abstract:
	*** Focus Events ***

	Note: This is an experimental split of the UI Events spec into smaller, event-specific
	specs. The split was made from an out-of-date snapshot, so the information here is not
	current, so please focus on the overall structure rather than the specifics of the
	content. If this experiment goes well, then we will split the current spec after all
	outstanding pull requests have been handled.
</pre>

<pre class="anchors">
urlPrefix: https://www.w3.org/TR/WebIDL/#idl-; type: type;
	text: long
urlPrefix: https://w3c.github.io/selection-api/#widl-Window-getSelection-Selection; type: dfn; for: Document
	text: getSelection()
url: https://www.w3.org/TR/2004/REC-xml-20040204/#NT-S; type: dfn;
	text: white space
url: https://www.w3.org/TR/uievents-key/#key-attribute-value; type: dfn; spec: uievents-key;
	text: key attribute value
url: https://www.w3.org/TR/uievents-key/#keys-modifier; type: dfn; spec: uievents-key;
	text: modifier keys table
url: https://html.spec.whatwg.org/multipage/forms.html#context-menus; type: dfn;
	text: contextmenu
url: https://www.w3.org/TR/pointerevents3/#pointerevent-interface; type: interface; spec: pointerevents3
	text: PointerEvent
url: https://dom.spec.whatwg.org/#concept-tree-ancestor; type: dfn;
	text: ancestor
url: https://www.w3.org/TR/CSS21/visuren.html#x43; type: dfn;
	text: stacking context
url: https://drafts.csswg.org/css-position-3/#positioned-box; type: dfn;
	text: positioned
url: https://drafts.csswg.org/css-position-4/#paint-a-stacking-context; type: dfn;
	text: painting a stacking context
</pre>

<pre class="link-defaults">
spec:dom; type:interface; text:Document
spec:dom; type:dfn; for:Event; text:target
spec:infra; type:dfn; text:code point
</pre>

<h2 id="spec-intro">Introduction</h2>

	<h3 id="spec-overview">Overview</h3>

		TODO.

	<h3 id="spec-conformance">Conformance</h3>

		Boilerplate?

<h2 id="style-conventions">Stylistic Conventions</h2>

This specification follows the
<a href="http://www.w3.org/People/Schepers/spec-conventions.html">Proposed W3C Specification Conventions</a>,
with the following supplemental additions:

<p class="note">This is a note.</p>

<!-- TODO : Example (but ensure that it doesn't get auto-numbered -->

<p class="&#x0058;&#x0058;&#x0058;">This is an open issue.</p>

<p class="warning">This is a warning.</p>

<pre class="idl-ignore" data-no-idl data-highlight="webidl">
	  interface <b>Example</b> {
	      // This is an IDL definition.
	  };
</pre>

<h2 id="events-focusevent">Focus Events</h2>

	<p class="note">
	This interface and its associated event types and
	[[#events-focusevent-event-order]]
	were designed in accordance to the concepts and guidelines defined in
	<a href="http://www.w3.org/WAI/UA/2010/ED-UAAG20-20100308/">User Agent Accessibility Guidelines 2.0</a>
	[[UAAG20]],
	with particular attention on the
	<a href="http://www.w3.org/WAI/UA/2010/ED-UAAG20-20100308/#gl-focus-mechanism">focus mechanism</a>
	and the terms defined in the
	<a href="http://www.w3.org/WAI/UA/2010/ED-UAAG20-20100308/#def-focus">glossary entry for focus</a>.
	</p>

	<h3 id="interface-focusevent">Interface FocusEvent</h3>

		<p class="intro-dom">Introduced in this specification</p>

		The {{FocusEvent}} interface provides specific contextual information
		associated with Focus events.

		To create an instance of the {{FocusEvent}} interface, use the
		FocusEvent constructor, passing an optional {{FocusEventInit}} dictionary.

		<h4 id="idl-focusevent">FocusEvent</h4>

			<pre class="idl">
			[Exposed=Window]
			interface FocusEvent : UIEvent {
				constructor(DOMString type, optional FocusEventInit eventInitDict = {});
				readonly attribute EventTarget? relatedTarget;
			};
			</pre>

			<dl>
				<dt><code>FocusEvent . relatedTarget</code></dt>
				<dd>
					Used to identify a secondary {{EventTarget}}
					related to a Focus event, depending on the type of event.

					For security reasons with nested browsing contexts, when tabbing
					into or out of a nested context, the relevant {{EventTarget}}
					SHOULD be <code>null</code>.

					The <a>un-initialized value</a> of this attribute MUST be
					<code>null</code>.
				</dd>
			</dl>

		<h4 id="idl-focuseventinit">FocusEventInit</h4>

			<pre class="idl">
			dictionary FocusEventInit : UIEventInit {
				EventTarget? relatedTarget = null;
			};
			</pre>

			<dl>
				<dt><code>FocusEventInit . relatedTarget</code></dt>
				<dd>
					The {{FocusEventInit/relatedTarget}} should be initialized to the element
					losing focus (in the case of a <a><code>focus</code></a> or <a><code>focusin</code></a>
					event) or the element gaining focus (in the case of a <a><code>blur</code></a>
					or <a><code>focusout</code></a> event).
				</dd>
			</dl>

	<h3 id="events-focusevent-event-order">Focus Event Order</h3>

		The focus events defined in this specification occur in a set order
		relative to one another.  The following is the typical sequence of
		events when a focus is shifted between elements (this order assumes
		that no element is initially focused):

<table class="event-sequence-table">
<thead><tr><td class="cell-number"></th><th>Event Type</th><th>Notes</th></tr></thead>
<tr><td class="cell-number"></td><td></td><td><em>User shifts focus</em></td></tr>
<tr><td class="cell-number">1</td><td><a><code>focus</code></a></td><td>Sent after first target element receives focus</td></tr>
<tr><td class="cell-number">2</td><td><a><code>focusin</code></a></td><td>Follows the focus event</td></tr>
<tr><td class="cell-number"></td><td></td><td><em>User shifts focus</em></td></tr>
<tr><td class="cell-number">3</td><td><a><code>blur</code></a></td><td>Sent after first target element loses focus</td></tr>
<tr><td class="cell-number">4</td><td><a><code>focusout</code></a></td><td>Follows the blur event</td></tr>
<tr><td class="cell-number">5</td><td><a><code>focus</code></a></td><td>Sent after second target element receives focus</td></tr>
<tr><td class="cell-number">6</td><td><a><code>focusin</code></a></td><td>Follows the focus event</td></tr>
</table>

		<p class="note">
		This specification does not define the behavior of focus events when
		interacting with methods such as <code>focus()</code> or
		<code>blur()</code>. See the relevant specifications where those methods
		are defined for such behavior.
		</p>

	<h3 id="events-focusevent-doc-focus">Document Focus and Focus Context</h3>

		This event module includes event types for notification of changes in
		document <a>focus</a>. There are three distinct focus contexts that are
		relevant to this discussion:

		*	The <em>operating system focus context</em> which MAY be on one of
			many different applications currently running on the computer. One
			of these applications with focus can be a browser.

		*	When the browser has focus, the user can switch (such as with the
			tab key) the <em>application focus context</em> among the different
			browser user interface fields (e.g., the Web site location bar, a
			search field, etc.). One of these user interface fields can be the
			document being shown in a tab.

		*	When the document itself has focus, the <em>document focus
			context</em> can be set to any of the focusable elements in the
			document.

		The event types defined in this specification deal exclusively with
		document focus, and the <a>event target</a> identified in the event
		details MUST only be part of the document or documents in the window,
		never a part of the browser or operating system, even when switching
		from one focus context to another.

		Normally, a document always has a focused element (even if it is the
		document element itself) and a persistent <a>focus ring</a>. When
		switching between focus contexts, the document's currently focused
		element and focus ring normally remain in their current state. For
		example, if a document has three focusable elements, with the second
		element focused, when a user changes operating system focus to another
		application and then back to the browser, the second element will still
		be focused within the document, and tabbing will change the focus to the
		third element.  A <a>host language</a> MAY define specific elements
		which might receive focus, the conditions under which an element MAY
		receive focus, the means by which focus MAY be changed, and the order
		in which the focus changes.  For example, in some cases an element might
		be given focus by moving a pointer over it, while other circumstances
		might require a mouse click. Some elements might not be focusable at
		all, and some might be focusable only by special means (clicking on the
		element), but not by tabbing to it.  Documents MAY contain multiple
		focus rings.  Other specifications MAY define a more complex focus model
		than is described in this specification, including allowing multiple
		elements to have the current focus.

	<h3 id="events-focus-types">Focus Event Types</h3>

		The Focus event types are listed below.

		<h4 id="event-type-blur"><dfn>blur</dfn></h4>

<table class="event-definition">
<tr><th>Type</th><td><strong><code>blur</code></strong></td></tr>
<tr><th>Interface</th><td>{{FocusEvent}}</td></tr>
<tr><th>Sync / Async</th><td>Sync</td></tr>
<tr><th>Bubbles</th><td>No</td></tr>
<tr><th>Trusted Targets</th><td><a><code>Window</code></a>, <code>Element</code></td></tr>
<tr><th>Cancelable</th><td>No</td></tr>
<tr><th>Composed</th><td>Yes</td></tr>
<tr><th>Default action</th><td>None</td></tr>
<tr><th>Context<br/> (trusted events)</th><td><ul> <li>{{Event}}.{{Event/target}} : <a>event target</a> losing focus</li> <li>{{UIEvent}}.{{UIEvent/view}} : <a><code>Window</code></a></li> <li>{{UIEvent}}.{{UIEvent/detail}} : <code>0</code></li> <li>{{FocusEvent}}.{{FocusEvent/relatedTarget}} : <a>event target</a> receiving focus.</li> </ul></td></tr>
</table>

			A <a>user agent</a> MUST dispatch this event when an <a>event
			target</a> loses focus. The focus MUST be taken from the element
			before the dispatch of this event type. This event type is similar
			to [=focusout=], but does not bubble.

		<h4 id="event-type-focus"><dfn>focus</dfn></h4>

<table class="event-definition">
<tr><th>Type</th><td><strong><code>focus</code></strong></td></tr>
<tr><th>Interface</th><td>{{FocusEvent}}</td></tr>
<tr><th>Sync / Async</th><td>Sync</td></tr>
<tr><th>Bubbles</th><td>No</td></tr>
<tr><th>Trusted Targets</th><td><a><code>Window</code></a>, <code>Element</code></td></tr>
<tr><th>Cancelable</th><td>No</td></tr>
<tr><th>Composed</th><td>Yes</td></tr>
<tr><th>Default action</th><td>None</td></tr>
<tr><th>Context<br/> (trusted events)</th><td><ul> <li>{{Event}}.{{Event/target}} : <a>event target</a> receiving focus</li> <li>{{UIEvent}}.{{UIEvent/view}} : <a><code>Window</code></a></li> <li>{{UIEvent}}.{{UIEvent/detail}} : <code>0</code></li> <li>{{FocusEvent}}.{{FocusEvent/relatedTarget}} : <a>event target</a> losing focus (if any).</li> </ul></td></tr>
</table>

			A <a>user agent</a> MUST dispatch this event when an <a>event
			target</a> receives focus. The focus MUST be given to the element
			before the dispatch of this event type. This event type is similar
			to [=focusin=], but does not bubble.

		<h4 id="event-type-focusin"><dfn>focusin</dfn></h4>

<table class="event-definition">
<tr><th>Type</th><td><strong><code>focusin</code></strong></td></tr>
<tr><th>Interface</th><td>{{FocusEvent}}</td></tr>
<tr><th>Sync / Async</th><td>Sync</td></tr>
<tr><th>Bubbles</th><td>Yes</td></tr>
<tr><th>Trusted Targets</th><td><a><code>Window</code></a>, <code>Element</code></td></tr>
<tr><th>Cancelable</th><td>No</td></tr>
<tr><th>Composed</th><td>Yes</td></tr>
<tr><th>Default action</th><td>None</td></tr>
<tr><th>Context<br/> (trusted events)</th><td><ul> <li>{{Event}}.{{Event/target}} : <a>event target</a> receiving focus</li> <li>{{UIEvent}}.{{UIEvent/view}} : <a><code>Window</code></a></li> <li>{{UIEvent}}.{{UIEvent/detail}} : <code>0</code></li> <li>{{FocusEvent}}.{{FocusEvent/relatedTarget}} : <a>event target</a> losing focus (if any).</li> </ul></td></tr>
</table>

			A <a>user agent</a> MUST dispatch this event when an <a>event target</a>
			receives focus. The <a>event target</a> MUST be the element which
			received focus. The [=focus=] event MUST fire before the dispatch of
			this event type. This event type is similar to [=focus=], but does
			bubble.

		<h4 id="event-type-focusout"><dfn>focusout</dfn></h4>

<table class="event-definition">
<tr><th>Type</th><td><strong><code>focusout</code></strong></td></tr>
<tr><th>Interface</th><td>{{FocusEvent}}</td></tr>
<tr><th>Sync / Async</th><td>Sync</td></tr>
<tr><th>Bubbles</th><td>Yes</td></tr>
<tr><th>Trusted Targets</th><td><a><code>Window</code></a>, <code>Element</code></td></tr>
<tr><th>Cancelable</th><td>No</td></tr>
<tr><th>Composed</th><td>Yes</td></tr>
<tr><th>Default action</th><td>None</td></tr>
<tr><th>Context<br/> (trusted events)</th><td><ul> <li>{{Event}}.{{Event/target}} : <a>event target</a> losing focus</li> <li>{{UIEvent}}.{{UIEvent/view}} : <a><code>Window</code></a></li> <li>{{UIEvent}}.{{UIEvent/detail}} : <code>0</code></li> <li>{{FocusEvent}}.{{FocusEvent/relatedTarget}} : <a>event target</a> receiving focus.</li> </ul></td></tr>
</table>

			A <a>user agent</a> MUST dispatch this event when an <a>event target</a>
			loses focus. The <a>event target</a> MUST be the element which lost
			focus. The [=blur=] event MUST fire before the dispatch of this event
			type. This event type is similar to [=blur=], but does bubble.

<h2 id="legacy-focusevent-events">Legacy {{FocusEvent}} events</h2>

	<h3 id="legacy-focusevent-event-types">Legacy {{FocusEvent}} event types</h3>

		<h4 id="event-type-DOMFocusIn"><dfn>DOMFocusIn</dfn></h4>

			<table class="event-definition">
				<tr>
					<th>Type</th>
					<td><strong><code>DOMFocusIn</code></strong></td>
				</tr>
				<tr>
					<th>Interface</th>
					<td>{{FocusEvent}}</td>
				</tr>
				<tr>
					<th>Sync / Async</th>
					<td>Sync</td>
				</tr>
				<tr>
					<th>Bubbles</th>
					<td>Yes</td>
				</tr>
				<tr>
					<th>Trusted Targets</th>
					<td><a><code>Window</code></a>, <code>Element</code></td>
				</tr>
				<tr>
					<th>Cancelable</th>
					<td>No</td>
				</tr>
				<tr>
					<th>Composed</th>
					<td>Yes</td>
				</tr>
				<tr>
					<th>Default action</th>
					<td>None</td>
				</tr>
				<tr>
					<th>Context<br/>(trusted events)</th>
					<td>
						<ul>
							<li>{{Event}}.{{Event/target}} :
								<a>event target</a> receiving focus</li>
							<li>{{UIEvent}}.{{UIEvent/view}} :
								<a><code>Window</code></a></li>
							<li>{{UIEvent}}.{{UIEvent/detail}} :
								<code>0</code></li>
							<li>{{FocusEvent}}.{{FocusEvent/relatedTarget}} :
								<code>null</code></li>
						</ul>
					</td>
				</tr>
			</table>

			A <a>user agent</a> MUST dispatch this event when an <a>event
			target</a> receives focus. The focus MUST be given to the
			element before the dispatch of this event type. This event type
			MUST be dispatched after the event type <a><code>focus</code></a>.

			<p class="warning">
			The <a><code>DOMFocusIn</code></a> event type is defined in this
			specification for reference and completeness, but this
			specification <a>deprecates</a> the use of this event type in
			favor of the related event types <a><code>focus</code></a> and <a><code>focusin</code></a>.
			</p>

		<h4 id="event-type-DOMFocusOut"><dfn>DOMFocusOut</dfn></h4>

			<table class="event-definition">
				<tr>
					<th>Type</th>
					<td><strong><code>DOMFocusOut</code></strong></td>
				</tr>
				<tr>
					<th>Interface</th>
					<td>{{FocusEvent}}</td>
				</tr>
				<tr>
					<th>Sync / Async</th>
					<td>Sync</td>
				</tr>
				<tr>
					<th>Bubbles</th>
					<td>Yes</td>
				</tr>
				<tr>
					<th>Trusted Targets</th>
					<td><a><code>Window</code></a>, <code>Element</code></td>
				</tr>
				<tr>
					<th>Cancelable</th>
					<td>No</td>
				</tr>
				<tr>
					<th>Composed</th>
					<td>Yes</td>
				</tr>
				<tr>
					<th>Default action</th>
					<td>None</td>
				</tr>
				<tr>
					<th>Context<br/>(trusted events)</th>
					<td>
						<ul>
							<li>{{Event}}.{{Event/target}} :
								<a>event target</a> losing focus</li>
							<li>{{UIEvent}}.{{UIEvent/view}} :
								<a><code>Window</code></a></li>
							<li>{{UIEvent}}.{{UIEvent/detail}} :
								<code>0</code></li>
							<li>{{FocusEvent}}.{{FocusEvent/relatedTarget}} :
								<code>null</code></li>
						</ul>
					</td>
				</tr>
			</table>

			A <a>user agent</a> MUST dispatch this event when an <a>event
			target</a> loses focus. The focus MUST be taken from the element
			before the dispatch of this event type. This event type MUST be
			dispatched after the event type <a><code>blur</code></a>.

			<p class="warning">
			The <a><code>DOMFocusOut</code></a> event type is defined in this
			specification for reference and completeness, but this
			specification <a>deprecates</a> the use of this event type in
			favor of the related event types <a><code>blur</code></a> and <a><code>focusout</code></a>.
			</p>

	<h3 id="legacy-focusevent-event-order">Legacy FocusEvent event order</h3>

		The following is the typical sequence of events when a focus is shifted
		between elements, including the deprecated <a><code>DOMFocusIn</code></a> and
		<a><code>DOMFocusOut</code></a> events. The order shown assumes that no element is
		initially focused.

<table class="event-sequence-table">
<thead><tr><td class="cell-number"></th><th>Event Type</th><th>Notes</th></tr></thead>
<tr><td class="cell-number"></td><td></td><td><em>User shifts focus</em></td></tr>
<tr><td class="cell-number">1</td><td><a><code>focusin</code></a></td><td>Sent before first target element receives focus</td></tr>
<tr><td class="cell-number">2</td><td><a><code>focus</code></a></td><td>Sent after first target element receives focus</td></tr>
<tr><td class="cell-number">3</td><td><a><code>DOMFocusIn</code></a></td><td>If supported</td></tr>
<tr><td class="cell-number"></td><td></td><td><em>User shifts focus</em></td></tr>
<tr><td class="cell-number">4</td><td><a><code>focusout</code></a></td><td>Sent before first target element loses focus</td></tr>
<tr><td class="cell-number">5</td><td><a><code>focusin</code></a></td><td>Sent before second target element receives focus</td></tr>
<tr><td class="cell-number">6</td><td><a><code>blur</code></a></td><td>Sent after first target element loses focus</td></tr>
<tr><td class="cell-number">7</td><td><a><code>DOMFocusOut</code></a></td><td>If supported</td></tr>
<tr><td class="cell-number">8</td><td><a><code>focus</code></a></td><td>Sent after second target element receives focus</td></tr>
<tr><td class="cell-number">9</td><td><a><code>DOMFocusIn</code></a></td><td>If supported</td></tr>
</table>

<h2 id="security-considerations">Security Considerations</h2>

	TODO - Add specific concerns for this spec

<h2 id="acknowledgements-contributors">Acknowledgements</h2>

	TODO

<h2 id="other-uievents">Refs to other UIEvent specs \[DELETE]</h2>

	This section will be deleted.

	Temporary place to "define" other referenced UI Events (to make the bikeshed linker happy).
	This will be deleted once we have proper cross-references.

	<h3 id="things">Things defined in other sections</h3>

		<h4 id="event-flow-activation">Activation triggers and behavior</h4>
		<h4 id="events-compositionevents">Composition Events</h4>
		<h4 id="event-flow-default-cancel">Default actions and cancelable events</h4>
		<h4 id="event-flow">Event dispatch and DOM event flow</h4>
		<h4 id="conf-interactive-ua">Web browsers and other dynamic or interactive <a>user agents</a></h4>
		<h4 id="conf-author-tools">Authoring tools</h4>

<h2 id="glossary">Glossary \[DELETE]</h2>

This section will be deleted.

Temporary glossary terms (for bikeshed linker).
Many of these are properly defined elsewhere and should be linked to directly.
Terms which should be defined in this spec should be defined inline.

: <dfn>event</dfn>
::	An event is the representation of some occurrence (such as a mouse click on
	the presentation of an element, the removal of child node from an element,
	or any number of other possibilities) which is associated with its <a>event
	target</a>. Each event is an instantiation of one specific <a>event
	type</a>.

: <dfn>event focus</dfn>
::	Event focus is a special state of receptivity and concentration on a
	particular element or other <a>event target</a> within a <a>document</a>.  Each
	element has different behavior when focused, depending on its functionality,
	such as priming the element for activation (as for a button or hyperlink) or
	toggling state (as for a checkbox), receiving text input (as for a text form
	field), or copying selected text.  For more details, see
	[[#events-focusevent-doc-focus]].

: <dfn>event target</dfn>
::	The object to which an <a>event</a> is targeted using the [[#event-flow]].
	The event target is the value of the {{Event/target}} attribute.

: <dfn lt="focus ring">event focus ring</dfn>
::	An event focus ring is an ordered set of <a>event focus</a> targets within a
	<a>document</a>.  A <a>host language</a> MAY define one or more ways to determine
	the order of targets, such as document order, a numerical index defined per
	focus target, explicit pointers between focus targets, or a hybrid of
	different models.  Each document MAY contain multiple focus rings, or
	conditional focus rings.  Typically, for document-order or indexed focus
	rings, focus <q>wraps around</q> from the last focus target to the
	first.

: <dfn>host language</dfn>
::	Any language which integrates the features of another language or API
	specification, while normatively referencing the origin specification rather
	than redefining those features, and extending those features only in ways
	defined by the origin specification.  An origin specification typically is
	only intended to be implemented in the context of one or more host
	languages, not as a standalone language.  For example, XHTML, HTML, and SVG
	are host languages for UI Events, and they integrate and extend the objects
	and models defined in this specification.

: <dfn>un-initialized value</dfn>
::	The value of any event attribute (such as {{Event/bubbles}} or
	{{Event/currentTarget}}) before the event has been initialized with
	{{Event/initEvent()}}. The un-initialized values of an event apply
	immediately after a new event has been created using the method
	{{Document/createEvent()}}.

: <dfn>user agent</dfn>
::	A program, such as a browser or content authoring tool, normally running on
	a client machine, which acts on a user's behalf in retrieving, interpreting,
	executing, presenting, or creating content.  Users MAY act on the content
	using different user agents at different times, for different purposes.  See
	the [[#conf-interactive-ua]] and [[#conf-author-tools]] for details on the
	requirements for a <em>conforming</em> user agent.

: <dfn>Window</dfn>
::	The <code>Window</code> is the object referred to by the current <a>document</a>'s
	browsing context's Window Proxy object as defined in
	<a href="http://dev.w3.org/html5/spec/single-page.html#windowproxy" title="HTML5 WindowProxy description">HTML5</a>
	[[HTML5]].

