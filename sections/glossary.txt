<section>
<h2 id="glossary">Glossary</h2>

Some of the following term definitions have been borrowed or modified from
similar definitions in other W3C or standards documents. See the links within
the definitions for more information.


: <dfn>activation behavior</dfn>
::	The action taken when an <a>event</a>, typically initiated by users through
	an input device, causes an element to fulfill a defined task.  The task MAY
	be defined for that element by the <a>host language</a>, or by
	author-defined variables, or both.  The default task for any given element
	MAY be a generic action, or MAY be unique to that element.  For example, the
	activation behavior of an HTML or SVG <code>&lt;a&gt;</code> element is to
	cause the <a>user agent</a> to traverse the link specified in the
	<code>href</code> attribute, with the further optional parameter of
	specifying the browsing context for the traversal (such as the current
	window or tab, a named window, or a new window). The activation behavior of
	an HTML <code>&lt;input&gt;</code> element with the <code>type</code>
	attribute value <code>submit</code> is be to send the values of the form
	elements to an author-defined IRI by the author-defined HTTP method.  See
	[[#event-flow-activation]] for more details.

: <dfn>activation trigger</dfn>
::	An event which is defined to initiate an <a>activation behavior</a>.  Refer
	to [[#event-flow-activation]] for more details.

: <dfn>author</dfn>
::	In the context of this specification, an <em>author</em>, <em>content
	author</em>, or <em>script author</em> is a person who writes script or
	other executable content that uses the interfaces, events, and event flow
	defined in this specification. See [[#conf-authors]] conformance category
	for more details.

: <dfn>body element</dfn>
::	In HTML or XHTML <a>documents</a>, the body element represents the contents of the
	document. In a well-formed HTML document, the body element is a first
	descendant of the <a>root element</a>.

: <dfn lt="bubble phase|bubbling phase">bubbling phase</dfn>
::	The process by which an <a>event</a> can be handled by one of the target's
	ancestors <em>after</em> being handled by the <a>event target</a>. See the
	description of the <a>bubble phase</a> in the context of event flow for more
	details.

: <dfn>capture phase</dfn>
::	The process by which an <a>event</a> can be handled by one of the target's
	ancestors <em>before</em> being handled by the <a>event target</a>. See the
	description of the <a href="#capture-phase">capture phase</a> in the context
	of event flow for more details.

: <dfn>character value</dfn>
::	In the context of key values, a character value is a string representing one
	or more Unicode characters, such as a letter or symbol, or a set of letters, each
	belonging to the set of valid <a>Unicode character categories</a>.
	In this specification, character values are denoted as a unicode string
	(e.g., UNI{U+0020}) or a glyph representation of the same code point (e.g.,
	GLYPH{&nbsp;}), and are color coded to help distinguish these two representations.

	<p class="note">
	In source code, some key values, such as non-graphic characters, can be
	represented using the character escape syntax of the programming language in
	use.
	</p>

: <dfn>current event target</dfn>
::	In an event flow, the current event target is the object associated with the
	<a>event handler</a> that is currently being dispatched. This object MAY be
	the <a>event target</a> itself or one of its ancestors. The current event
	target changes as the <a>event</a> propagates from object to object through
	the various <a>phases</a> of the event flow. The current event target is the
	value of the {{Event/currentTarget}} attribute.

: <dfn>dead key</dfn>
::	A dead key is a key or combination of keys which produces no character by
	itself, but which in combination or sequence with another key produces a
	modified character, such as a character with diacritical marks (e.g.,
	GLYPH{&#xF6;}, GLYPH{&#xE9;}, GLYPH{&#xE2;}).

: <dfn>default action</dfn>
::	A <a>default action</a> is an OPTIONAL supplementary behavior that an
	implementation MUST perform in combination with the dispatch of the event
	object.  Each event type definition, and each specification, defines the
	<a>default action</a> for that event type, if it has one.  An instance of an
	event MAY have more than one <a>default action</a> under some circumstances,
	such as when associated with an <a>activation trigger</a>.  A <a>default
	action</a> MAY be cancelled through the invocation of the
	{{Event/preventDefault()}} method. For more details, see
	[[#event-flow-default-cancel]].

: <dfn>delta</dfn>
::	The estimated scroll amount (in pixels, lines, or pages) that the user agent
	will scroll or zoom the page in response to the physical movement of an
	input device that supports the {{WheelEvent}} interface (such as a mouse
	wheel or touch pad). The value of a <a>delta</a> (e.g., the
	{{WheelEvent/deltaX}}, {{WheelEvent/deltaY}}, or {{WheelEvent/deltaZ}}
	attributes) is to be interpreted in the context of the current
	{{WheelEvent/deltaMode}} property. The relationship between the physical
	movement of a wheel (or other device) and whether the <a>delta</a> is
	positive or negative is environment and device dependent. However, if a user
	agent scrolls as the <a>default action</a> then the sign of the <a>delta</a>
	is given by a right-hand coordinate system where positive X,Y, and Z axes
	are directed towards the right-most edge, bottom-most edge, and farthest
	depth (away from the user) of the <a>document</a>, respectively.

: <dfn lt="deprecates|deprecated">deprecated</dfn>
::	Features marked as deprecated are included in the specification as reference
	to older implementations or specifications, but are OPTIONAL and
	discouraged.  Only features which have existing or in-progress replacements
	MUST be deprecated in this specification.  Implementations which do not
	already include support for the feature MAY implement deprecated features
	for reasons of backwards compatibility with existing content, but content
	authors creating content SHOULD NOT use deprecated features, unless there is
	no other way to solve a use case. Other specifications which reference this
	specification SHOULD NOT use deprecated features, but SHOULD point instead
	to the replacements of which the feature is deprecated in favor.  Features
	marked as deprecated in this specification are expected to be dropped from
	future specifications.

: <dfn>dispatch</dfn>
::	To create an event with attributes and methods appropriate to its type and
	context, and propagate it through the DOM tree in the specified manner.
	Interchangeable with the term <q><a>fire</a></q>, e.g., <q>fire a
	EVENT{click} event</q> or <q>dispatch a EVENT{load} event</q>.

: <dfn>document</dfn>
::	An object instantiating the {{Document}} interface [[DOM-Level-3-Core]],
	representing the entire HTML or XML text document.  Conceptually, it is the
	root of the document tree, and provides the primary access to the document's
	data.

: <dfn>DOM application</dfn>
::	A DOM application is script or code, written by a content author or
	automatically generated, which takes advantage of the interfaces, methods,
	attributes, events, and other features described in this specification in
	order to make dynamic or interactive content, such as Web applications,
	exposed to users in a <a>user agent</a>.

: <dfn>DOM Level 0</dfn>
::	The term <q>DOM Level 0</q> refers to a mix of HTML <a>document</a> functionalities,
	often not formally specified but traditionally supported as de facto
	standards, implemented originally by Netscape Navigator version 3.0 or
	Microsoft Internet Explorer version 3.0.  In many cases, attributes or
	methods have been included for reasons of backward compatibility with <q>DOM
	Level 0</q>.

: <dfn>empty string</dfn>
::	The empty string is a value of type <code>DOMString</code> of length
	<code>0</code>, i.e., a string which contains no characters (neither
	printing nor control characters).

: <dfn>event</dfn>
::	An event is the representation of some occurrence (such as a mouse click on
	the presentation of an element, the removal of child node from an element,
	or any number of other possibilities) which is associated with its <a>event
	target</a>. Each event is an instantiation of one specific <a>event
	type</a>.

: <dfn>event focus</dfn>
::	Event focus is a special state of receptivity and concentration on a
	particular element or other <a>event target</a> within a <a>document</a>.  Each
	element has different behavior when focused, depending on its functionality,
	such as priming the element for activation (as for a button or hyperlink) or
	toggling state (as for a checkbox), receiving text input (as for a text form
	field), or copying selected text.  For more details, see
	[[#events-focusevent-doc-focus]].

: <dfn lt="focus ring">event focus ring</dfn>
::	An event focus ring is an ordered set of <a>event focus</a> targets within a
	<a>document</a>.  A <a>host language</a> MAY define one or more ways to determine
	the order of targets, such as document order, a numerical index defined per
	focus target, explicit pointers between focus targets, or a hybrid of
	different models.  Each document MAY contain multiple focus rings, or
	conditional focus rings.  Typically, for document-order or indexed focus
	rings, focus <q>wraps around</q> from the last focus target to the
	first.

: <dfn>event handler</dfn>
: <dfn>event listener</dfn>
::	An object that implements the {{EventListener}} interface and provides an
	{{EventListener/handleEvent()}} callback method. Event handlers are
	language-specific. Event handlers are invoked in the context of a particular
	object (the <a>current event target</a>) and are provided with the event
	object itself.

	<p class="note">
	In JavaScript, user-defined functions are considered to implement the
	{{EventListener}} interface. Thus the event object will be provided as the
	first parameter to the user-defined function when it is invoked.
	Additionally, JavaScript objects can also implement the {{EventListener}}
	interface when they define a {{EventListener/handleEvent}} method.
	</p>

: <dfn>event order</dfn>
::	The sequence in which events from the same event source or process occur,
	using the same or related event interfaces. For example, in an environment
	with a mouse, a track pad, and a keyboard, each of those input devices would
	constitute a separate event source, and each would follow its own event
	order. A EVENT{mousedown} event from the trackpad followed by a
	EVENT{mouseup} event from the mouse would not result in a EVENT{click} event.

	<p class="note">
	There can be interactions between different event orders. For example, a
	EVENT{click} event might be modified by a concurrent EVENT{keydown} event
	(e.g., via KEYCAP{Shift}<code>+</code>EVENT{click}). However, the event
	orders of these different event sources would be distinct.

	The event order of some interfaces are device-independent. For example, a
	user might change focus using the KEYCAP{Tab} key, or by clicking the new
	focused element with the mouse.  The event order in such cases depends on
	the state of the process, not on the state of the device that initiates the
	state change.

: <dfn>event phase</dfn>
::	See <a>phase</a>.

: <dfn>event target</dfn>
::	The object to which an <a>event</a> is targeted using the [[#event-flow]].
	The event target is the value of the {{Event/target}} attribute.

: <dfn>event type</dfn>
::	An <em>event type</em> is an <a>event</a> object with a particular name and
	which defines particular trigger conditions, properties, and other
	characteristics which distinguish it from other event types.  For example,
	the EVENT{click} event type has different characteristics than the
	EVENT{mouseover} or EVENT{load} event types. The event type is exposed as
	the {{Event/type}} attribute on the event object.  See [[#event-types]] for
	more details.  Also loosely referred to as <em>"event"</em>, such as the
	<em>EVENT{click} event</em>.

: <dfn>fire</dfn>
::	A synonym for <a>dispatch</a>.

: <dfn>host language</dfn>
::	Any language which integrates the features of another language or API
	specification, while normatively referencing the origin specification rather
	than redefining those features, and extending those features only in ways
	defined by the origin specification.  An origin specification typically is
	only intended to be implemented in the context of one or more host
	languages, not as a standalone language.  For example, XHTML, HTML, and SVG
	are host languages for UI Events, and they integrate and extend the objects
	and models defined in this specification.

: <dfn>hysteresis</dfn>
::	A feature of human interface design to accept input values within a certain
	range of location or time, in order to improve the user experience.  For
	example, allowing for small deviation in the time it takes for a user to
	double-click a mouse button is temporal hysteresis, and not immediately
	closing a nested menu if the user mouses out from the parent window when
	transitioning to the child menu is locative hysteresis.

: <dfn>IME</dfn>
: <dfn>input method editor</dfn>
:: 	An <em>input method editor</em> (IME), also known as a <em>front end
	processor</em>, is an application that performs the conversion between
	keystrokes and ideographs or other characters, usually by user-guided
	dictionary lookup, often used in East Asian languages (e.g., Chinese,
	Japanese, Korean).  An <a>IME</a> MAY also be used for dictionary-based word
	completion, such as on mobile devices.  See [[#keys-IME]] for treatment of
	IMEs in this specification.  See also <a>text composition system</a>.

: <dfn>key mapping</dfn>
::	Key mapping is the process of assigning a key value to a particular key, and
	is the result of a combination of several factors, including the operating
	system and the keyboard layout (e.g., <a>QWERTY</a>, Dvorak, Spanish,
	InScript, Chinese, etc.), and after taking into account all <a>modifier
	key</a> (KEYCAP{Shift}, KEYCAP{Alt}, et al.) and <a>dead key</a> states.

: <dfn>key value</dfn>
::	A key value is a <a>character value</a> or multi-character string (such as
	KEY{Enter}, KEY{Tab}, or KEY{MediaTrackNext}) associated with a key in a
	particular state. Every key has a key value, whether or not it has a
	<a>character value</a>. This includes control keys, function keys,
	<a>modifier keys</a>, <a>dead keys</a>, and any other key. The key value of
	any given key at any given time depends upon the <a>key mapping</a>.

: <dfn>modifier key</dfn>
::	A modifier key changes the normal behavior of a key, such as to produce a
	character of a different case (as with the KEYCAP{Shift} key), or to alter
	what functionality the key triggers (as with the KEYCAP{Fn} or KEYCAP{Alt}
	keys). See [[#keys-modifiers]] for more information about modifier keys and
	refer to the [=Modifier Keys table=] in [[UIEvents-Key]] for a list
	of valid modifier keys.

: <dfn lt="namespace URIs">namespace URI</dfn>
::	A <em>namespace URI</em> is a URI that identifies an XML namespace. This is
	called the namespace name in [[XML-Names11]]. See also sections 1.3.2
	<a class="normative" href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#baseURIs-Considerations"><em>DOM URIs</em></a>
	and 1.3.3
	<a class="normative" href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#Namespaces-Considerations"><em>XML Namespaces</em></a>
	regarding URIs and namespace URIs handling and comparison in the DOM APIs.

: <dfn>phase</dfn>
::	In the context of <a>events</a>, a phase is set of logical traversals from
	node to node along the DOM tree, from the <a>Window</a> to the {{Document}}
	object, <a>root element</a>, and down to the <a>event target</a> (<a>capture
	phase</a>), at the <a>event target</a> itself (<a>target phase</a>), and
	back up the same chain (<a>bubbling phase</a>).

: <dfn>propagation path</dfn>
::	The ordered set of <a>current event targets</a> though which an <a>event</a>
	object will pass sequentially on the way to and back from the <a>event
	target</a>.  As the event propagates, each <a>current event target</a> in
	the propagation path is in turn set as the {{Event/currentTarget}}. The
	propagation path is initially composed of one or more <a>event phases</a> as
	defined by the <a>event type</a>, but MAY be interrupted.  Also known as an
	<em>event target chain</em>.

: <dfn>QWERTY</dfn>
::	QWERTY (pronounced <q>&#x2C8;kw&#x25C;rti</q>) is a common keyboard layout,
	so named because the first five character keys on the top row of letter keys
	are Q, W, E, R, T, and Y.  There are many other popular keyboard layouts
	(including the Dvorak and Colemak layouts), most designed for localization
	or ergonomics.

: <dfn>root element</dfn>
::	The first element node of a <a>document</a>, of which all other elements are
	children. The document element.

: <dfn>rotation</dfn>
:: An indication of incremental change on an input device using the
	{{WheelEvent}} interface. On some devices this MAY be a literal rotation of
	a wheel, while on others, it MAY be movement along a flat surface, or
	pressure on a particular button.

: <dfn>target phase</dfn>
::	The process by which an <a>event</a> can be handled by the <a>event
	target</a>. See the description of the <a>target phase</a> in the context of
	event flow for more details.

: <dfn>text composition system</dfn>
::	A software component that interprets some form of alternate input (such as a
	<a>input method editor</a>, a speech processor, or a handwriting recognition
	system) and converts it to text.

: <dfn>topmost event target</dfn>
::	The <a>topmost event target</a> MUST be the element highest in the rendering
	order which is capable of being an <a>event target</a>. In graphical user
	interfaces this is the element under the user's pointing device. A user
	interface's <q>hit testing</q> facility is used to determine the target. For
	specific details regarding hit testing and stacking order, refer to the
	<a>host language</a>.

: <dfn>Unicode character categories</dfn>
:: A subset of the General Category values that are defined for each Unicode
	code point. This subset contains all the
	Letter (<abbr title="Letter, Lowercase">Ll</abbr>,
		<abbr title="Letter, Modifier">Lm</abbr>,
		<abbr title="Letter, Other">Lo</abbr>,
		<abbr title="Letter, Titlecase">Lt</abbr>,
		<abbr title="Letter, Uppercase">Lu</abbr>),
	Number (<abbr title="Number, Decimal Digit">Nd</abbr>,
		<abbr title="Number, Letter">Nl</abbr>,
		<abbr title="Number, Other">No</abbr>),
	Punctuation (<abbr title="Punctuation, Connector">Pc</abbr>,
		<abbr title="Punctuation, Dash">Pd</abbr>,
		<abbr title="Punctuation, Close">Pe</abbr>,
		<abbr title="Punctuation, Final quote">Pf</abbr>,
		<abbr title="Punctuation, Initial quote">Pi</abbr>,
		<abbr title="Punctuation, Other">Po</abbr>,
		<abbr title="Punctuation, Open">Ps</abbr>)
	and Symbol (<abbr title="Symbol, Currency">Sc</abbr>,
		<abbr title="Symbol, Modifier">Sk</abbr>,
		<abbr title="Symbol, Math">Sm</abbr>,
		<abbr title="Symbol, Other">So</abbr>)
	category values.

: <dfn>un-initialized value</dfn>
::	The value of any event attribute (such as {{Event/bubbles}} or
	{{Event/currentTarget}}) before the event has been initialized with
	{{Event/initEvent()}}. The un-initialized values of an event apply
	immediately after a new event has been created using the method
	{{Document/createEvent()}}.

: <dfn>user agent</dfn>
::	A program, such as a browser or content authoring tool, normally running on
	a client machine, which acts on a user's behalf in retrieving, interpreting,
	executing, presenting, or creating content.  Users MAY act on the content
	using different user agents at different times, for different purposes.  See
	the [[#conf-interactive-ua]] and [[#conf-author-tools]] for details on the
	requirements for a <em>conforming</em> user agent.

: <dfn>Window</dfn>
::	The <code>Window</code> is the object referred to by the current <a>document</a>'s
	browsing context's Window Proxy object as defined in
	<a href="http://dev.w3.org/html5/spec/single-page.html#windowproxy" title="HTML5 WindowProxy description">HTML5</a>
	[[HTML5]].

</section>
